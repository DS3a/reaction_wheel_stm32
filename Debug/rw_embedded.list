
rw_embedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  08009960  08009960  00019960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ca4  08009ca4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08009ca4  08009ca4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ca4  08009ca4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009ca4  08009ca4  00019ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cac  08009cac  00019cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000024b4  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000252c  2000252c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022709  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043a7  00000000  00000000  000427b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f0  00000000  00000000  00046b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001690  00000000  00000000  00048348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005f1c  00000000  00000000  000499d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bfe6  00000000  00000000  0004f8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db2d0  00000000  00000000  0006b8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00146baa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000693c  00000000  00000000  00146bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009948 	.word	0x08009948

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08009948 	.word	0x08009948

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
 80001f8:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	0a5a      	lsrs	r2, r3, #9
 8000200:	490f      	ldr	r1, [pc, #60]	; (8000240 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000202:	fba1 1202 	umull	r1, r2, r1, r2
 8000206:	09d2      	lsrs	r2, r2, #7
 8000208:	490e      	ldr	r1, [pc, #56]	; (8000244 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800020a:	fb01 f202 	mul.w	r2, r1, r2
 800020e:	1a9b      	subs	r3, r3, r2
 8000210:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	0a5b      	lsrs	r3, r3, #9
 8000218:	4a09      	ldr	r2, [pc, #36]	; (8000240 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800021a:	fba2 2303 	umull	r2, r3, r2, r3
 800021e:	09db      	lsrs	r3, r3, #7
 8000220:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	441a      	add	r2, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	601a      	str	r2, [r3, #0]
}
 8000234:	bf00      	nop
 8000236:	3714      	adds	r7, #20
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr
 8000240:	00044b83 	.word	0x00044b83
 8000244:	3b9aca00 	.word	0x3b9aca00

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024c:	f002 fb3e 	bl	80028cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000250:	f000 f838 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000254:	f000 f942 	bl	80004dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000258:	f000 f91a 	bl	8000490 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800025c:	f000 f8e8 	bl	8000430 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000260:	f000 f892 	bl	8000388 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000264:	f006 fc4c 	bl	8006b00 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ros_Task */
  ros_TaskHandle = osThreadNew(rosserial_entry, NULL, &ros_Task_attributes);
 8000268:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <main+0x58>)
 800026a:	2100      	movs	r1, #0
 800026c:	480d      	ldr	r0, [pc, #52]	; (80002a4 <main+0x5c>)
 800026e:	f006 fcaf 	bl	8006bd0 <osThreadNew>
 8000272:	4603      	mov	r3, r0
 8000274:	4a0c      	ldr	r2, [pc, #48]	; (80002a8 <main+0x60>)
 8000276:	6013      	str	r3, [r2, #0]

  /* creation of encoder_Task */
  encoder_TaskHandle = osThreadNew(encoder_entry, NULL, &encoder_Task_attributes);
 8000278:	4a0c      	ldr	r2, [pc, #48]	; (80002ac <main+0x64>)
 800027a:	2100      	movs	r1, #0
 800027c:	480c      	ldr	r0, [pc, #48]	; (80002b0 <main+0x68>)
 800027e:	f006 fca7 	bl	8006bd0 <osThreadNew>
 8000282:	4603      	mov	r3, r0
 8000284:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <main+0x6c>)
 8000286:	6013      	str	r3, [r2, #0]

  /* creation of bldc_Task */
  bldc_TaskHandle = osThreadNew(bldc_entry, NULL, &bldc_Task_attributes);
 8000288:	4a0b      	ldr	r2, [pc, #44]	; (80002b8 <main+0x70>)
 800028a:	2100      	movs	r1, #0
 800028c:	480b      	ldr	r0, [pc, #44]	; (80002bc <main+0x74>)
 800028e:	f006 fc9f 	bl	8006bd0 <osThreadNew>
 8000292:	4603      	mov	r3, r0
 8000294:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <main+0x78>)
 8000296:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000298:	f006 fc66 	bl	8006b68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029c:	e7fe      	b.n	800029c <main+0x54>
 800029e:	bf00      	nop
 80002a0:	08009afc 	.word	0x08009afc
 80002a4:	08000559 	.word	0x08000559
 80002a8:	200001ec 	.word	0x200001ec
 80002ac:	08009b20 	.word	0x08009b20
 80002b0:	080005b9 	.word	0x080005b9
 80002b4:	200001f0 	.word	0x200001f0
 80002b8:	08009b44 	.word	0x08009b44
 80002bc:	080005ed 	.word	0x080005ed
 80002c0:	200001f4 	.word	0x200001f4

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b0a6      	sub	sp, #152	; 0x98
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002ce:	2228      	movs	r2, #40	; 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f009 f9ae 	bl	8009634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2258      	movs	r2, #88	; 0x58
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f009 f9a0 	bl	8009634 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f4:	2302      	movs	r3, #2
 80002f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	2301      	movs	r3, #1
 80002fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fc:	2310      	movs	r3, #16
 80002fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000302:	2302      	movs	r3, #2
 8000304:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800030c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000310:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000314:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000322:	4618      	mov	r0, r3
 8000324:	f002 ffd0 	bl	80032c8 <HAL_RCC_OscConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800032e:	f000 f97d 	bl	800062c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000332:	230f      	movs	r3, #15
 8000334:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000336:	2302      	movs	r3, #2
 8000338:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000342:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000348:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800034c:	2102      	movs	r1, #2
 800034e:	4618      	mov	r0, r3
 8000350:	f004 f80e 	bl	8004370 <HAL_RCC_ClockConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800035a:	f000 f967 	bl	800062c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2;
 800035e:	4b09      	ldr	r3, [pc, #36]	; (8000384 <SystemClock_Config+0xc0>)
 8000360:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000366:	2300      	movs	r3, #0
 8000368:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	4618      	mov	r0, r3
 800036e:	f004 fa67 	bl	8004840 <HAL_RCCEx_PeriphCLKConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000378:	f000 f958 	bl	800062c <Error_Handler>
  }
}
 800037c:	bf00      	nop
 800037e:	3798      	adds	r7, #152	; 0x98
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	00100002 	.word	0x00100002

08000388 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08c      	sub	sp, #48	; 0x30
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800038e:	f107 030c 	add.w	r3, r7, #12
 8000392:	2224      	movs	r2, #36	; 0x24
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f009 f94c 	bl	8009634 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800039c:	463b      	mov	r3, r7
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003a6:	4b21      	ldr	r3, [pc, #132]	; (800042c <MX_TIM2_Init+0xa4>)
 80003a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003ae:	4b1f      	ldr	r3, [pc, #124]	; (800042c <MX_TIM2_Init+0xa4>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b4:	4b1d      	ldr	r3, [pc, #116]	; (800042c <MX_TIM2_Init+0xa4>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80003ba:	4b1c      	ldr	r3, [pc, #112]	; (800042c <MX_TIM2_Init+0xa4>)
 80003bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c2:	4b1a      	ldr	r3, [pc, #104]	; (800042c <MX_TIM2_Init+0xa4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <MX_TIM2_Init+0xa4>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80003ce:	2303      	movs	r3, #3
 80003d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80003d2:	2300      	movs	r3, #0
 80003d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80003d6:	2301      	movs	r3, #1
 80003d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80003e2:	2300      	movs	r3, #0
 80003e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80003e6:	2301      	movs	r3, #1
 80003e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80003f2:	f107 030c 	add.w	r3, r7, #12
 80003f6:	4619      	mov	r1, r3
 80003f8:	480c      	ldr	r0, [pc, #48]	; (800042c <MX_TIM2_Init+0xa4>)
 80003fa:	f004 fd11 	bl	8004e20 <HAL_TIM_Encoder_Init>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000404:	f000 f912 	bl	800062c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000408:	2300      	movs	r3, #0
 800040a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800040c:	2300      	movs	r3, #0
 800040e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000410:	463b      	mov	r3, r7
 8000412:	4619      	mov	r1, r3
 8000414:	4805      	ldr	r0, [pc, #20]	; (800042c <MX_TIM2_Init+0xa4>)
 8000416:	f005 f859 	bl	80054cc <HAL_TIMEx_MasterConfigSynchronization>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000420:	f000 f904 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000424:	bf00      	nop
 8000426:	3730      	adds	r7, #48	; 0x30
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000094 	.word	0x20000094

08000430 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000434:	4b14      	ldr	r3, [pc, #80]	; (8000488 <MX_USART2_UART_Init+0x58>)
 8000436:	4a15      	ldr	r2, [pc, #84]	; (800048c <MX_USART2_UART_Init+0x5c>)
 8000438:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800043a:	4b13      	ldr	r3, [pc, #76]	; (8000488 <MX_USART2_UART_Init+0x58>)
 800043c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000440:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000442:	4b11      	ldr	r3, [pc, #68]	; (8000488 <MX_USART2_UART_Init+0x58>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000448:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <MX_USART2_UART_Init+0x58>)
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800044e:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <MX_USART2_UART_Init+0x58>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000454:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <MX_USART2_UART_Init+0x58>)
 8000456:	220c      	movs	r2, #12
 8000458:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045a:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <MX_USART2_UART_Init+0x58>)
 800045c:	2200      	movs	r2, #0
 800045e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000460:	4b09      	ldr	r3, [pc, #36]	; (8000488 <MX_USART2_UART_Init+0x58>)
 8000462:	2200      	movs	r2, #0
 8000464:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000466:	4b08      	ldr	r3, [pc, #32]	; (8000488 <MX_USART2_UART_Init+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <MX_USART2_UART_Init+0x58>)
 800046e:	2200      	movs	r2, #0
 8000470:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000472:	4805      	ldr	r0, [pc, #20]	; (8000488 <MX_USART2_UART_Init+0x58>)
 8000474:	f005 f8d4 	bl	8005620 <HAL_UART_Init>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800047e:	f000 f8d5 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	200000e0 	.word	0x200000e0
 800048c:	40004400 	.word	0x40004400

08000490 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000496:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <MX_DMA_Init+0x48>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a0f      	ldr	r2, [pc, #60]	; (80004d8 <MX_DMA_Init+0x48>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6153      	str	r3, [r2, #20]
 80004a2:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <MX_DMA_Init+0x48>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2105      	movs	r1, #5
 80004b2:	2010      	movs	r0, #16
 80004b4:	f002 faf8 	bl	8002aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004b8:	2010      	movs	r0, #16
 80004ba:	f002 fb11 	bl	8002ae0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	2105      	movs	r1, #5
 80004c2:	2011      	movs	r0, #17
 80004c4:	f002 faf0 	bl	8002aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80004c8:	2011      	movs	r0, #17
 80004ca:	f002 fb09 	bl	8002ae0 <HAL_NVIC_EnableIRQ>

}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000

080004dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f2:	4b18      	ldr	r3, [pc, #96]	; (8000554 <MX_GPIO_Init+0x78>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a17      	ldr	r2, [pc, #92]	; (8000554 <MX_GPIO_Init+0x78>)
 80004f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004fc:	6153      	str	r3, [r2, #20]
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <MX_GPIO_Init+0x78>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <MX_GPIO_Init+0x78>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a11      	ldr	r2, [pc, #68]	; (8000554 <MX_GPIO_Init+0x78>)
 8000510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000514:	6153      	str	r3, [r2, #20]
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <MX_GPIO_Init+0x78>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2120      	movs	r1, #32
 8000526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052a:	f002 fe9b 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800052e:	2320      	movs	r3, #32
 8000530:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000532:	2301      	movs	r3, #1
 8000534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053e:	f107 030c 	add.w	r3, r7, #12
 8000542:	4619      	mov	r1, r3
 8000544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000548:	f002 fd02 	bl	8002f50 <HAL_GPIO_Init>

}
 800054c:	bf00      	nop
 800054e:	3720      	adds	r7, #32
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40021000 	.word	0x40021000

08000558 <rosserial_entry>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_rosserial_entry */
void rosserial_entry(void *argument)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  setup();
 8000560:	f001 f976 	bl	8001850 <setup>
  /* Infinite loop */
  for(;;)
  {
	loop();
 8000564:	f001 f98a 	bl	800187c <loop>
	osDelay(5);
 8000568:	2005      	movs	r0, #5
 800056a:	f006 fbdb 	bl	8006d24 <osDelay>
	spin();
 800056e:	f001 f997 	bl	80018a0 <spin>
    direction = get_direction();
 8000572:	f001 f9af 	bl	80018d4 <get_direction>
 8000576:	4603      	mov	r3, r0
 8000578:	461a      	mov	r2, r3
 800057a:	4b04      	ldr	r3, [pc, #16]	; (800058c <rosserial_entry+0x34>)
 800057c:	701a      	strb	r2, [r3, #0]
    pwm_signal = get_signal();
 800057e:	f001 f9b1 	bl	80018e4 <get_signal>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	4b02      	ldr	r3, [pc, #8]	; (8000590 <rosserial_entry+0x38>)
 8000588:	801a      	strh	r2, [r3, #0]
	loop();
 800058a:	e7eb      	b.n	8000564 <rosserial_entry+0xc>
 800058c:	200001f8 	.word	0x200001f8
 8000590:	200001fa 	.word	0x200001fa

08000594 <HAL_TIM_IC_CaptureCallback>:
* @retval None
*/

uint32_t counter = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  counter = __HAL_TIM_GET_COUNTER(htim);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a2:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0x20>)
 80005a4:	6013      	str	r3, [r2, #0]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	200001fc 	.word	0x200001fc

080005b8 <encoder_entry>:
/* USER CODE END Header_encoder_entry */
void encoder_entry(void *argument)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder_entry */
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80005c0:	213c      	movs	r1, #60	; 0x3c
 80005c2:	4808      	ldr	r0, [pc, #32]	; (80005e4 <encoder_entry+0x2c>)
 80005c4:	f004 fcd2 	bl	8004f6c <HAL_TIM_Encoder_Start_IT>
  /* Infinite loop */
  for(;;)
  {
	update_position(counter);
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <encoder_entry+0x30>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	ee07 3a90 	vmov	s15, r3
 80005d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005d4:	eeb0 0a67 	vmov.f32	s0, s15
 80005d8:	f001 f96c 	bl	80018b4 <update_position>
    osDelay(1);
 80005dc:	2001      	movs	r0, #1
 80005de:	f006 fba1 	bl	8006d24 <osDelay>
	update_position(counter);
 80005e2:	e7f1      	b.n	80005c8 <encoder_entry+0x10>
 80005e4:	20000094 	.word	0x20000094
 80005e8:	200001fc 	.word	0x200001fc

080005ec <bldc_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_bldc_entry */
void bldc_entry(void *argument)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN bldc_entry */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005f4:	2120      	movs	r1, #32
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fa:	f002 fe4b 	bl	8003294 <HAL_GPIO_TogglePin>
    osDelay(1000);
 80005fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000602:	f006 fb8f 	bl	8006d24 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000606:	e7f5      	b.n	80005f4 <bldc_entry+0x8>

08000608 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d101      	bne.n	800061e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800061a:	f002 f96d 	bl	80028f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40001000 	.word	0x40001000

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	e7fe      	b.n	8000634 <Error_Handler+0x8>

08000636 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000636:	b480      	push	{r7}
 8000638:	b083      	sub	sp, #12
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4618      	mov	r0, r3
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <_ZN3ros3MsgC1Ev+0x1c>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	08009c5c 	.word	0x08009c5c

08000678 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
      data()
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ffe8 	bl	8000658 <_ZN3ros3MsgC1Ev>
 8000688:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	3304      	adds	r3, #4
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ffcf 	bl	8000636 <_ZN3ros4TimeC1Ev>
    {
    }
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	08009c44 	.word	0x08009c44

080006a8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6859      	ldr	r1, [r3, #4]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	683a      	ldr	r2, [r7, #0]
 80006be:	4413      	add	r3, r2
 80006c0:	b2ca      	uxtb	r2, r1
 80006c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	0a19      	lsrs	r1, r3, #8
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	3301      	adds	r3, #1
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	4413      	add	r3, r2
 80006d2:	b2ca      	uxtb	r2, r1
 80006d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	0c19      	lsrs	r1, r3, #16
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	3302      	adds	r3, #2
 80006e0:	683a      	ldr	r2, [r7, #0]
 80006e2:	4413      	add	r3, r2
 80006e4:	b2ca      	uxtb	r2, r1
 80006e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	0e19      	lsrs	r1, r3, #24
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	3303      	adds	r3, #3
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	4413      	add	r3, r2
 80006f6:	b2ca      	uxtb	r2, r1
 80006f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3304      	adds	r3, #4
 80006fe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6899      	ldr	r1, [r3, #8]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	683a      	ldr	r2, [r7, #0]
 8000708:	4413      	add	r3, r2
 800070a:	b2ca      	uxtb	r2, r1
 800070c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	0a19      	lsrs	r1, r3, #8
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3301      	adds	r3, #1
 8000718:	683a      	ldr	r2, [r7, #0]
 800071a:	4413      	add	r3, r2
 800071c:	b2ca      	uxtb	r2, r1
 800071e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	0c19      	lsrs	r1, r3, #16
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	3302      	adds	r3, #2
 800072a:	683a      	ldr	r2, [r7, #0]
 800072c:	4413      	add	r3, r2
 800072e:	b2ca      	uxtb	r2, r1
 8000730:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	0e19      	lsrs	r1, r3, #24
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3303      	adds	r3, #3
 800073c:	683a      	ldr	r2, [r7, #0]
 800073e:	4413      	add	r3, r2
 8000740:	b2ca      	uxtb	r2, r1
 8000742:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3304      	adds	r3, #4
 8000748:	60fb      	str	r3, [r7, #12]
      return offset;
 800074a:	68fb      	ldr	r3, [r7, #12]
    }
 800074c:	4618      	mov	r0, r3
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	461a      	mov	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3301      	adds	r3, #1
 800077c:	6839      	ldr	r1, [r7, #0]
 800077e:	440b      	add	r3, r1
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	021b      	lsls	r3, r3, #8
 8000784:	431a      	orrs	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	685a      	ldr	r2, [r3, #4]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3302      	adds	r3, #2
 8000792:	6839      	ldr	r1, [r7, #0]
 8000794:	440b      	add	r3, r1
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	041b      	lsls	r3, r3, #16
 800079a:	431a      	orrs	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3303      	adds	r3, #3
 80007a8:	6839      	ldr	r1, [r7, #0]
 80007aa:	440b      	add	r3, r1
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	061b      	lsls	r3, r3, #24
 80007b0:	431a      	orrs	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	3304      	adds	r3, #4
 80007ba:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	689a      	ldr	r2, [r3, #8]
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	3301      	adds	r3, #1
 80007d2:	6839      	ldr	r1, [r7, #0]
 80007d4:	440b      	add	r3, r1
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	021b      	lsls	r3, r3, #8
 80007da:	431a      	orrs	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	689a      	ldr	r2, [r3, #8]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	3302      	adds	r3, #2
 80007e8:	6839      	ldr	r1, [r7, #0]
 80007ea:	440b      	add	r3, r1
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	041b      	lsls	r3, r3, #16
 80007f0:	431a      	orrs	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	689a      	ldr	r2, [r3, #8]
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3303      	adds	r3, #3
 80007fe:	6839      	ldr	r1, [r7, #0]
 8000800:	440b      	add	r3, r1
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	061b      	lsls	r3, r3, #24
 8000806:	431a      	orrs	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	3304      	adds	r3, #4
 8000810:	60fb      	str	r3, [r7, #12]
     return offset;
 8000812:	68fb      	ldr	r3, [r7, #12]
    }
 8000814:	4618      	mov	r0, r3
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800082a:	4618      	mov	r0, r3
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	08009988 	.word	0x08009988

0800083c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000846:	4618      	mov	r0, r3
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	08009998 	.word	0x08009998

08000858 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fef8 	bl	8000658 <_ZN3ros3MsgC1Ev>
 8000868:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	809a      	strh	r2, [r3, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a09      	ldr	r2, [pc, #36]	; (800089c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a07      	ldr	r2, [pc, #28]	; (800089c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a06      	ldr	r2, [pc, #24]	; (800089c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000884:	611a      	str	r2, [r3, #16]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
    {
    }
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	08009c2c 	.word	0x08009c2c
 800089c:	080099bc 	.word	0x080099bc

080008a0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	8899      	ldrh	r1, [r3, #4]
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	b2ca      	uxtb	r2, r1
 80008ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	889b      	ldrh	r3, [r3, #4]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	b299      	uxth	r1, r3
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	3301      	adds	r3, #1
 80008c8:	683a      	ldr	r2, [r7, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	b2ca      	uxtb	r2, r1
 80008ce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	3302      	adds	r3, #2
 80008d4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fc80 	bl	80001e0 <strlen>
 80008e0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	69b9      	ldr	r1, [r7, #24]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 f806 	bl	80018fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	3304      	adds	r3, #4
 80008f4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	18d0      	adds	r0, r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4619      	mov	r1, r3
 8000904:	f008 fe88 	bl	8009618 <memcpy>
      offset += length_topic_name;
 8000908:	69fa      	ldr	r2, [r7, #28]
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	4413      	add	r3, r2
 800090e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fc63 	bl	80001e0 <strlen>
 800091a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	683a      	ldr	r2, [r7, #0]
 8000920:	4413      	add	r3, r2
 8000922:	6979      	ldr	r1, [r7, #20]
 8000924:	4618      	mov	r0, r3
 8000926:	f000 ffe9 	bl	80018fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3304      	adds	r3, #4
 800092e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	18d0      	adds	r0, r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	4619      	mov	r1, r3
 800093e:	f008 fe6b 	bl	8009618 <memcpy>
      offset += length_message_type;
 8000942:	69fa      	ldr	r2, [r7, #28]
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	4413      	add	r3, r2
 8000948:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	691b      	ldr	r3, [r3, #16]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fc46 	bl	80001e0 <strlen>
 8000954:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	4413      	add	r3, r2
 800095c:	6939      	ldr	r1, [r7, #16]
 800095e:	4618      	mov	r0, r3
 8000960:	f000 ffcc 	bl	80018fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	3304      	adds	r3, #4
 8000968:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	683a      	ldr	r2, [r7, #0]
 800096e:	18d0      	adds	r0, r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	691b      	ldr	r3, [r3, #16]
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4619      	mov	r1, r3
 8000978:	f008 fe4e 	bl	8009618 <memcpy>
      offset += length_md5sum;
 800097c:	69fa      	ldr	r2, [r7, #28]
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	4413      	add	r3, r2
 8000982:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800098a:	68f9      	ldr	r1, [r7, #12]
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	683a      	ldr	r2, [r7, #0]
 8000990:	4413      	add	r3, r2
 8000992:	b2ca      	uxtb	r2, r1
 8000994:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	0a19      	lsrs	r1, r3, #8
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3301      	adds	r3, #1
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	4413      	add	r3, r2
 80009a2:	b2ca      	uxtb	r2, r1
 80009a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	0c19      	lsrs	r1, r3, #16
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3302      	adds	r3, #2
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	4413      	add	r3, r2
 80009b2:	b2ca      	uxtb	r2, r1
 80009b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	0e19      	lsrs	r1, r3, #24
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3303      	adds	r3, #3
 80009be:	683a      	ldr	r2, [r7, #0]
 80009c0:	4413      	add	r3, r2
 80009c2:	b2ca      	uxtb	r2, r1
 80009c4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3304      	adds	r3, #4
 80009ca:	61fb      	str	r3, [r7, #28]
      return offset;
 80009cc:	69fb      	ldr	r3, [r7, #28]
    }
 80009ce:	4618      	mov	r0, r3
 80009d0:	3720      	adds	r7, #32
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b08a      	sub	sp, #40	; 0x28
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	683a      	ldr	r2, [r7, #0]
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	889b      	ldrh	r3, [r3, #4]
 80009f6:	b21a      	sxth	r2, r3
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	3301      	adds	r3, #1
 80009fc:	6839      	ldr	r1, [r7, #0]
 80009fe:	440b      	add	r3, r1
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	021b      	lsls	r3, r3, #8
 8000a04:	b21b      	sxth	r3, r3
 8000a06:	4313      	orrs	r3, r2
 8000a08:	b21b      	sxth	r3, r3
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	3302      	adds	r3, #2
 8000a14:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	441a      	add	r2, r3
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 ff88 	bl	8001938 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	3304      	adds	r3, #4
 8000a2c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
 8000a32:	69ba      	ldr	r2, [r7, #24]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	4413      	add	r3, r2
 8000a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d20c      	bcs.n	8000a58 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000a3e:	683a      	ldr	r2, [r7, #0]
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	441a      	add	r2, r3
 8000a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a46:	3b01      	subs	r3, #1
 8000a48:	6839      	ldr	r1, [r7, #0]
 8000a4a:	440b      	add	r3, r1
 8000a4c:	7812      	ldrb	r2, [r2, #0]
 8000a4e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	3301      	adds	r3, #1
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
 8000a56:	e7ec      	b.n	8000a32 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	683a      	ldr	r2, [r7, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	441a      	add	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	4413      	add	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	683a      	ldr	r2, [r7, #0]
 8000a80:	441a      	add	r2, r3
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 ff55 	bl	8001938 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	3304      	adds	r3, #4
 8000a92:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	623b      	str	r3, [r7, #32]
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	6a3a      	ldr	r2, [r7, #32]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d20c      	bcs.n	8000abe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	6a3b      	ldr	r3, [r7, #32]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	6a3b      	ldr	r3, [r7, #32]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	6839      	ldr	r1, [r7, #0]
 8000ab0:	440b      	add	r3, r1
 8000ab2:	7812      	ldrb	r2, [r2, #0]
 8000ab4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000ab6:	6a3b      	ldr	r3, [r7, #32]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	623b      	str	r3, [r7, #32]
 8000abc:	e7ec      	b.n	8000a98 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000abe:	69ba      	ldr	r2, [r7, #24]
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	683a      	ldr	r2, [r7, #0]
 8000ac8:	4413      	add	r3, r2
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	683a      	ldr	r2, [r7, #0]
 8000ad4:	441a      	add	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	4413      	add	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	441a      	add	r2, r3
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 ff22 	bl	8001938 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	3304      	adds	r3, #4
 8000af8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	61fb      	str	r3, [r7, #28]
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4413      	add	r3, r2
 8000b04:	69fa      	ldr	r2, [r7, #28]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d20c      	bcs.n	8000b24 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	441a      	add	r2, r3
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	6839      	ldr	r1, [r7, #0]
 8000b16:	440b      	add	r3, r1
 8000b18:	7812      	ldrb	r2, [r2, #0]
 8000b1a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	61fb      	str	r3, [r7, #28]
 8000b22:	e7ec      	b.n	8000afe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4413      	add	r3, r2
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	441a      	add	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4413      	add	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	6839      	ldr	r1, [r7, #0]
 8000b52:	440a      	add	r2, r1
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	6839      	ldr	r1, [r7, #0]
 8000b62:	440b      	add	r3, r1
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	021b      	lsls	r3, r3, #8
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000b6c:	68ba      	ldr	r2, [r7, #8]
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	3302      	adds	r3, #2
 8000b72:	6839      	ldr	r1, [r7, #0]
 8000b74:	440b      	add	r3, r1
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	041b      	lsls	r3, r3, #16
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	3303      	adds	r3, #3
 8000b84:	6839      	ldr	r1, [r7, #0]
 8000b86:	440b      	add	r3, r1
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	061b      	lsls	r3, r3, #24
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000b90:	68ba      	ldr	r2, [r7, #8]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	61bb      	str	r3, [r7, #24]
     return offset;
 8000b9c:	69bb      	ldr	r3, [r7, #24]
    }
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	080099c0 	.word	0x080099c0

08000bc4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	080099dc 	.word	0x080099dc

08000be0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fd34 	bl	8000658 <_ZN3ros3MsgC1Ev>
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	711a      	strb	r2, [r3, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000c00:	609a      	str	r2, [r3, #8]
    {
    }
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	08009c14 	.word	0x08009c14
 8000c10:	080099bc 	.word	0x080099bc

08000c14 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	683a      	ldr	r2, [r7, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	7912      	ldrb	r2, [r2, #4]
 8000c2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	3301      	adds	r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fad1 	bl	80001e0 <strlen>
 8000c3e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	4413      	add	r3, r2
 8000c46:	68b9      	ldr	r1, [r7, #8]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 fe57 	bl	80018fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	3304      	adds	r3, #4
 8000c52:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	18d0      	adds	r0, r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f008 fcd9 	bl	8009618 <memcpy>
      offset += length_msg;
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
      return offset;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
    }
 8000c70:	4618      	mov	r0, r3
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	683a      	ldr	r2, [r7, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	781a      	ldrb	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	3301      	adds	r3, #1
 8000c96:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	441a      	add	r2, r3
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 fe47 	bl	8001938 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	3304      	adds	r3, #4
 8000cae:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4413      	add	r3, r2
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d20c      	bcs.n	8000cda <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	441a      	add	r2, r3
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	6839      	ldr	r1, [r7, #0]
 8000ccc:	440b      	add	r3, r1
 8000cce:	7812      	ldrb	r2, [r2, #0]
 8000cd0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e7ec      	b.n	8000cb4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4413      	add	r3, r2
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	683a      	ldr	r2, [r7, #0]
 8000cf0:	441a      	add	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
     return offset;
 8000cfe:	693b      	ldr	r3, [r7, #16]
    }
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	08009a00 	.word	0x08009a00

08000d24 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	08009a14 	.word	0x08009a14

08000d40 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fc84 	bl	8000658 <_ZN3ros3MsgC1Ev>
 8000d50:	4a11      	ldr	r2, [pc, #68]	; (8000d98 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f04f 0200 	mov.w	r2, #0
 8000d74:	615a      	str	r2, [r3, #20]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	08009bfc 	.word	0x08009bfc

08000d9c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6859      	ldr	r1, [r3, #4]
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	0a19      	lsrs	r1, r3, #8
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	683a      	ldr	r2, [r7, #0]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b2ca      	uxtb	r2, r1
 8000dc8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	0c19      	lsrs	r1, r3, #16
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	b2ca      	uxtb	r2, r1
 8000dda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	0e19      	lsrs	r1, r3, #24
 8000de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de4:	3303      	adds	r3, #3
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	4413      	add	r3, r2
 8000dea:	b2ca      	uxtb	r2, r1
 8000dec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	3304      	adds	r3, #4
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000df4:	2300      	movs	r3, #0
 8000df6:	623b      	str	r3, [r7, #32]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	6a3a      	ldr	r2, [r7, #32]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d22b      	bcs.n	8000e5a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	6a3b      	ldr	r3, [r7, #32]
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000e10:	6939      	ldr	r1, [r7, #16]
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	b2ca      	uxtb	r2, r1
 8000e1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	0a19      	lsrs	r1, r3, #8
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	3301      	adds	r3, #1
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	b2ca      	uxtb	r2, r1
 8000e2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	0c19      	lsrs	r1, r3, #16
 8000e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e32:	3302      	adds	r3, #2
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	b2ca      	uxtb	r2, r1
 8000e3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	0e19      	lsrs	r1, r3, #24
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e42:	3303      	adds	r3, #3
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	b2ca      	uxtb	r2, r1
 8000e4a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	3304      	adds	r3, #4
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000e52:	6a3b      	ldr	r3, [r7, #32]
 8000e54:	3301      	adds	r3, #1
 8000e56:	623b      	str	r3, [r7, #32]
 8000e58:	e7ce      	b.n	8000df8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6919      	ldr	r1, [r3, #16]
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	b2ca      	uxtb	r2, r1
 8000e66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	0a19      	lsrs	r1, r3, #8
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	3301      	adds	r3, #1
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	4413      	add	r3, r2
 8000e76:	b2ca      	uxtb	r2, r1
 8000e78:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	0c19      	lsrs	r1, r3, #16
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	3302      	adds	r3, #2
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	b2ca      	uxtb	r2, r1
 8000e8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	0e19      	lsrs	r1, r3, #24
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	3303      	adds	r3, #3
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	4413      	add	r3, r2
 8000e9a:	b2ca      	uxtb	r2, r1
 8000e9c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	69fa      	ldr	r2, [r7, #28]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d22b      	bcs.n	8000f0a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	699a      	ldr	r2, [r3, #24]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000ec0:	68f9      	ldr	r1, [r7, #12]
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b2ca      	uxtb	r2, r1
 8000eca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	0a19      	lsrs	r1, r3, #8
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	b2ca      	uxtb	r2, r1
 8000eda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	0c19      	lsrs	r1, r3, #16
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	b2ca      	uxtb	r2, r1
 8000eea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	0e19      	lsrs	r1, r3, #24
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	3303      	adds	r3, #3
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b2ca      	uxtb	r2, r1
 8000efa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efe:	3304      	adds	r3, #4
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3301      	adds	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	e7ce      	b.n	8000ea8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69d9      	ldr	r1, [r3, #28]
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	b2ca      	uxtb	r2, r1
 8000f16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	0a19      	lsrs	r1, r3, #8
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	3301      	adds	r3, #1
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	4413      	add	r3, r2
 8000f26:	b2ca      	uxtb	r2, r1
 8000f28:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	0c19      	lsrs	r1, r3, #16
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	3302      	adds	r3, #2
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	b2ca      	uxtb	r2, r1
 8000f3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	0e19      	lsrs	r1, r3, #24
 8000f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f44:	3303      	adds	r3, #3
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	4413      	add	r3, r2
 8000f4a:	b2ca      	uxtb	r2, r1
 8000f4c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	3304      	adds	r3, #4
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000f54:	2300      	movs	r3, #0
 8000f56:	61bb      	str	r3, [r7, #24]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69db      	ldr	r3, [r3, #28]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d228      	bcs.n	8000fb4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff f936 	bl	80001e0 <strlen>
 8000f74:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	6979      	ldr	r1, [r7, #20]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fcbc 	bl	80018fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	3304      	adds	r3, #4
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	18d0      	adds	r0, r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f008 fb3a 	bl	8009618 <memcpy>
      offset += length_stringsi;
 8000fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	4413      	add	r3, r2
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	e7d1      	b.n	8000f58 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3728      	adds	r7, #40	; 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b08e      	sub	sp, #56	; 0x38
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd8:	3301      	adds	r3, #1
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	6a3a      	ldr	r2, [r7, #32]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fea:	3302      	adds	r3, #2
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	041b      	lsls	r3, r3, #16
 8000ff4:	6a3a      	ldr	r2, [r7, #32]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ffc:	3303      	adds	r3, #3
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	4413      	add	r3, r2
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	061b      	lsls	r3, r3, #24
 8001006:	6a3a      	ldr	r2, [r7, #32]
 8001008:	4313      	orrs	r3, r2
 800100a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800100c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100e:	3304      	adds	r3, #4
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	6a3a      	ldr	r2, [r7, #32]
 8001018:	429a      	cmp	r2, r3
 800101a:	d90a      	bls.n	8001032 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	6a3b      	ldr	r3, [r7, #32]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4619      	mov	r1, r3
 8001026:	4610      	mov	r0, r2
 8001028:	f008 fb0c 	bl	8009644 <realloc>
 800102c:	4602      	mov	r2, r0
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a3a      	ldr	r2, [r7, #32]
 8001036:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001038:	2300      	movs	r3, #0
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001042:	429a      	cmp	r2, r3
 8001044:	d236      	bcs.n	80010b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800104e:	6839      	ldr	r1, [r7, #0]
 8001050:	440a      	add	r2, r1
 8001052:	7812      	ldrb	r2, [r2, #0]
 8001054:	4313      	orrs	r3, r2
 8001056:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105c:	3301      	adds	r3, #1
 800105e:	6839      	ldr	r1, [r7, #0]
 8001060:	440b      	add	r3, r1
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	4313      	orrs	r3, r2
 8001068:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106e:	3302      	adds	r3, #2
 8001070:	6839      	ldr	r1, [r7, #0]
 8001072:	440b      	add	r3, r1
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	041b      	lsls	r3, r3, #16
 8001078:	4313      	orrs	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001080:	3303      	adds	r3, #3
 8001082:	6839      	ldr	r1, [r7, #0]
 8001084:	440b      	add	r3, r1
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	061b      	lsls	r3, r3, #24
 800108a:	4313      	orrs	r3, r2
 800108c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001096:	3304      	adds	r3, #4
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	3208      	adds	r2, #8
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80010ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ae:	3301      	adds	r3, #1
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30
 80010b2:	e7c3      	b.n	800103c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80010b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	4413      	add	r3, r2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80010be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c0:	3301      	adds	r3, #1
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	4413      	add	r3, r2
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80010d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d2:	3302      	adds	r3, #2
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	041b      	lsls	r3, r3, #16
 80010dc:	69fa      	ldr	r2, [r7, #28]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80010e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e4:	3303      	adds	r3, #3
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	4413      	add	r3, r2
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	061b      	lsls	r3, r3, #24
 80010ee:	69fa      	ldr	r2, [r7, #28]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80010f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f6:	3304      	adds	r3, #4
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	69fa      	ldr	r2, [r7, #28]
 8001100:	429a      	cmp	r2, r3
 8001102:	d90a      	bls.n	800111a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	699a      	ldr	r2, [r3, #24]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4619      	mov	r1, r3
 800110e:	4610      	mov	r0, r2
 8001110:	f008 fa98 	bl	8009644 <realloc>
 8001114:	4602      	mov	r2, r0
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001120:	2300      	movs	r3, #0
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800112a:	429a      	cmp	r2, r3
 800112c:	d236      	bcs.n	800119c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001136:	6839      	ldr	r1, [r7, #0]
 8001138:	440a      	add	r2, r1
 800113a:	7812      	ldrb	r2, [r2, #0]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001144:	3301      	adds	r3, #1
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	440b      	add	r3, r1
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001156:	3302      	adds	r3, #2
 8001158:	6839      	ldr	r1, [r7, #0]
 800115a:	440b      	add	r3, r1
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	041b      	lsls	r3, r3, #16
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001168:	3303      	adds	r3, #3
 800116a:	6839      	ldr	r1, [r7, #0]
 800116c:	440b      	add	r3, r1
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	061b      	lsls	r3, r3, #24
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800117c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800117e:	3304      	adds	r3, #4
 8001180:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	699a      	ldr	r2, [r3, #24]
 8001186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	3214      	adds	r2, #20
 8001190:	6812      	ldr	r2, [r2, #0]
 8001192:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001196:	3301      	adds	r3, #1
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800119a:	e7c3      	b.n	8001124 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800119c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	4413      	add	r3, r2
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80011a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a8:	3301      	adds	r3, #1
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80011b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ba:	3302      	adds	r3, #2
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	4413      	add	r3, r2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	041b      	lsls	r3, r3, #16
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80011ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011cc:	3303      	adds	r3, #3
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	4413      	add	r3, r2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	061b      	lsls	r3, r3, #24
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80011dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011de:	3304      	adds	r3, #4
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d90a      	bls.n	8001202 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4619      	mov	r1, r3
 80011f6:	4610      	mov	r0, r2
 80011f8:	f008 fa24 	bl	8009644 <realloc>
 80011fc:	4602      	mov	r2, r0
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001208:	2300      	movs	r3, #0
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001212:	429a      	cmp	r2, r3
 8001214:	d23f      	bcs.n	8001296 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	441a      	add	r2, r3
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f000 fb88 	bl	8001938 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800122a:	3304      	adds	r3, #4
 800122c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
 8001232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800123a:	429a      	cmp	r2, r3
 800123c:	d20c      	bcs.n	8001258 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	441a      	add	r2, r3
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	3b01      	subs	r3, #1
 8001248:	6839      	ldr	r1, [r7, #0]
 800124a:	440b      	add	r3, r1
 800124c:	7812      	ldrb	r2, [r2, #0]
 800124e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	3301      	adds	r3, #1
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
 8001256:	e7ec      	b.n	8001232 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4413      	add	r3, r2
 800125e:	3b01      	subs	r3, #1
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	4413      	add	r3, r2
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800126a:	3b01      	subs	r3, #1
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	441a      	add	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4413      	add	r3, r2
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	3220      	adds	r2, #32
 800128a:	6812      	ldr	r2, [r2, #0]
 800128c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800128e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001290:	3301      	adds	r3, #1
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
 8001294:	e7ba      	b.n	800120c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001298:	4618      	mov	r0, r3
 800129a:	3738      	adds	r7, #56	; 0x38
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	08009b68 	.word	0x08009b68

080012bc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	08009a38 	.word	0x08009a38

080012d8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	611a      	str	r2, [r3, #16]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4618      	mov	r0, r3
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68d8      	ldr	r0, [r3, #12]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6891      	ldr	r1, [r2, #8]
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	4798      	blx	r3
 8001324:	4603      	mov	r3, r0
  };
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
  }
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800135c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <_ZN13STM32HardwareC1Ev+0x34>)
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	200000e0 	.word	0x200000e0

080013a4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f804 	bl	80013ba <_ZN13STM32Hardware10reset_rbufEv>
    }
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3304      	adds	r3, #4
 80013ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ce:	4619      	mov	r1, r3
 80013d0:	f004 fa04 	bl	80057dc <HAL_UART_Receive_DMA>
    }
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <_ZN13STM32Hardware4readEv>:

    int read(){
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
      int c = -1;
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013e8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ffa8 	bl	8001346 <_ZN13STM32Hardware10getRdmaIndEv>
 80013f6:	4603      	mov	r3, r0
 80013f8:	429c      	cmp	r4, r3
 80013fa:	bf14      	ite	ne
 80013fc:	2301      	movne	r3, #1
 80013fe:	2300      	moveq	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d012      	beq.n	800142c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800140c:	1c59      	adds	r1, r3, #1
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	4413      	add	r3, r2
 8001418:	791b      	ldrb	r3, [r3, #4]
 800141a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001422:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800142c:	68fb      	ldr	r3, [r7, #12]
    }
 800142e:	4618      	mov	r0, r3
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bd90      	pop	{r4, r7, pc}
	...

08001438 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001446:	2b20      	cmp	r3, #32
 8001448:	d108      	bne.n	800145c <_ZN13STM32Hardware5flushEv+0x24>
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <_ZN13STM32Hardware5flushEv+0xb4>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	f083 0301 	eor.w	r3, r3, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <_ZN13STM32Hardware5flushEv+0x24>
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <_ZN13STM32Hardware5flushEv+0x26>
 800145c:	2300      	movs	r3, #0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d03f      	beq.n	80014e2 <_ZN13STM32Hardware5flushEv+0xaa>
        mutex = true;
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <_ZN13STM32Hardware5flushEv+0xb4>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001474:	429a      	cmp	r2, r3
 8001476:	d031      	beq.n	80014dc <_ZN13STM32Hardware5flushEv+0xa4>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001484:	429a      	cmp	r2, r3
 8001486:	d20a      	bcs.n	800149e <_ZN13STM32Hardware5flushEv+0x66>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800148e:	b29a      	uxth	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001496:	b29b      	uxth	r3, r3
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	b29b      	uxth	r3, r3
 800149c:	e006      	b.n	80014ac <_ZN13STM32Hardware5flushEv+0x74>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6818      	ldr	r0, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80014b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	89fa      	ldrh	r2, [r7, #14]
 80014c2:	4619      	mov	r1, r3
 80014c4:	f004 f8fa 	bl	80056bc <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80014ce:	89fb      	ldrh	r3, [r7, #14]
 80014d0:	4413      	add	r3, r2
 80014d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <_ZN13STM32Hardware5flushEv+0xb4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
      }
    }
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000200 	.word	0x20000200

080014f0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
      int n = length;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001506:	bfa8      	it	ge
 8001508:	f44f 7300 	movge.w	r3, #512	; 0x200
 800150c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001514:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	4293      	cmp	r3, r2
 800151c:	bf28      	it	cs
 800151e:	4613      	movcs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001528:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	4618      	mov	r0, r3
 8001536:	f008 f86f 	bl	8009618 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	4413      	add	r3, r2
 8001544:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	429a      	cmp	r2, r3
 8001554:	d00b      	beq.n	800156e <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f503 7002 	add.w	r0, r3, #520	; 0x208
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	18d1      	adds	r1, r2, r3
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	461a      	mov	r2, r3
 800156a:	f008 f855 	bl	8009618 <memcpy>
      }

      flush();
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff ff62 	bl	8001438 <_ZN13STM32Hardware5flushEv>
    }
 8001574:	bf00      	nop
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	f001 f9cc 	bl	8002920 <HAL_GetTick>
 8001588:	4603      	mov	r3, r0
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
      data(0)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff f85a 	bl	8000658 <_ZN3ros3MsgC1Ev>
 80015a4:	4a05      	ldr	r2, [pc, #20]	; (80015bc <_ZN8std_msgs7Float32C1Ev+0x28>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	605a      	str	r2, [r3, #4]
    {
    }
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	08009bb8 	.word	0x08009bb8

080015c0 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	b2ca      	uxtb	r2, r1
 80015de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	0a19      	lsrs	r1, r3, #8
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3301      	adds	r3, #1
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	b2ca      	uxtb	r2, r1
 80015ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	0c19      	lsrs	r1, r3, #16
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3302      	adds	r3, #2
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	b2ca      	uxtb	r2, r1
 80015fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	0e19      	lsrs	r1, r3, #24
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3303      	adds	r3, #3
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	4413      	add	r3, r2
 800160c:	b2ca      	uxtb	r2, r1
 800160e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	3304      	adds	r3, #4
 8001614:	60fb      	str	r3, [r7, #12]
      return offset;
 8001616:	68fb      	ldr	r3, [r7, #12]
    }
 8001618:	4618      	mov	r0, r3
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	6839      	ldr	r1, [r7, #0]
 800163c:	440a      	add	r2, r1
 800163e:	7812      	ldrb	r2, [r2, #0]
 8001640:	4313      	orrs	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001644:	68ba      	ldr	r2, [r7, #8]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3301      	adds	r3, #1
 800164a:	6839      	ldr	r1, [r7, #0]
 800164c:	440b      	add	r3, r1
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	4313      	orrs	r3, r2
 8001654:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3302      	adds	r3, #2
 800165c:	6839      	ldr	r1, [r7, #0]
 800165e:	440b      	add	r3, r1
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	041b      	lsls	r3, r3, #16
 8001664:	4313      	orrs	r3, r2
 8001666:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3303      	adds	r3, #3
 800166e:	6839      	ldr	r1, [r7, #0]
 8001670:	440b      	add	r3, r1
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	061b      	lsls	r3, r3, #24
 8001676:	4313      	orrs	r3, r2
 8001678:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	3304      	adds	r3, #4
 8001684:	60fb      	str	r3, [r7, #12]
     return offset;
 8001686:	68fb      	ldr	r3, [r7, #12]
    }
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <_ZN8std_msgs7Float327getTypeEv+0x18>)
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	08009a5c 	.word	0x08009a5c

080016b0 <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	08009a70 	.word	0x08009a70

080016cc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	08009be8 	.word	0x08009be8

080016ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ffe8 	bl	80016cc <_ZN3ros15NodeHandleBase_C1Ev>
 80016fc:	4a36      	ldr	r2, [pc, #216]	; (80017d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3304      	adds	r3, #4
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fe30 	bl	800136c <_ZN13STM32HardwareC1Ev>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f007 ff7b 	bl	8009634 <memset>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f007 ff72 	bl	8009634 <memset>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8001756:	2264      	movs	r2, #100	; 0x64
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f007 ff6a 	bl	8009634 <memset>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8001766:	2264      	movs	r2, #100	; 0x64
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f007 ff62 	bl	8009634 <memset>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff faba 	bl	8000d40 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	08009ba4 	.word	0x08009ba4

080017dc <_Z9signal_cbRKN8std_msgs7Float32E>:
float position = 0.0;

std_msgs::Float32 position_msg;
ros::Publisher position_pub("/position", &position_msg);

void signal_cb(const std_msgs::Float32& msg) {
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	req_signal = msg.data;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80017ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ee:	ee17 3a90 	vmov	r3, s15
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <_Z9signal_cbRKN8std_msgs7Float32E+0x28>)
 80017f6:	801a      	strh	r2, [r3, #0]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	20000b40 	.word	0x20000b40

08001808 <HAL_UART_TxCpltCallback>:

ros::Subscriber<std_msgs::Float32> sub("/signal", &signal_cb);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8001810:	4805      	ldr	r0, [pc, #20]	; (8001828 <HAL_UART_TxCpltCallback+0x20>)
 8001812:	f000 f8eb 	bl	80019ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001816:	4603      	mov	r3, r0
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fe0d 	bl	8001438 <_ZN13STM32Hardware5flushEv>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000204 	.word	0x20000204

0800182c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8001834:	4805      	ldr	r0, [pc, #20]	; (800184c <HAL_UART_RxCpltCallback+0x20>)
 8001836:	f000 f8d9 	bl	80019ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800183a:	4603      	mov	r3, r0
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fdbc 	bl	80013ba <_ZN13STM32Hardware10reset_rbufEv>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000204 	.word	0x20000204

08001850 <setup>:

void setup(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  nh.initNode();
 8001854:	4806      	ldr	r0, [pc, #24]	; (8001870 <setup+0x20>)
 8001856:	f000 f8d5 	bl	8001a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(position_pub);
 800185a:	4906      	ldr	r1, [pc, #24]	; (8001874 <setup+0x24>)
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <setup+0x20>)
 800185e:	f000 f8ee 	bl	8001a3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.subscribe(sub);
 8001862:	4905      	ldr	r1, [pc, #20]	; (8001878 <setup+0x28>)
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <setup+0x20>)
 8001866:	f000 f91a 	bl	8001a9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000204 	.word	0x20000204
 8001874:	20000b50 	.word	0x20000b50
 8001878:	20000b64 	.word	0x20000b64

0800187c <loop>:

void loop(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  position_msg.data = position;
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <loop+0x18>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <loop+0x1c>)
 8001886:	6053      	str	r3, [r2, #4]
  position_pub.publish(&position_msg);
 8001888:	4903      	ldr	r1, [pc, #12]	; (8001898 <loop+0x1c>)
 800188a:	4804      	ldr	r0, [pc, #16]	; (800189c <loop+0x20>)
 800188c:	f7ff fd3b 	bl	8001306 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000b44 	.word	0x20000b44
 8001898:	20000b48 	.word	0x20000b48
 800189c:	20000b50 	.word	0x20000b50

080018a0 <spin>:

void spin(void) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  nh.spinOnce();
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <spin+0x10>)
 80018a6:	f000 f925 	bl	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000204 	.word	0x20000204

080018b4 <update_position>:

void update_position(float pos) {
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	ed87 0a01 	vstr	s0, [r7, #4]
  position = pos;
 80018be:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <update_position+0x1c>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6013      	str	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	20000b44 	.word	0x20000b44

080018d4 <get_direction>:

uint8_t get_direction(void) {
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  if (req_signal >= 0) {
	  return 1;
 80018d8:	2301      	movs	r3, #1
  } else {
	  return -1;
  }
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <get_signal>:

uint16_t get_signal(void) {
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  if (req_signal >= 0) {
	  return req_signal;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <get_signal+0x14>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
  } else {
	  return -req_signal;
  }
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000b40 	.word	0x20000b40

080018fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2b03      	cmp	r3, #3
 800190e:	d80d      	bhi.n	800192c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	fa22 f103 	lsr.w	r1, r2, r3
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	b2ca      	uxtb	r2, r1
 8001922:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3301      	adds	r3, #1
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	e7ee      	b.n	800190a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d811      	bhi.n	8001976 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6839      	ldr	r1, [r7, #0]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	440a      	add	r2, r1
 800195c:	7812      	ldrb	r2, [r2, #0]
 800195e:	4611      	mov	r1, r2
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	00d2      	lsls	r2, r2, #3
 8001964:	fa01 f202 	lsl.w	r2, r1, r2
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3301      	adds	r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	e7ea      	b.n	800194c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	08009bd0 	.word	0x08009bd0

080019a4 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ffe5 	bl	8001984 <_ZN3ros11Subscriber_C1Ev>
 80019ba:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	330c      	adds	r3, #12
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fde5 	bl	8001594 <_ZN8std_msgs7Float32C1Ev>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	615a      	str	r2, [r3, #20]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	609a      	str	r2, [r3, #8]
  };
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	08009b8c 	.word	0x08009b8c

080019ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3304      	adds	r3, #4
  }
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3304      	adds	r3, #4
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fcc7 	bl	80013a4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001a3e:	b480      	push	{r7}
 8001a40:	b085      	sub	sp, #20
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b18      	cmp	r3, #24
 8001a50:	dc1e      	bgt.n	8001a90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d111      	bne.n	8001a88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	60da      	str	r2, [r3, #12]
        return true;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e004      	b.n	8001a92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	e7dd      	b.n	8001a4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8001a90:	2300      	movs	r3, #0
  }
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8001a9e:	b480      	push	{r7}
 8001aa0:	b085      	sub	sp, #20
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b18      	cmp	r3, #24
 8001ab0:	dc19      	bgt.n	8001ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10d      	bne.n	8001ade <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001aca:	6839      	ldr	r1, [r7, #0]
 8001acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
        return true;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e004      	b.n	8001ae8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	e7e2      	b.n	8001aac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 8001ae6:	2300      	movs	r3, #0
  }
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3304      	adds	r3, #4
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fd3b 	bl	800157c <_ZN13STM32Hardware4timeEv>
 8001b06:	6138      	str	r0, [r7, #16]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d903      	bls.n	8001b22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d009      	beq.n	8001b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d903      	bls.n	8001b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bool tx_stop_requested = false;
 8001b40:	2300      	movs	r3, #0
 8001b42:	75fb      	strb	r3, [r7, #23]
    bool saw_time_msg = false;
 8001b44:	2300      	movs	r3, #0
 8001b46:	75bb      	strb	r3, [r7, #22]
      if (spin_timeout_ > 0)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d014      	beq.n	8001b7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x88>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3304      	adds	r3, #4
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fd10 	bl	800157c <_ZN13STM32Hardware4timeEv>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad2      	subs	r2, r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	bf8c      	ite	hi
 8001b6c:	2301      	movhi	r3, #1
 8001b6e:	2300      	movls	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x88>
          return SPIN_TIMEOUT;
 8001b76:	f06f 0301 	mvn.w	r3, #1
 8001b7a:	e1a5      	b.n	8001ec8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
      int data = hardware_.read();
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3304      	adds	r3, #4
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fc2b 	bl	80013dc <_ZN13STM32Hardware4readEv>
 8001b86:	60f8      	str	r0, [r7, #12]
      if (data < 0)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f2c0 8178 	blt.w	8001e80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x38c>
      checksum_ += data;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	441a      	add	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ba6:	2b07      	cmp	r3, #7
 8001ba8:	d11e      	bne.n	8001be8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xf4>
        message_in[index_++] = data;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001bb0:	1c59      	adds	r1, r3, #1
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	b2d1      	uxtb	r1, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	460a      	mov	r2, r1
 8001bc2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001bcc:	1e5a      	subs	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1b4      	bne.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_MSG_CHECKSUM;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2208      	movs	r2, #8
 8001be2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001be6:	e7af      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_FIRST_FF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d128      	bne.n	8001c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x150>
        if (data == 0xff)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2bff      	cmp	r3, #255	; 0xff
 8001bf6:	d10d      	bne.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x120>
          mode_++;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	f103 0214 	add.w	r2, r3, #20
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001c12:	e799      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3304      	adds	r3, #4
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fcaf 	bl	800157c <_ZN13STM32Hardware4timeEv>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	bf8c      	ite	hi
 8001c2c:	2301      	movhi	r3, #1
 8001c2e:	2300      	movls	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d088      	beq.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          configured_ = false;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001c3e:	f06f 0301 	mvn.w	r3, #1
 8001c42:	e141      	b.n	8001ec8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d118      	bne.n	8001c80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18c>
        if (data == PROTOCOL_VER)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2bfe      	cmp	r3, #254	; 0xfe
 8001c52:	d107      	bne.n	8001c64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x170>
          mode_++;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c62:	e771      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_FIRST_FF;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f47f af68 	bne.w	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f929 	bl	8001ed0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001c7e:	e763      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d113      	bne.n	8001cb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1be>
        bytes_ = data;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001cb0:	e74a      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d110      	bne.n	8001cde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1ea>
        bytes_ += data << 8;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	021b      	lsls	r3, r3, #8
 8001cc6:	441a      	add	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001cdc:	e734      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d116      	bne.n	8001d16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x222>
        if ((checksum_ % 256) == 255)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001cee:	425a      	negs	r2, r3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	bf58      	it	pl
 8001cf6:	4253      	negpl	r3, r2
 8001cf8:	2bff      	cmp	r3, #255	; 0xff
 8001cfa:	d107      	bne.n	8001d0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x218>
          mode_++;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001d0a:	e71d      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001d14:	e718      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d1c:	2b05      	cmp	r3, #5
 8001d1e:	d10f      	bne.n	8001d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24c>
        topic_ = data;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001d3e:	e703      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d117      	bne.n	8001d7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x286>
        topic_ += data << 8;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	441a      	add	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2207      	movs	r2, #7
 8001d60:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f47f aeec 	bne.w	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_MSG_CHECKSUM;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2208      	movs	r2, #8
 8001d74:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001d78:	e6e6      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	f47f aee1 	bne.w	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        mode_ = MODE_FIRST_FF;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001d94:	425a      	negs	r2, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	bf58      	it	pl
 8001d9c:	4253      	negpl	r3, r2
 8001d9e:	2bff      	cmp	r3, #255	; 0xff
 8001da0:	f47f aed2 	bne.w	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d110      	bne.n	8001dd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2dc>
            requestSyncTime();
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f88e 	bl	8001ed0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f8a9 	bl	8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dce:	e07b      	b.n	8001ec8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
          else if (topic_ == TopicInfo::ID_TIME)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001dd6:	2b0a      	cmp	r3, #10
 8001dd8:	d109      	bne.n	8001dee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2fa>
            saw_time_msg = true;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	75bb      	strb	r3, [r7, #22]
            syncTime(message_in);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001de4:	4619      	mov	r1, r3
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f970 	bl	80020cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001dec:	e6ac      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001df4:	2b06      	cmp	r3, #6
 8001df6:	d10e      	bne.n	8001e16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x322>
            req_param_resp.deserialize(message_in);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001e04:	4619      	mov	r1, r3
 8001e06:	4610      	mov	r0, r2
 8001e08:	f7ff f8d9 	bl	8000fbe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001e14:	e698      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001e1c:	2b0b      	cmp	r3, #11
 8001e1e:	d106      	bne.n	8001e2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x33a>
            configured_ = false;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
            tx_stop_requested = true;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	75fb      	strb	r3, [r7, #23]
 8001e2c:	e68c      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
            if (subscribers[topic_ - 100])
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001e34:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f43f ae80 	beq.w	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
              subscribers[topic_ - 100]->callback(message_in);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001e4e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e58:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001e62:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4798      	blx	r3
    while (true)
 8001e7e:	e663      	b.n	8001b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        break;
 8001e80:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00f      	beq.n	8001eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b8>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d906      	bls.n	8001eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b8>
      requestSyncTime();
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f816 	bl	8001ed0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return saw_time_msg ? SPIN_TIME_RECV : (tx_stop_requested ? SPIN_TX_STOP_REQUESTED : SPIN_OK);
 8001eac:	7dbb      	ldrb	r3, [r7, #22]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3c4>
 8001eb2:	f06f 0303 	mvn.w	r3, #3
 8001eb6:	e006      	b.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d2>
 8001eb8:	7dfb      	ldrb	r3, [r7, #23]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d002      	beq.n	8001ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d0>
 8001ebe:	f06f 0302 	mvn.w	r3, #2
 8001ec2:	e000      	b.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d2>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	bf00      	nop
  }
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001ed8:	f107 030c 	add.w	r3, r7, #12
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fbcb 	bl	8000678 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f107 020c 	add.w	r2, r7, #12
 8001eec:	210a      	movs	r1, #10
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	4798      	blx	r3
    rt_time = hardware_.time();
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fb40 	bl	800157c <_ZN13STM32Hardware4timeEv>
 8001efc:	4602      	mov	r2, r0
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001f04:	bf00      	nop
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b08b      	sub	sp, #44	; 0x2c
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fc9d 	bl	8000858 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	2b18      	cmp	r3, #24
 8001f26:	dc63      	bgt.n	8001ff0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d056      	beq.n	8001fe8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	6859      	ldr	r1, [r3, #4]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	3308      	adds	r3, #8
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4608      	mov	r0, r1
 8001f88:	4798      	blx	r3
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	6859      	ldr	r1, [r3, #4]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	330c      	adds	r3, #12
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4608      	mov	r0, r1
 8001fb6:	4798      	blx	r3
 8001fb8:	4603      	mov	r3, r0
 8001fba:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001fbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fc0:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681c      	ldr	r4, [r3, #0]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff f9a9 	bl	800132e <_ZN3ros9Publisher15getEndpointTypeEv>
 8001fdc:	4601      	mov	r1, r0
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	3301      	adds	r3, #1
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
 8001fee:	e798      	b.n	8001f22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	2b18      	cmp	r3, #24
 8001ff8:	dc5f      	bgt.n	80020ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffe:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d053      	beq.n	80020b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	b29b      	uxth	r3, r3
 800201a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002020:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002030:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002034:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	3308      	adds	r3, #8
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4608      	mov	r0, r1
 800204c:	4798      	blx	r3
 800204e:	4603      	mov	r3, r0
 8002050:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002056:	f202 2222 	addw	r2, r2, #546	; 0x222
 800205a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002062:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	330c      	adds	r3, #12
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4608      	mov	r0, r1
 8002072:	4798      	blx	r3
 8002074:	4603      	mov	r3, r0
 8002076:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800207c:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681c      	ldr	r4, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002088:	f202 2222 	addw	r2, r2, #546	; 0x222
 800208c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002094:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	3304      	adds	r3, #4
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4608      	mov	r0, r1
 80020a4:	4798      	blx	r3
 80020a6:	4601      	mov	r1, r0
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	461a      	mov	r2, r3
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	3301      	adds	r3, #1
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
 80020b8:	e79c      	b.n	8001ff4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80020c2:	bf00      	nop
 80020c4:	372c      	adds	r7, #44	; 0x2c
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd90      	pop	{r4, r7, pc}
	...

080020cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80020d6:	f107 0308 	add.w	r3, r7, #8
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe facc 	bl	8000678 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3304      	adds	r3, #4
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fa49 	bl	800157c <_ZN13STM32Hardware4timeEv>
 80020ea:	4602      	mov	r2, r0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80020f6:	f107 0308 	add.w	r3, r7, #8
 80020fa:	6839      	ldr	r1, [r7, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fb2b 	bl	8000758 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	4915      	ldr	r1, [pc, #84]	; (800215c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002108:	fba1 1303 	umull	r1, r3, r1, r3
 800210c:	099b      	lsrs	r3, r3, #6
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002112:	6939      	ldr	r1, [r7, #16]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002118:	fba3 0302 	umull	r0, r3, r3, r2
 800211c:	099b      	lsrs	r3, r3, #6
 800211e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002122:	fb00 f303 	mul.w	r3, r0, r3
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800212a:	fb02 f303 	mul.w	r3, r2, r3
 800212e:	440b      	add	r3, r1
 8002130:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002132:	f107 0308 	add.w	r3, r7, #8
 8002136:	3304      	adds	r3, #4
 8002138:	4619      	mov	r1, r3
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f8a6 	bl	800228c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3304      	adds	r3, #4
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fa19 	bl	800157c <_ZN13STM32Hardware4timeEv>
 800214a:	4602      	mov	r2, r0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	10624dd3 	.word	0x10624dd3
 8002160:	000f4240 	.word	0x000f4240

08002164 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b63      	cmp	r3, #99	; 0x63
 8002174:	dd09      	ble.n	800218a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800217c:	f083 0301 	eor.w	r3, r3, #1
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8002186:	2300      	movs	r3, #0
 8002188:	e079      	b.n	800227e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8002196:	3207      	adds	r2, #7
 8002198:	4611      	mov	r1, r2
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
 800219e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	22ff      	movs	r2, #255	; 0xff
 80021a4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	22fe      	movs	r2, #254	; 0xfe
 80021ac:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80021d6:	4413      	add	r3, r2
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	121b      	asrs	r3, r3, #8
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002202:	2305      	movs	r3, #5
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	3306      	adds	r3, #6
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	429a      	cmp	r2, r3
 800220e:	dc0d      	bgt.n	800222c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	4413      	add	r3, r2
 8002216:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	4413      	add	r3, r2
 8002222:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	3301      	adds	r3, #1
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	e7ec      	b.n	8002206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	3307      	adds	r3, #7
 8002230:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	425a      	negs	r2, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	bf58      	it	pl
 800223c:	4253      	negpl	r3, r2
 800223e:	b2da      	uxtb	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	1c59      	adds	r1, r3, #1
 8002244:	6179      	str	r1, [r7, #20]
 8002246:	43d2      	mvns	r2, r2
 8002248:	b2d1      	uxtb	r1, r2
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4413      	add	r3, r2
 800224e:	460a      	mov	r2, r1
 8002250:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800225a:	dc0a      	bgt.n	8002272 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1d18      	adds	r0, r3, #4
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	4619      	mov	r1, r3
 800226a:	f7ff f941 	bl	80014f0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	e005      	b.n	800227e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002272:	4905      	ldr	r1, [pc, #20]	; (8002288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 f849 	bl	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800227a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 800227e:	4618      	mov	r0, r3
 8002280:	3720      	adds	r7, #32
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	08009a94 	.word	0x08009a94

0800228c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3304      	adds	r3, #4
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff f96e 	bl	800157c <_ZN13STM32Hardware4timeEv>
 80022a0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4915      	ldr	r1, [pc, #84]	; (8002300 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80022aa:	fba1 1303 	umull	r1, r3, r1, r3
 80022ae:	099b      	lsrs	r3, r3, #6
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	1e5a      	subs	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6859      	ldr	r1, [r3, #4]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80022c2:	fba3 0302 	umull	r0, r3, r3, r2
 80022c6:	099b      	lsrs	r3, r3, #6
 80022c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022cc:	fb00 f303 	mul.w	r3, r0, r3
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	4a0c      	ldr	r2, [pc, #48]	; (8002304 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80022d4:	fb02 f303 	mul.w	r3, r2, r3
 80022d8:	1aca      	subs	r2, r1, r3
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80022dc:	4413      	add	r3, r2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80022f0:	4619      	mov	r1, r3
 80022f2:	4610      	mov	r0, r2
 80022f4:	f7fd ff7c 	bl	80001f0 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80022f8:	bf00      	nop
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	10624dd3 	.word	0x10624dd3
 8002304:	000f4240 	.word	0x000f4240
 8002308:	3b9aca00 	.word	0x3b9aca00

0800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	2103      	movs	r1, #3
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f804 	bl	8002328 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	460b      	mov	r3, r1
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fc50 	bl	8000be0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002340:	7afb      	ldrb	r3, [r7, #11]
 8002342:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f107 0214 	add.w	r2, r7, #20
 8002352:	2107      	movs	r1, #7
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	4798      	blx	r3
  }
 8002358:	bf00      	nop
 800235a:	3720      	adds	r7, #32
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <_Z41__static_initialization_and_destruction_0ii>:
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d116      	bne.n	800239e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002376:	4293      	cmp	r3, r2
 8002378:	d111      	bne.n	800239e <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 800237a:	480b      	ldr	r0, [pc, #44]	; (80023a8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800237c:	f7ff f9b6 	bl	80016ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Float32 position_msg;
 8002380:	480a      	ldr	r0, [pc, #40]	; (80023ac <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002382:	f7ff f907 	bl	8001594 <_ZN8std_msgs7Float32C1Ev>
ros::Publisher position_pub("/position", &position_msg);
 8002386:	2300      	movs	r3, #0
 8002388:	4a08      	ldr	r2, [pc, #32]	; (80023ac <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800238a:	4909      	ldr	r1, [pc, #36]	; (80023b0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800238c:	4809      	ldr	r0, [pc, #36]	; (80023b4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800238e:	f7fe ffa3 	bl	80012d8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Float32> sub("/signal", &signal_cb);
 8002392:	2301      	movs	r3, #1
 8002394:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002396:	4909      	ldr	r1, [pc, #36]	; (80023bc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002398:	4809      	ldr	r0, [pc, #36]	; (80023c0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800239a:	f7ff fb03 	bl	80019a4 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000204 	.word	0x20000204
 80023ac:	20000b48 	.word	0x20000b48
 80023b0:	08009ad0 	.word	0x08009ad0
 80023b4:	20000b50 	.word	0x20000b50
 80023b8:	080017dd 	.word	0x080017dd
 80023bc:	08009adc 	.word	0x08009adc
 80023c0:	20000b64 	.word	0x20000b64

080023c4 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	330c      	adds	r3, #12
 80023d2:	6839      	ldr	r1, [r7, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff f925 	bl	8001624 <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	320c      	adds	r2, #12
 80023e2:	4610      	mov	r0, r2
 80023e4:	4798      	blx	r3
  }
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
  }
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	330c      	adds	r3, #12
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff f93e 	bl	8001694 <_ZN8std_msgs7Float327getTypeEv>
 8002418:	4603      	mov	r3, r0
  }
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	330c      	adds	r3, #12
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff f93e 	bl	80016b0 <_ZN8std_msgs7Float326getMD5Ev>
 8002434:	4603      	mov	r3, r0
  }
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
    return configured_;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <_GLOBAL__sub_I_nh>:
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
 800245c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002460:	2001      	movs	r0, #1
 8002462:	f7ff ff7d 	bl	8002360 <_Z41__static_initialization_and_destruction_0ii>
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <HAL_MspInit+0x4c>)
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	4a10      	ldr	r2, [pc, #64]	; (80024b4 <HAL_MspInit+0x4c>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	6193      	str	r3, [r2, #24]
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <HAL_MspInit+0x4c>)
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	607b      	str	r3, [r7, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_MspInit+0x4c>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <HAL_MspInit+0x4c>)
 800248c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002490:	61d3      	str	r3, [r2, #28]
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <HAL_MspInit+0x4c>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	210f      	movs	r1, #15
 80024a2:	f06f 0001 	mvn.w	r0, #1
 80024a6:	f000 faff 	bl	8002aa8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000

080024b8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	; 0x28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d8:	d128      	bne.n	800252c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024da:	4b16      	ldr	r3, [pc, #88]	; (8002534 <HAL_TIM_Encoder_MspInit+0x7c>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	4a15      	ldr	r2, [pc, #84]	; (8002534 <HAL_TIM_Encoder_MspInit+0x7c>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	61d3      	str	r3, [r2, #28]
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_TIM_Encoder_MspInit+0x7c>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_TIM_Encoder_MspInit+0x7c>)
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	4a0f      	ldr	r2, [pc, #60]	; (8002534 <HAL_TIM_Encoder_MspInit+0x7c>)
 80024f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fc:	6153      	str	r3, [r2, #20]
 80024fe:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800250a:	2303      	movs	r3, #3
 800250c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002516:	2300      	movs	r3, #0
 8002518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800251a:	2301      	movs	r3, #1
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	4619      	mov	r1, r3
 8002524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002528:	f000 fd12 	bl	8002f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800252c:	bf00      	nop
 800252e:	3728      	adds	r7, #40	; 0x28
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021000 	.word	0x40021000

08002538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	; 0x28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a42      	ldr	r2, [pc, #264]	; (8002660 <HAL_UART_MspInit+0x128>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d17e      	bne.n	8002658 <HAL_UART_MspInit+0x120>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800255a:	4b42      	ldr	r3, [pc, #264]	; (8002664 <HAL_UART_MspInit+0x12c>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	4a41      	ldr	r2, [pc, #260]	; (8002664 <HAL_UART_MspInit+0x12c>)
 8002560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002564:	61d3      	str	r3, [r2, #28]
 8002566:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <HAL_UART_MspInit+0x12c>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002572:	4b3c      	ldr	r3, [pc, #240]	; (8002664 <HAL_UART_MspInit+0x12c>)
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	4a3b      	ldr	r2, [pc, #236]	; (8002664 <HAL_UART_MspInit+0x12c>)
 8002578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257c:	6153      	str	r3, [r2, #20]
 800257e:	4b39      	ldr	r3, [pc, #228]	; (8002664 <HAL_UART_MspInit+0x12c>)
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800258a:	230c      	movs	r3, #12
 800258c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800259a:	2307      	movs	r3, #7
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	4619      	mov	r1, r3
 80025a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a8:	f000 fcd2 	bl	8002f50 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80025ac:	4b2e      	ldr	r3, [pc, #184]	; (8002668 <HAL_UART_MspInit+0x130>)
 80025ae:	4a2f      	ldr	r2, [pc, #188]	; (800266c <HAL_UART_MspInit+0x134>)
 80025b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025b2:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <HAL_UART_MspInit+0x130>)
 80025b4:	2210      	movs	r2, #16
 80025b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b8:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_UART_MspInit+0x130>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025be:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <HAL_UART_MspInit+0x130>)
 80025c0:	2280      	movs	r2, #128	; 0x80
 80025c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025c4:	4b28      	ldr	r3, [pc, #160]	; (8002668 <HAL_UART_MspInit+0x130>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ca:	4b27      	ldr	r3, [pc, #156]	; (8002668 <HAL_UART_MspInit+0x130>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80025d0:	4b25      	ldr	r3, [pc, #148]	; (8002668 <HAL_UART_MspInit+0x130>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80025d6:	4b24      	ldr	r3, [pc, #144]	; (8002668 <HAL_UART_MspInit+0x130>)
 80025d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80025de:	4822      	ldr	r0, [pc, #136]	; (8002668 <HAL_UART_MspInit+0x130>)
 80025e0:	f000 fa8c 	bl	8002afc <HAL_DMA_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80025ea:	f7fe f81f 	bl	800062c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a1d      	ldr	r2, [pc, #116]	; (8002668 <HAL_UART_MspInit+0x130>)
 80025f2:	66da      	str	r2, [r3, #108]	; 0x6c
 80025f4:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <HAL_UART_MspInit+0x130>)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80025fa:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <HAL_UART_MspInit+0x138>)
 80025fc:	4a1d      	ldr	r2, [pc, #116]	; (8002674 <HAL_UART_MspInit+0x13c>)
 80025fe:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002600:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <HAL_UART_MspInit+0x138>)
 8002602:	2200      	movs	r2, #0
 8002604:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002606:	4b1a      	ldr	r3, [pc, #104]	; (8002670 <HAL_UART_MspInit+0x138>)
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800260c:	4b18      	ldr	r3, [pc, #96]	; (8002670 <HAL_UART_MspInit+0x138>)
 800260e:	2280      	movs	r2, #128	; 0x80
 8002610:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002612:	4b17      	ldr	r3, [pc, #92]	; (8002670 <HAL_UART_MspInit+0x138>)
 8002614:	2200      	movs	r2, #0
 8002616:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002618:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_UART_MspInit+0x138>)
 800261a:	2200      	movs	r2, #0
 800261c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800261e:	4b14      	ldr	r3, [pc, #80]	; (8002670 <HAL_UART_MspInit+0x138>)
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_UART_MspInit+0x138>)
 8002626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800262a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800262c:	4810      	ldr	r0, [pc, #64]	; (8002670 <HAL_UART_MspInit+0x138>)
 800262e:	f000 fa65 	bl	8002afc <HAL_DMA_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8002638:	f7fd fff8 	bl	800062c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <HAL_UART_MspInit+0x138>)
 8002640:	671a      	str	r2, [r3, #112]	; 0x70
 8002642:	4a0b      	ldr	r2, [pc, #44]	; (8002670 <HAL_UART_MspInit+0x138>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002648:	2200      	movs	r2, #0
 800264a:	2105      	movs	r1, #5
 800264c:	2026      	movs	r0, #38	; 0x26
 800264e:	f000 fa2b 	bl	8002aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002652:	2026      	movs	r0, #38	; 0x26
 8002654:	f000 fa44 	bl	8002ae0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002658:	bf00      	nop
 800265a:	3728      	adds	r7, #40	; 0x28
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40004400 	.word	0x40004400
 8002664:	40021000 	.word	0x40021000
 8002668:	20000164 	.word	0x20000164
 800266c:	40020080 	.word	0x40020080
 8002670:	200001a8 	.word	0x200001a8
 8002674:	4002006c 	.word	0x4002006c

08002678 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08c      	sub	sp, #48	; 0x30
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002688:	2200      	movs	r2, #0
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	2036      	movs	r0, #54	; 0x36
 800268e:	f000 fa0b 	bl	8002aa8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002692:	2036      	movs	r0, #54	; 0x36
 8002694:	f000 fa24 	bl	8002ae0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002698:	4b1f      	ldr	r3, [pc, #124]	; (8002718 <HAL_InitTick+0xa0>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <HAL_InitTick+0xa0>)
 800269e:	f043 0310 	orr.w	r3, r3, #16
 80026a2:	61d3      	str	r3, [r2, #28]
 80026a4:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <HAL_InitTick+0xa0>)
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026b0:	f107 0210 	add.w	r2, r7, #16
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f002 f88e 	bl	80047dc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80026c0:	f002 f848 	bl	8004754 <HAL_RCC_GetPCLK1Freq>
 80026c4:	4603      	mov	r3, r0
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026cc:	4a13      	ldr	r2, [pc, #76]	; (800271c <HAL_InitTick+0xa4>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	0c9b      	lsrs	r3, r3, #18
 80026d4:	3b01      	subs	r3, #1
 80026d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <HAL_InitTick+0xa8>)
 80026da:	4a12      	ldr	r2, [pc, #72]	; (8002724 <HAL_InitTick+0xac>)
 80026dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_InitTick+0xa8>)
 80026e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026e4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80026e6:	4a0e      	ldr	r2, [pc, #56]	; (8002720 <HAL_InitTick+0xa8>)
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <HAL_InitTick+0xa8>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_InitTick+0xa8>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80026f8:	4809      	ldr	r0, [pc, #36]	; (8002720 <HAL_InitTick+0xa8>)
 80026fa:	f002 fabf 	bl	8004c7c <HAL_TIM_Base_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d104      	bne.n	800270e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002704:	4806      	ldr	r0, [pc, #24]	; (8002720 <HAL_InitTick+0xa8>)
 8002706:	f002 fb1b 	bl	8004d40 <HAL_TIM_Base_Start_IT>
 800270a:	4603      	mov	r3, r0
 800270c:	e000      	b.n	8002710 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
}
 8002710:	4618      	mov	r0, r3
 8002712:	3730      	adds	r7, #48	; 0x30
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	431bde83 	.word	0x431bde83
 8002720:	20000b80 	.word	0x20000b80
 8002724:	40001000 	.word	0x40001000

08002728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800272c:	e7fe      	b.n	800272c <NMI_Handler+0x4>

0800272e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800272e:	b480      	push	{r7}
 8002730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002732:	e7fe      	b.n	8002732 <HardFault_Handler+0x4>

08002734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002738:	e7fe      	b.n	8002738 <MemManage_Handler+0x4>

0800273a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800273e:	e7fe      	b.n	800273e <BusFault_Handler+0x4>

08002740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002744:	e7fe      	b.n	8002744 <UsageFault_Handler+0x4>

08002746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002758:	4802      	ldr	r0, [pc, #8]	; (8002764 <DMA1_Channel6_IRQHandler+0x10>)
 800275a:	f000 faec 	bl	8002d36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200001a8 	.word	0x200001a8

08002768 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800276c:	4802      	ldr	r0, [pc, #8]	; (8002778 <DMA1_Channel7_IRQHandler+0x10>)
 800276e:	f000 fae2 	bl	8002d36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000164 	.word	0x20000164

0800277c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002780:	4802      	ldr	r0, [pc, #8]	; (800278c <USART2_IRQHandler+0x10>)
 8002782:	f003 f879 	bl	8005878 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200000e0 	.word	0x200000e0

08002790 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002794:	4802      	ldr	r0, [pc, #8]	; (80027a0 <TIM6_DAC_IRQHandler+0x10>)
 8002796:	f002 fc97 	bl	80050c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000b80 	.word	0x20000b80

080027a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
	return 1;
 80027a8:	2301      	movs	r3, #1
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <_kill>:

int _kill(int pid, int sig)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027be:	f006 ff01 	bl	80095c4 <__errno>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2216      	movs	r2, #22
 80027c6:	601a      	str	r2, [r3, #0]
	return -1;
 80027c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <_exit>:

void _exit (int status)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff ffe7 	bl	80027b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027e6:	e7fe      	b.n	80027e6 <_exit+0x12>

080027e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027f0:	4a14      	ldr	r2, [pc, #80]	; (8002844 <_sbrk+0x5c>)
 80027f2:	4b15      	ldr	r3, [pc, #84]	; (8002848 <_sbrk+0x60>)
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027fc:	4b13      	ldr	r3, [pc, #76]	; (800284c <_sbrk+0x64>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d102      	bne.n	800280a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <_sbrk+0x64>)
 8002806:	4a12      	ldr	r2, [pc, #72]	; (8002850 <_sbrk+0x68>)
 8002808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <_sbrk+0x64>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	429a      	cmp	r2, r3
 8002816:	d207      	bcs.n	8002828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002818:	f006 fed4 	bl	80095c4 <__errno>
 800281c:	4603      	mov	r3, r0
 800281e:	220c      	movs	r2, #12
 8002820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002826:	e009      	b.n	800283c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <_sbrk+0x64>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800282e:	4b07      	ldr	r3, [pc, #28]	; (800284c <_sbrk+0x64>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	4a05      	ldr	r2, [pc, #20]	; (800284c <_sbrk+0x64>)
 8002838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800283a:	68fb      	ldr	r3, [r7, #12]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20010000 	.word	0x20010000
 8002848:	00000400 	.word	0x00000400
 800284c:	20000bcc 	.word	0x20000bcc
 8002850:	20002530 	.word	0x20002530

08002854 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <SystemInit+0x20>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285e:	4a05      	ldr	r2, [pc, #20]	; (8002874 <SystemInit+0x20>)
 8002860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800287c:	480d      	ldr	r0, [pc, #52]	; (80028b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800287e:	490e      	ldr	r1, [pc, #56]	; (80028b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002880:	4a0e      	ldr	r2, [pc, #56]	; (80028bc <LoopForever+0xe>)
  movs r3, #0
 8002882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002884:	e002      	b.n	800288c <LoopCopyDataInit>

08002886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800288a:	3304      	adds	r3, #4

0800288c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800288c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800288e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002890:	d3f9      	bcc.n	8002886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002892:	4a0b      	ldr	r2, [pc, #44]	; (80028c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002894:	4c0b      	ldr	r4, [pc, #44]	; (80028c4 <LoopForever+0x16>)
  movs r3, #0
 8002896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002898:	e001      	b.n	800289e <LoopFillZerobss>

0800289a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800289a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800289c:	3204      	adds	r2, #4

0800289e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800289e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a0:	d3fb      	bcc.n	800289a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028a2:	f7ff ffd7 	bl	8002854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028a6:	f006 fe93 	bl	80095d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028aa:	f7fd fccd 	bl	8000248 <main>

080028ae <LoopForever>:

LoopForever:
    b LoopForever
 80028ae:	e7fe      	b.n	80028ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80028b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028b8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80028bc:	08009cb0 	.word	0x08009cb0
  ldr r2, =_sbss
 80028c0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80028c4:	2000252c 	.word	0x2000252c

080028c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028c8:	e7fe      	b.n	80028c8 <ADC1_2_IRQHandler>
	...

080028cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <HAL_Init+0x28>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a07      	ldr	r2, [pc, #28]	; (80028f4 <HAL_Init+0x28>)
 80028d6:	f043 0310 	orr.w	r3, r3, #16
 80028da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028dc:	2003      	movs	r0, #3
 80028de:	f000 f8d8 	bl	8002a92 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028e2:	200f      	movs	r0, #15
 80028e4:	f7ff fec8 	bl	8002678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028e8:	f7ff fdbe 	bl	8002468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40022000 	.word	0x40022000

080028f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_IncTick+0x20>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_IncTick+0x24>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4413      	add	r3, r2
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <HAL_IncTick+0x24>)
 800290a:	6013      	str	r3, [r2, #0]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20000008 	.word	0x20000008
 800291c:	20000bd0 	.word	0x20000bd0

08002920 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return uwTick;  
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_GetTick+0x14>)
 8002926:	681b      	ldr	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000bd0 	.word	0x20000bd0

08002938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <__NVIC_SetPriorityGrouping+0x44>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002954:	4013      	ands	r3, r2
 8002956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800296a:	4a04      	ldr	r2, [pc, #16]	; (800297c <__NVIC_SetPriorityGrouping+0x44>)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	60d3      	str	r3, [r2, #12]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <__NVIC_GetPriorityGrouping+0x18>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	0a1b      	lsrs	r3, r3, #8
 800298a:	f003 0307 	and.w	r3, r3, #7
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	db0b      	blt.n	80029c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	f003 021f 	and.w	r2, r3, #31
 80029b4:	4907      	ldr	r1, [pc, #28]	; (80029d4 <__NVIC_EnableIRQ+0x38>)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	2001      	movs	r0, #1
 80029be:	fa00 f202 	lsl.w	r2, r0, r2
 80029c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000e100 	.word	0xe000e100

080029d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	6039      	str	r1, [r7, #0]
 80029e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	db0a      	blt.n	8002a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	490c      	ldr	r1, [pc, #48]	; (8002a24 <__NVIC_SetPriority+0x4c>)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	0112      	lsls	r2, r2, #4
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	440b      	add	r3, r1
 80029fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a00:	e00a      	b.n	8002a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	4908      	ldr	r1, [pc, #32]	; (8002a28 <__NVIC_SetPriority+0x50>)
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	3b04      	subs	r3, #4
 8002a10:	0112      	lsls	r2, r2, #4
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	440b      	add	r3, r1
 8002a16:	761a      	strb	r2, [r3, #24]
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000e100 	.word	0xe000e100
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b089      	sub	sp, #36	; 0x24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f1c3 0307 	rsb	r3, r3, #7
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	bf28      	it	cs
 8002a4a:	2304      	movcs	r3, #4
 8002a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3304      	adds	r3, #4
 8002a52:	2b06      	cmp	r3, #6
 8002a54:	d902      	bls.n	8002a5c <NVIC_EncodePriority+0x30>
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3b03      	subs	r3, #3
 8002a5a:	e000      	b.n	8002a5e <NVIC_EncodePriority+0x32>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	401a      	ands	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	43d9      	mvns	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	4313      	orrs	r3, r2
         );
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3724      	adds	r7, #36	; 0x24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff ff4c 	bl	8002938 <__NVIC_SetPriorityGrouping>
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aba:	f7ff ff61 	bl	8002980 <__NVIC_GetPriorityGrouping>
 8002abe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	68b9      	ldr	r1, [r7, #8]
 8002ac4:	6978      	ldr	r0, [r7, #20]
 8002ac6:	f7ff ffb1 	bl	8002a2c <NVIC_EncodePriority>
 8002aca:	4602      	mov	r2, r0
 8002acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff ff80 	bl	80029d8 <__NVIC_SetPriority>
}
 8002ad8:	bf00      	nop
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff ff54 	bl	800299c <__NVIC_EnableIRQ>
}
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e037      	b.n	8002b82 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2202      	movs	r2, #2
 8002b16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b28:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b2c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f9b7 	bl	8002ed8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}  
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b086      	sub	sp, #24
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
 8002b96:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_DMA_Start_IT+0x20>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e04a      	b.n	8002c40 <HAL_DMA_Start_IT+0xb6>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d13a      	bne.n	8002c32 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0201 	bic.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f94b 	bl	8002e7c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d008      	beq.n	8002c00 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 020e 	orr.w	r2, r2, #14
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	e00f      	b.n	8002c20 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 020a 	orr.w	r2, r2, #10
 8002c0e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0204 	bic.w	r2, r2, #4
 8002c1e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e005      	b.n	8002c3e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d008      	beq.n	8002c6c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2204      	movs	r2, #4
 8002c5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e020      	b.n	8002cae <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 020e 	bic.w	r2, r2, #14
 8002c7a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0201 	bic.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c94:	2101      	movs	r1, #1
 8002c96:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d005      	beq.n	8002cdc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
 8002cda:	e027      	b.n	8002d2c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 020e 	bic.w	r2, r2, #14
 8002cea:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0201 	bic.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d04:	2101      	movs	r1, #1
 8002d06:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	4798      	blx	r3
    } 
  }
  return status;
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	2204      	movs	r2, #4
 8002d54:	409a      	lsls	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d024      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x72>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d01f      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d107      	bne.n	8002d86 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0204 	bic.w	r2, r2, #4
 8002d84:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	2104      	movs	r1, #4
 8002d90:	fa01 f202 	lsl.w	r2, r1, r2
 8002d94:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d06a      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002da6:	e065      	b.n	8002e74 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	2202      	movs	r2, #2
 8002dae:	409a      	lsls	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d02c      	beq.n	8002e12 <HAL_DMA_IRQHandler+0xdc>
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d027      	beq.n	8002e12 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10b      	bne.n	8002de8 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 020a 	bic.w	r2, r2, #10
 8002dde:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df0:	2102      	movs	r1, #2
 8002df2:	fa01 f202 	lsl.w	r2, r1, r2
 8002df6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d035      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002e10:	e030      	b.n	8002e74 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	2208      	movs	r2, #8
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d028      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x13e>
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d023      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 020e 	bic.w	r2, r2, #14
 8002e3a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e44:	2101      	movs	r1, #1
 8002e46:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
    }
  }
}  
 8002e72:	e7ff      	b.n	8002e74 <HAL_DMA_IRQHandler+0x13e>
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e92:	2101      	movs	r1, #1
 8002e94:	fa01 f202 	lsl.w	r2, r1, r2
 8002e98:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b10      	cmp	r3, #16
 8002ea8:	d108      	bne.n	8002ebc <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002eba:	e007      	b.n	8002ecc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	60da      	str	r2, [r3, #12]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <DMA_CalcBaseAndBitshift+0x60>)
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d80f      	bhi.n	8002f0c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <DMA_CalcBaseAndBitshift+0x64>)
 8002ef4:	4413      	add	r3, r2
 8002ef6:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <DMA_CalcBaseAndBitshift+0x68>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	009a      	lsls	r2, r3, #2
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a0f      	ldr	r2, [pc, #60]	; (8002f44 <DMA_CalcBaseAndBitshift+0x6c>)
 8002f08:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002f0a:	e00e      	b.n	8002f2a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <DMA_CalcBaseAndBitshift+0x70>)
 8002f14:	4413      	add	r3, r2
 8002f16:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <DMA_CalcBaseAndBitshift+0x68>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	009a      	lsls	r2, r3, #2
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <DMA_CalcBaseAndBitshift+0x74>)
 8002f28:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40020407 	.word	0x40020407
 8002f3c:	bffdfff8 	.word	0xbffdfff8
 8002f40:	cccccccd 	.word	0xcccccccd
 8002f44:	40020000 	.word	0x40020000
 8002f48:	bffdfbf8 	.word	0xbffdfbf8
 8002f4c:	40020400 	.word	0x40020400

08002f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5e:	e160      	b.n	8003222 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	2101      	movs	r1, #1
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 8152 	beq.w	800321c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d005      	beq.n	8002f90 <HAL_GPIO_Init+0x40>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d130      	bne.n	8002ff2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	091b      	lsrs	r3, r3, #4
 8002fdc:	f003 0201 	and.w	r2, r3, #1
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d017      	beq.n	800302e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	2203      	movs	r2, #3
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d123      	bne.n	8003082 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	08da      	lsrs	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3208      	adds	r2, #8
 8003042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003046:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	220f      	movs	r2, #15
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4013      	ands	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	08da      	lsrs	r2, r3, #3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3208      	adds	r2, #8
 800307c:	6939      	ldr	r1, [r7, #16]
 800307e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	2203      	movs	r2, #3
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4013      	ands	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 0203 	and.w	r2, r3, #3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 80ac 	beq.w	800321c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c4:	4b5e      	ldr	r3, [pc, #376]	; (8003240 <HAL_GPIO_Init+0x2f0>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	4a5d      	ldr	r2, [pc, #372]	; (8003240 <HAL_GPIO_Init+0x2f0>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	6193      	str	r3, [r2, #24]
 80030d0:	4b5b      	ldr	r3, [pc, #364]	; (8003240 <HAL_GPIO_Init+0x2f0>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030dc:	4a59      	ldr	r2, [pc, #356]	; (8003244 <HAL_GPIO_Init+0x2f4>)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	089b      	lsrs	r3, r3, #2
 80030e2:	3302      	adds	r3, #2
 80030e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	220f      	movs	r2, #15
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4013      	ands	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003106:	d025      	beq.n	8003154 <HAL_GPIO_Init+0x204>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a4f      	ldr	r2, [pc, #316]	; (8003248 <HAL_GPIO_Init+0x2f8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d01f      	beq.n	8003150 <HAL_GPIO_Init+0x200>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a4e      	ldr	r2, [pc, #312]	; (800324c <HAL_GPIO_Init+0x2fc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d019      	beq.n	800314c <HAL_GPIO_Init+0x1fc>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a4d      	ldr	r2, [pc, #308]	; (8003250 <HAL_GPIO_Init+0x300>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d013      	beq.n	8003148 <HAL_GPIO_Init+0x1f8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a4c      	ldr	r2, [pc, #304]	; (8003254 <HAL_GPIO_Init+0x304>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00d      	beq.n	8003144 <HAL_GPIO_Init+0x1f4>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a4b      	ldr	r2, [pc, #300]	; (8003258 <HAL_GPIO_Init+0x308>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d007      	beq.n	8003140 <HAL_GPIO_Init+0x1f0>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a4a      	ldr	r2, [pc, #296]	; (800325c <HAL_GPIO_Init+0x30c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d101      	bne.n	800313c <HAL_GPIO_Init+0x1ec>
 8003138:	2306      	movs	r3, #6
 800313a:	e00c      	b.n	8003156 <HAL_GPIO_Init+0x206>
 800313c:	2307      	movs	r3, #7
 800313e:	e00a      	b.n	8003156 <HAL_GPIO_Init+0x206>
 8003140:	2305      	movs	r3, #5
 8003142:	e008      	b.n	8003156 <HAL_GPIO_Init+0x206>
 8003144:	2304      	movs	r3, #4
 8003146:	e006      	b.n	8003156 <HAL_GPIO_Init+0x206>
 8003148:	2303      	movs	r3, #3
 800314a:	e004      	b.n	8003156 <HAL_GPIO_Init+0x206>
 800314c:	2302      	movs	r3, #2
 800314e:	e002      	b.n	8003156 <HAL_GPIO_Init+0x206>
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <HAL_GPIO_Init+0x206>
 8003154:	2300      	movs	r3, #0
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	f002 0203 	and.w	r2, r2, #3
 800315c:	0092      	lsls	r2, r2, #2
 800315e:	4093      	lsls	r3, r2
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003166:	4937      	ldr	r1, [pc, #220]	; (8003244 <HAL_GPIO_Init+0x2f4>)
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	3302      	adds	r3, #2
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003174:	4b3a      	ldr	r3, [pc, #232]	; (8003260 <HAL_GPIO_Init+0x310>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	43db      	mvns	r3, r3
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4013      	ands	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003198:	4a31      	ldr	r2, [pc, #196]	; (8003260 <HAL_GPIO_Init+0x310>)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800319e:	4b30      	ldr	r3, [pc, #192]	; (8003260 <HAL_GPIO_Init+0x310>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	43db      	mvns	r3, r3
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4013      	ands	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031c2:	4a27      	ldr	r2, [pc, #156]	; (8003260 <HAL_GPIO_Init+0x310>)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031c8:	4b25      	ldr	r3, [pc, #148]	; (8003260 <HAL_GPIO_Init+0x310>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031ec:	4a1c      	ldr	r2, [pc, #112]	; (8003260 <HAL_GPIO_Init+0x310>)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f2:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <HAL_GPIO_Init+0x310>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003216:	4a12      	ldr	r2, [pc, #72]	; (8003260 <HAL_GPIO_Init+0x310>)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	3301      	adds	r3, #1
 8003220:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	f47f ae97 	bne.w	8002f60 <HAL_GPIO_Init+0x10>
  }
}
 8003232:	bf00      	nop
 8003234:	bf00      	nop
 8003236:	371c      	adds	r7, #28
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	40021000 	.word	0x40021000
 8003244:	40010000 	.word	0x40010000
 8003248:	48000400 	.word	0x48000400
 800324c:	48000800 	.word	0x48000800
 8003250:	48000c00 	.word	0x48000c00
 8003254:	48001000 	.word	0x48001000
 8003258:	48001400 	.word	0x48001400
 800325c:	48001800 	.word	0x48001800
 8003260:	40010400 	.word	0x40010400

08003264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
 8003270:	4613      	mov	r3, r2
 8003272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003274:	787b      	ldrb	r3, [r7, #1]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003280:	e002      	b.n	8003288 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003282:	887a      	ldrh	r2, [r7, #2]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4013      	ands	r3, r2
 80032ac:	041a      	lsls	r2, r3, #16
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	43d9      	mvns	r1, r3
 80032b2:	887b      	ldrh	r3, [r7, #2]
 80032b4:	400b      	ands	r3, r1
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	619a      	str	r2, [r3, #24]
}
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032d8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d102      	bne.n	80032ee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f001 b83a 	b.w	8004362 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 816f 	beq.w	80035e2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003304:	4bb5      	ldr	r3, [pc, #724]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b04      	cmp	r3, #4
 800330e:	d00c      	beq.n	800332a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003310:	4bb2      	ldr	r3, [pc, #712]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b08      	cmp	r3, #8
 800331a:	d15c      	bne.n	80033d6 <HAL_RCC_OscConfig+0x10e>
 800331c:	4baf      	ldr	r3, [pc, #700]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003328:	d155      	bne.n	80033d6 <HAL_RCC_OscConfig+0x10e>
 800332a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800332e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003336:	fa93 f3a3 	rbit	r3, r3
 800333a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800333e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	b2db      	uxtb	r3, r3
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b01      	cmp	r3, #1
 8003354:	d102      	bne.n	800335c <HAL_RCC_OscConfig+0x94>
 8003356:	4ba1      	ldr	r3, [pc, #644]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	e015      	b.n	8003388 <HAL_RCC_OscConfig+0xc0>
 800335c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003360:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003364:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003374:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003378:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003384:	4b95      	ldr	r3, [pc, #596]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800338c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003390:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003394:	fa92 f2a2 	rbit	r2, r2
 8003398:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800339c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80033a0:	fab2 f282 	clz	r2, r2
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	f042 0220 	orr.w	r2, r2, #32
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	f002 021f 	and.w	r2, r2, #31
 80033b0:	2101      	movs	r1, #1
 80033b2:	fa01 f202 	lsl.w	r2, r1, r2
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8111 	beq.w	80035e0 <HAL_RCC_OscConfig+0x318>
 80033be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f040 8108 	bne.w	80035e0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	f000 bfc6 	b.w	8004362 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e6:	d106      	bne.n	80033f6 <HAL_RCC_OscConfig+0x12e>
 80033e8:	4b7c      	ldr	r3, [pc, #496]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a7b      	ldr	r2, [pc, #492]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 80033ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	e036      	b.n	8003464 <HAL_RCC_OscConfig+0x19c>
 80033f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0x158>
 8003406:	4b75      	ldr	r3, [pc, #468]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a74      	ldr	r2, [pc, #464]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 800340c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	4b72      	ldr	r3, [pc, #456]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a71      	ldr	r2, [pc, #452]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 8003418:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e021      	b.n	8003464 <HAL_RCC_OscConfig+0x19c>
 8003420:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003424:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003430:	d10c      	bne.n	800344c <HAL_RCC_OscConfig+0x184>
 8003432:	4b6a      	ldr	r3, [pc, #424]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a69      	ldr	r2, [pc, #420]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 8003438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4b67      	ldr	r3, [pc, #412]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a66      	ldr	r2, [pc, #408]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 8003444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e00b      	b.n	8003464 <HAL_RCC_OscConfig+0x19c>
 800344c:	4b63      	ldr	r3, [pc, #396]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a62      	ldr	r2, [pc, #392]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 8003452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	4b60      	ldr	r3, [pc, #384]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a5f      	ldr	r2, [pc, #380]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 800345e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003462:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003464:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003468:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d059      	beq.n	8003528 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7ff fa54 	bl	8002920 <HAL_GetTick>
 8003478:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347c:	e00a      	b.n	8003494 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800347e:	f7ff fa4f 	bl	8002920 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b64      	cmp	r3, #100	; 0x64
 800348c:	d902      	bls.n	8003494 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	f000 bf67 	b.w	8004362 <HAL_RCC_OscConfig+0x109a>
 8003494:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003498:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80034a8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ac:	fab3 f383 	clz	r3, r3
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d102      	bne.n	80034c6 <HAL_RCC_OscConfig+0x1fe>
 80034c0:	4b46      	ldr	r3, [pc, #280]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	e015      	b.n	80034f2 <HAL_RCC_OscConfig+0x22a>
 80034c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80034da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034de:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80034e2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80034e6:	fa93 f3a3 	rbit	r3, r3
 80034ea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80034ee:	4b3b      	ldr	r3, [pc, #236]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034f6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80034fa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80034fe:	fa92 f2a2 	rbit	r2, r2
 8003502:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003506:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800350a:	fab2 f282 	clz	r2, r2
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	f042 0220 	orr.w	r2, r2, #32
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	f002 021f 	and.w	r2, r2, #31
 800351a:	2101      	movs	r1, #1
 800351c:	fa01 f202 	lsl.w	r2, r1, r2
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0ab      	beq.n	800347e <HAL_RCC_OscConfig+0x1b6>
 8003526:	e05c      	b.n	80035e2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7ff f9fa 	bl	8002920 <HAL_GetTick>
 800352c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003530:	e00a      	b.n	8003548 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003532:	f7ff f9f5 	bl	8002920 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d902      	bls.n	8003548 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	f000 bf0d 	b.w	8004362 <HAL_RCC_OscConfig+0x109a>
 8003548:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800354c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800355c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003560:	fab3 f383 	clz	r3, r3
 8003564:	b2db      	uxtb	r3, r3
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d102      	bne.n	800357a <HAL_RCC_OscConfig+0x2b2>
 8003574:	4b19      	ldr	r3, [pc, #100]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	e015      	b.n	80035a6 <HAL_RCC_OscConfig+0x2de>
 800357a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800357e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003586:	fa93 f3a3 	rbit	r3, r3
 800358a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800358e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003592:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003596:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800359a:	fa93 f3a3 	rbit	r3, r3
 800359e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80035a2:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <HAL_RCC_OscConfig+0x314>)
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035aa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80035ae:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80035b2:	fa92 f2a2 	rbit	r2, r2
 80035b6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80035ba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80035be:	fab2 f282 	clz	r2, r2
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	f042 0220 	orr.w	r2, r2, #32
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	f002 021f 	and.w	r2, r2, #31
 80035ce:	2101      	movs	r1, #1
 80035d0:	fa01 f202 	lsl.w	r2, r1, r2
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1ab      	bne.n	8003532 <HAL_RCC_OscConfig+0x26a>
 80035da:	e002      	b.n	80035e2 <HAL_RCC_OscConfig+0x31a>
 80035dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 817f 	beq.w	80038f6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035f8:	4ba7      	ldr	r3, [pc, #668]	; (8003898 <HAL_RCC_OscConfig+0x5d0>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00c      	beq.n	800361e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003604:	4ba4      	ldr	r3, [pc, #656]	; (8003898 <HAL_RCC_OscConfig+0x5d0>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 030c 	and.w	r3, r3, #12
 800360c:	2b08      	cmp	r3, #8
 800360e:	d173      	bne.n	80036f8 <HAL_RCC_OscConfig+0x430>
 8003610:	4ba1      	ldr	r3, [pc, #644]	; (8003898 <HAL_RCC_OscConfig+0x5d0>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800361c:	d16c      	bne.n	80036f8 <HAL_RCC_OscConfig+0x430>
 800361e:	2302      	movs	r3, #2
 8003620:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003630:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003634:	fab3 f383 	clz	r3, r3
 8003638:	b2db      	uxtb	r3, r3
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d102      	bne.n	800364e <HAL_RCC_OscConfig+0x386>
 8003648:	4b93      	ldr	r3, [pc, #588]	; (8003898 <HAL_RCC_OscConfig+0x5d0>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	e013      	b.n	8003676 <HAL_RCC_OscConfig+0x3ae>
 800364e:	2302      	movs	r3, #2
 8003650:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003660:	2302      	movs	r3, #2
 8003662:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003666:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003672:	4b89      	ldr	r3, [pc, #548]	; (8003898 <HAL_RCC_OscConfig+0x5d0>)
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	2202      	movs	r2, #2
 8003678:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800367c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003680:	fa92 f2a2 	rbit	r2, r2
 8003684:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003688:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800368c:	fab2 f282 	clz	r2, r2
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	f042 0220 	orr.w	r2, r2, #32
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	f002 021f 	and.w	r2, r2, #31
 800369c:	2101      	movs	r1, #1
 800369e:	fa01 f202 	lsl.w	r2, r1, r2
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <HAL_RCC_OscConfig+0x3f6>
 80036a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d002      	beq.n	80036be <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f000 be52 	b.w	8004362 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036be:	4b76      	ldr	r3, [pc, #472]	; (8003898 <HAL_RCC_OscConfig+0x5d0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	21f8      	movs	r1, #248	; 0xf8
 80036d4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80036dc:	fa91 f1a1 	rbit	r1, r1
 80036e0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80036e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80036e8:	fab1 f181 	clz	r1, r1
 80036ec:	b2c9      	uxtb	r1, r1
 80036ee:	408b      	lsls	r3, r1
 80036f0:	4969      	ldr	r1, [pc, #420]	; (8003898 <HAL_RCC_OscConfig+0x5d0>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f6:	e0fe      	b.n	80038f6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 8088 	beq.w	800381a <HAL_RCC_OscConfig+0x552>
 800370a:	2301      	movs	r3, #1
 800370c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800371c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003720:	fab3 f383 	clz	r3, r3
 8003724:	b2db      	uxtb	r3, r3
 8003726:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800372a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	461a      	mov	r2, r3
 8003732:	2301      	movs	r3, #1
 8003734:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7ff f8f3 	bl	8002920 <HAL_GetTick>
 800373a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373e:	e00a      	b.n	8003756 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003740:	f7ff f8ee 	bl	8002920 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d902      	bls.n	8003756 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	f000 be06 	b.w	8004362 <HAL_RCC_OscConfig+0x109a>
 8003756:	2302      	movs	r3, #2
 8003758:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003760:	fa93 f3a3 	rbit	r3, r3
 8003764:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003768:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376c:	fab3 f383 	clz	r3, r3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d102      	bne.n	8003786 <HAL_RCC_OscConfig+0x4be>
 8003780:	4b45      	ldr	r3, [pc, #276]	; (8003898 <HAL_RCC_OscConfig+0x5d0>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	e013      	b.n	80037ae <HAL_RCC_OscConfig+0x4e6>
 8003786:	2302      	movs	r3, #2
 8003788:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003790:	fa93 f3a3 	rbit	r3, r3
 8003794:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003798:	2302      	movs	r3, #2
 800379a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800379e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80037aa:	4b3b      	ldr	r3, [pc, #236]	; (8003898 <HAL_RCC_OscConfig+0x5d0>)
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	2202      	movs	r2, #2
 80037b0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80037b4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80037b8:	fa92 f2a2 	rbit	r2, r2
 80037bc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80037c0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80037c4:	fab2 f282 	clz	r2, r2
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	f042 0220 	orr.w	r2, r2, #32
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	f002 021f 	and.w	r2, r2, #31
 80037d4:	2101      	movs	r1, #1
 80037d6:	fa01 f202 	lsl.w	r2, r1, r2
 80037da:	4013      	ands	r3, r2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0af      	beq.n	8003740 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e0:	4b2d      	ldr	r3, [pc, #180]	; (8003898 <HAL_RCC_OscConfig+0x5d0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	21f8      	movs	r1, #248	; 0xf8
 80037f6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80037fe:	fa91 f1a1 	rbit	r1, r1
 8003802:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003806:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800380a:	fab1 f181 	clz	r1, r1
 800380e:	b2c9      	uxtb	r1, r1
 8003810:	408b      	lsls	r3, r1
 8003812:	4921      	ldr	r1, [pc, #132]	; (8003898 <HAL_RCC_OscConfig+0x5d0>)
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]
 8003818:	e06d      	b.n	80038f6 <HAL_RCC_OscConfig+0x62e>
 800381a:	2301      	movs	r3, #1
 800381c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003824:	fa93 f3a3 	rbit	r3, r3
 8003828:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800382c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003830:	fab3 f383 	clz	r3, r3
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800383a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	461a      	mov	r2, r3
 8003842:	2300      	movs	r3, #0
 8003844:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003846:	f7ff f86b 	bl	8002920 <HAL_GetTick>
 800384a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003850:	f7ff f866 	bl	8002920 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d902      	bls.n	8003866 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	f000 bd7e 	b.w	8004362 <HAL_RCC_OscConfig+0x109a>
 8003866:	2302      	movs	r3, #2
 8003868:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003870:	fa93 f3a3 	rbit	r3, r3
 8003874:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003878:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800387c:	fab3 f383 	clz	r3, r3
 8003880:	b2db      	uxtb	r3, r3
 8003882:	095b      	lsrs	r3, r3, #5
 8003884:	b2db      	uxtb	r3, r3
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b01      	cmp	r3, #1
 800388e:	d105      	bne.n	800389c <HAL_RCC_OscConfig+0x5d4>
 8003890:	4b01      	ldr	r3, [pc, #4]	; (8003898 <HAL_RCC_OscConfig+0x5d0>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	e016      	b.n	80038c4 <HAL_RCC_OscConfig+0x5fc>
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000
 800389c:	2302      	movs	r3, #2
 800389e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038a6:	fa93 f3a3 	rbit	r3, r3
 80038aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80038ae:	2302      	movs	r3, #2
 80038b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80038b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80038b8:	fa93 f3a3 	rbit	r3, r3
 80038bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80038c0:	4bbf      	ldr	r3, [pc, #764]	; (8003bc0 <HAL_RCC_OscConfig+0x8f8>)
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	2202      	movs	r2, #2
 80038c6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80038ca:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80038ce:	fa92 f2a2 	rbit	r2, r2
 80038d2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80038d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80038da:	fab2 f282 	clz	r2, r2
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	f042 0220 	orr.w	r2, r2, #32
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	f002 021f 	and.w	r2, r2, #31
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f202 	lsl.w	r2, r1, r2
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1ac      	bne.n	8003850 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8113 	beq.w	8003b32 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800390c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003910:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d07c      	beq.n	8003a16 <HAL_RCC_OscConfig+0x74e>
 800391c:	2301      	movs	r3, #1
 800391e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003926:	fa93 f3a3 	rbit	r3, r3
 800392a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800392e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
 800393a:	4ba2      	ldr	r3, [pc, #648]	; (8003bc4 <HAL_RCC_OscConfig+0x8fc>)
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	461a      	mov	r2, r3
 8003942:	2301      	movs	r3, #1
 8003944:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003946:	f7fe ffeb 	bl	8002920 <HAL_GetTick>
 800394a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394e:	e00a      	b.n	8003966 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003950:	f7fe ffe6 	bl	8002920 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d902      	bls.n	8003966 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	f000 bcfe 	b.w	8004362 <HAL_RCC_OscConfig+0x109a>
 8003966:	2302      	movs	r3, #2
 8003968:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003970:	fa93 f2a3 	rbit	r2, r3
 8003974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003978:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003982:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003986:	2202      	movs	r2, #2
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800398e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	fa93 f2a3 	rbit	r2, r3
 8003998:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800399c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80039aa:	2202      	movs	r2, #2
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	fa93 f2a3 	rbit	r2, r3
 80039bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80039c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c6:	4b7e      	ldr	r3, [pc, #504]	; (8003bc0 <HAL_RCC_OscConfig+0x8f8>)
 80039c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80039d2:	2102      	movs	r1, #2
 80039d4:	6019      	str	r1, [r3, #0]
 80039d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	fa93 f1a3 	rbit	r1, r3
 80039e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039ec:	6019      	str	r1, [r3, #0]
  return result;
 80039ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	fab3 f383 	clz	r3, r3
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	2101      	movs	r1, #1
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d09d      	beq.n	8003950 <HAL_RCC_OscConfig+0x688>
 8003a14:	e08d      	b.n	8003b32 <HAL_RCC_OscConfig+0x86a>
 8003a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a1e:	2201      	movs	r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a26:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	fa93 f2a3 	rbit	r2, r3
 8003a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a34:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a38:	601a      	str	r2, [r3, #0]
  return result;
 8003a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a42:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a44:	fab3 f383 	clz	r3, r3
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	4b5d      	ldr	r3, [pc, #372]	; (8003bc4 <HAL_RCC_OscConfig+0x8fc>)
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	461a      	mov	r2, r3
 8003a54:	2300      	movs	r3, #0
 8003a56:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a58:	f7fe ff62 	bl	8002920 <HAL_GetTick>
 8003a5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a62:	f7fe ff5d 	bl	8002920 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d902      	bls.n	8003a78 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	f000 bc75 	b.w	8004362 <HAL_RCC_OscConfig+0x109a>
 8003a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a7c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003a80:	2202      	movs	r2, #2
 8003a82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a88:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	fa93 f2a3 	rbit	r2, r3
 8003a92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	fa93 f2a3 	rbit	r2, r3
 8003ab6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ac4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003ac8:	2202      	movs	r2, #2
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	fa93 f2a3 	rbit	r2, r3
 8003ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ade:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003ae2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae4:	4b36      	ldr	r3, [pc, #216]	; (8003bc0 <HAL_RCC_OscConfig+0x8f8>)
 8003ae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003af0:	2102      	movs	r1, #2
 8003af2:	6019      	str	r1, [r3, #0]
 8003af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003af8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	fa93 f1a3 	rbit	r1, r3
 8003b02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b06:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003b0a:	6019      	str	r1, [r3, #0]
  return result;
 8003b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b10:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f003 031f 	and.w	r3, r3, #31
 8003b26:	2101      	movs	r1, #1
 8003b28:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d197      	bne.n	8003a62 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 81a5 	beq.w	8003e92 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b4e:	4b1c      	ldr	r3, [pc, #112]	; (8003bc0 <HAL_RCC_OscConfig+0x8f8>)
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d116      	bne.n	8003b88 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5a:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <HAL_RCC_OscConfig+0x8f8>)
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	4a18      	ldr	r2, [pc, #96]	; (8003bc0 <HAL_RCC_OscConfig+0x8f8>)
 8003b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b64:	61d3      	str	r3, [r2, #28]
 8003b66:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <HAL_RCC_OscConfig+0x8f8>)
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b80:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b88:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <HAL_RCC_OscConfig+0x900>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d121      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <HAL_RCC_OscConfig+0x900>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a0b      	ldr	r2, [pc, #44]	; (8003bc8 <HAL_RCC_OscConfig+0x900>)
 8003b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba0:	f7fe febe 	bl	8002920 <HAL_GetTick>
 8003ba4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba8:	e010      	b.n	8003bcc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003baa:	f7fe feb9 	bl	8002920 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b64      	cmp	r3, #100	; 0x64
 8003bb8:	d908      	bls.n	8003bcc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e3d1      	b.n	8004362 <HAL_RCC_OscConfig+0x109a>
 8003bbe:	bf00      	nop
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	10908120 	.word	0x10908120
 8003bc8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bcc:	4b8d      	ldr	r3, [pc, #564]	; (8003e04 <HAL_RCC_OscConfig+0xb3c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0e8      	beq.n	8003baa <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bdc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d106      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x92e>
 8003be8:	4b87      	ldr	r3, [pc, #540]	; (8003e08 <HAL_RCC_OscConfig+0xb40>)
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	4a86      	ldr	r2, [pc, #536]	; (8003e08 <HAL_RCC_OscConfig+0xb40>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6213      	str	r3, [r2, #32]
 8003bf4:	e035      	b.n	8003c62 <HAL_RCC_OscConfig+0x99a>
 8003bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bfa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x958>
 8003c06:	4b80      	ldr	r3, [pc, #512]	; (8003e08 <HAL_RCC_OscConfig+0xb40>)
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	4a7f      	ldr	r2, [pc, #508]	; (8003e08 <HAL_RCC_OscConfig+0xb40>)
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	6213      	str	r3, [r2, #32]
 8003c12:	4b7d      	ldr	r3, [pc, #500]	; (8003e08 <HAL_RCC_OscConfig+0xb40>)
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	4a7c      	ldr	r2, [pc, #496]	; (8003e08 <HAL_RCC_OscConfig+0xb40>)
 8003c18:	f023 0304 	bic.w	r3, r3, #4
 8003c1c:	6213      	str	r3, [r2, #32]
 8003c1e:	e020      	b.n	8003c62 <HAL_RCC_OscConfig+0x99a>
 8003c20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b05      	cmp	r3, #5
 8003c2e:	d10c      	bne.n	8003c4a <HAL_RCC_OscConfig+0x982>
 8003c30:	4b75      	ldr	r3, [pc, #468]	; (8003e08 <HAL_RCC_OscConfig+0xb40>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	4a74      	ldr	r2, [pc, #464]	; (8003e08 <HAL_RCC_OscConfig+0xb40>)
 8003c36:	f043 0304 	orr.w	r3, r3, #4
 8003c3a:	6213      	str	r3, [r2, #32]
 8003c3c:	4b72      	ldr	r3, [pc, #456]	; (8003e08 <HAL_RCC_OscConfig+0xb40>)
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	4a71      	ldr	r2, [pc, #452]	; (8003e08 <HAL_RCC_OscConfig+0xb40>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6213      	str	r3, [r2, #32]
 8003c48:	e00b      	b.n	8003c62 <HAL_RCC_OscConfig+0x99a>
 8003c4a:	4b6f      	ldr	r3, [pc, #444]	; (8003e08 <HAL_RCC_OscConfig+0xb40>)
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4a6e      	ldr	r2, [pc, #440]	; (8003e08 <HAL_RCC_OscConfig+0xb40>)
 8003c50:	f023 0301 	bic.w	r3, r3, #1
 8003c54:	6213      	str	r3, [r2, #32]
 8003c56:	4b6c      	ldr	r3, [pc, #432]	; (8003e08 <HAL_RCC_OscConfig+0xb40>)
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	4a6b      	ldr	r2, [pc, #428]	; (8003e08 <HAL_RCC_OscConfig+0xb40>)
 8003c5c:	f023 0304 	bic.w	r3, r3, #4
 8003c60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 8081 	beq.w	8003d76 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c74:	f7fe fe54 	bl	8002920 <HAL_GetTick>
 8003c78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7c:	e00b      	b.n	8003c96 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fe fe4f 	bl	8002920 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e365      	b.n	8004362 <HAL_RCC_OscConfig+0x109a>
 8003c96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c9a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ca6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	fa93 f2a3 	rbit	r2, r3
 8003cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cb4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cbe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	fa93 f2a3 	rbit	r2, r3
 8003cd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cd8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003cdc:	601a      	str	r2, [r3, #0]
  return result;
 8003cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003ce6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce8:	fab3 f383 	clz	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	f043 0302 	orr.w	r3, r3, #2
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d102      	bne.n	8003d02 <HAL_RCC_OscConfig+0xa3a>
 8003cfc:	4b42      	ldr	r3, [pc, #264]	; (8003e08 <HAL_RCC_OscConfig+0xb40>)
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	e013      	b.n	8003d2a <HAL_RCC_OscConfig+0xa62>
 8003d02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d06:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d12:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	fa93 f2a3 	rbit	r2, r3
 8003d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d20:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	4b38      	ldr	r3, [pc, #224]	; (8003e08 <HAL_RCC_OscConfig+0xb40>)
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d2e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d32:	2102      	movs	r1, #2
 8003d34:	6011      	str	r1, [r2, #0]
 8003d36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d3a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	fa92 f1a2 	rbit	r1, r2
 8003d44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d48:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003d4c:	6011      	str	r1, [r2, #0]
  return result;
 8003d4e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d52:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	fab2 f282 	clz	r2, r2
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	f002 021f 	and.w	r2, r2, #31
 8003d68:	2101      	movs	r1, #1
 8003d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d084      	beq.n	8003c7e <HAL_RCC_OscConfig+0x9b6>
 8003d74:	e083      	b.n	8003e7e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d76:	f7fe fdd3 	bl	8002920 <HAL_GetTick>
 8003d7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7e:	e00b      	b.n	8003d98 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d80:	f7fe fdce 	bl	8002920 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e2e4      	b.n	8004362 <HAL_RCC_OscConfig+0x109a>
 8003d98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d9c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003da0:	2202      	movs	r2, #2
 8003da2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003da8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	fa93 f2a3 	rbit	r2, r3
 8003db2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003db6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dc0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dcc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	fa93 f2a3 	rbit	r2, r3
 8003dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dda:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003dde:	601a      	str	r2, [r3, #0]
  return result;
 8003de0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003de4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003de8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dea:	fab3 f383 	clz	r3, r3
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f043 0302 	orr.w	r3, r3, #2
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d106      	bne.n	8003e0c <HAL_RCC_OscConfig+0xb44>
 8003dfe:	4b02      	ldr	r3, [pc, #8]	; (8003e08 <HAL_RCC_OscConfig+0xb40>)
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	e017      	b.n	8003e34 <HAL_RCC_OscConfig+0xb6c>
 8003e04:	40007000 	.word	0x40007000
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e10:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003e14:	2202      	movs	r2, #2
 8003e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e1c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	fa93 f2a3 	rbit	r2, r3
 8003e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e2a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	4bb3      	ldr	r3, [pc, #716]	; (8004100 <HAL_RCC_OscConfig+0xe38>)
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e38:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e3c:	2102      	movs	r1, #2
 8003e3e:	6011      	str	r1, [r2, #0]
 8003e40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e44:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e48:	6812      	ldr	r2, [r2, #0]
 8003e4a:	fa92 f1a2 	rbit	r1, r2
 8003e4e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e52:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003e56:	6011      	str	r1, [r2, #0]
  return result;
 8003e58:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e5c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003e60:	6812      	ldr	r2, [r2, #0]
 8003e62:	fab2 f282 	clz	r2, r2
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	f002 021f 	and.w	r2, r2, #31
 8003e72:	2101      	movs	r1, #1
 8003e74:	fa01 f202 	lsl.w	r2, r1, r2
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d180      	bne.n	8003d80 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e7e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d105      	bne.n	8003e92 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e86:	4b9e      	ldr	r3, [pc, #632]	; (8004100 <HAL_RCC_OscConfig+0xe38>)
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	4a9d      	ldr	r2, [pc, #628]	; (8004100 <HAL_RCC_OscConfig+0xe38>)
 8003e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e90:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 825e 	beq.w	8004360 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ea4:	4b96      	ldr	r3, [pc, #600]	; (8004100 <HAL_RCC_OscConfig+0xe38>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 030c 	and.w	r3, r3, #12
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	f000 821f 	beq.w	80042f0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eb6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	f040 8170 	bne.w	80041a4 <HAL_RCC_OscConfig+0xedc>
 8003ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ec8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003ecc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ed0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ed6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	fa93 f2a3 	rbit	r2, r3
 8003ee0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ee4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003ee8:	601a      	str	r2, [r3, #0]
  return result;
 8003eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003ef2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef4:	fab3 f383 	clz	r3, r3
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003efe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	461a      	mov	r2, r3
 8003f06:	2300      	movs	r3, #0
 8003f08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0a:	f7fe fd09 	bl	8002920 <HAL_GetTick>
 8003f0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f12:	e009      	b.n	8003f28 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fe fd04 	bl	8002920 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e21c      	b.n	8004362 <HAL_RCC_OscConfig+0x109a>
 8003f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f2c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f3a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	fa93 f2a3 	rbit	r2, r3
 8003f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f48:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f4c:	601a      	str	r2, [r3, #0]
  return result;
 8003f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f52:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f56:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f58:	fab3 f383 	clz	r3, r3
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d102      	bne.n	8003f72 <HAL_RCC_OscConfig+0xcaa>
 8003f6c:	4b64      	ldr	r3, [pc, #400]	; (8004100 <HAL_RCC_OscConfig+0xe38>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	e027      	b.n	8003fc2 <HAL_RCC_OscConfig+0xcfa>
 8003f72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f76:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003f7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f84:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	fa93 f2a3 	rbit	r2, r3
 8003f8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f92:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f9c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003faa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	fa93 f2a3 	rbit	r2, r3
 8003fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fb8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	4b50      	ldr	r3, [pc, #320]	; (8004100 <HAL_RCC_OscConfig+0xe38>)
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fc6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003fca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fce:	6011      	str	r1, [r2, #0]
 8003fd0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fd4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003fd8:	6812      	ldr	r2, [r2, #0]
 8003fda:	fa92 f1a2 	rbit	r1, r2
 8003fde:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fe2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003fe6:	6011      	str	r1, [r2, #0]
  return result;
 8003fe8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fec:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	fab2 f282 	clz	r2, r2
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	f042 0220 	orr.w	r2, r2, #32
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	f002 021f 	and.w	r2, r2, #31
 8004002:	2101      	movs	r1, #1
 8004004:	fa01 f202 	lsl.w	r2, r1, r2
 8004008:	4013      	ands	r3, r2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d182      	bne.n	8003f14 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800400e:	4b3c      	ldr	r3, [pc, #240]	; (8004100 <HAL_RCC_OscConfig+0xe38>)
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	f023 020f 	bic.w	r2, r3, #15
 8004016:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800401a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	4937      	ldr	r1, [pc, #220]	; (8004100 <HAL_RCC_OscConfig+0xe38>)
 8004024:	4313      	orrs	r3, r2
 8004026:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004028:	4b35      	ldr	r3, [pc, #212]	; (8004100 <HAL_RCC_OscConfig+0xe38>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004030:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004034:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a19      	ldr	r1, [r3, #32]
 800403c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004040:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	430b      	orrs	r3, r1
 800404a:	492d      	ldr	r1, [pc, #180]	; (8004100 <HAL_RCC_OscConfig+0xe38>)
 800404c:	4313      	orrs	r3, r2
 800404e:	604b      	str	r3, [r1, #4]
 8004050:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004054:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004058:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800405c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004062:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	fa93 f2a3 	rbit	r2, r3
 800406c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004070:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004074:	601a      	str	r2, [r3, #0]
  return result;
 8004076:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800407a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800407e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004080:	fab3 f383 	clz	r3, r3
 8004084:	b2db      	uxtb	r3, r3
 8004086:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800408a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	461a      	mov	r2, r3
 8004092:	2301      	movs	r3, #1
 8004094:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004096:	f7fe fc43 	bl	8002920 <HAL_GetTick>
 800409a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800409e:	e009      	b.n	80040b4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a0:	f7fe fc3e 	bl	8002920 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e156      	b.n	8004362 <HAL_RCC_OscConfig+0x109a>
 80040b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040b8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80040bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040c6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	fa93 f2a3 	rbit	r2, r3
 80040d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040d4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80040d8:	601a      	str	r2, [r3, #0]
  return result;
 80040da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040de:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80040e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040e4:	fab3 f383 	clz	r3, r3
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d105      	bne.n	8004104 <HAL_RCC_OscConfig+0xe3c>
 80040f8:	4b01      	ldr	r3, [pc, #4]	; (8004100 <HAL_RCC_OscConfig+0xe38>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	e02a      	b.n	8004154 <HAL_RCC_OscConfig+0xe8c>
 80040fe:	bf00      	nop
 8004100:	40021000 	.word	0x40021000
 8004104:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004108:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800410c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004116:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	fa93 f2a3 	rbit	r2, r3
 8004120:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004124:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800412e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004132:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800413c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	fa93 f2a3 	rbit	r2, r3
 8004146:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800414a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	4b86      	ldr	r3, [pc, #536]	; (800436c <HAL_RCC_OscConfig+0x10a4>)
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004158:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800415c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004160:	6011      	str	r1, [r2, #0]
 8004162:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004166:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	fa92 f1a2 	rbit	r1, r2
 8004170:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004174:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004178:	6011      	str	r1, [r2, #0]
  return result;
 800417a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800417e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	fab2 f282 	clz	r2, r2
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	f042 0220 	orr.w	r2, r2, #32
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	f002 021f 	and.w	r2, r2, #31
 8004194:	2101      	movs	r1, #1
 8004196:	fa01 f202 	lsl.w	r2, r1, r2
 800419a:	4013      	ands	r3, r2
 800419c:	2b00      	cmp	r3, #0
 800419e:	f43f af7f 	beq.w	80040a0 <HAL_RCC_OscConfig+0xdd8>
 80041a2:	e0dd      	b.n	8004360 <HAL_RCC_OscConfig+0x1098>
 80041a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80041ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041b6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	fa93 f2a3 	rbit	r2, r3
 80041c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80041c8:	601a      	str	r2, [r3, #0]
  return result;
 80041ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041ce:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80041d2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d4:	fab3 f383 	clz	r3, r3
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	461a      	mov	r2, r3
 80041e6:	2300      	movs	r3, #0
 80041e8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ea:	f7fe fb99 	bl	8002920 <HAL_GetTick>
 80041ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041f2:	e009      	b.n	8004208 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f4:	f7fe fb94 	bl	8002920 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e0ac      	b.n	8004362 <HAL_RCC_OscConfig+0x109a>
 8004208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800420c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004210:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004214:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004216:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800421a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	fa93 f2a3 	rbit	r2, r3
 8004224:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004228:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800422c:	601a      	str	r2, [r3, #0]
  return result;
 800422e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004232:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004236:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004238:	fab3 f383 	clz	r3, r3
 800423c:	b2db      	uxtb	r3, r3
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	b2db      	uxtb	r3, r3
 8004242:	f043 0301 	orr.w	r3, r3, #1
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d102      	bne.n	8004252 <HAL_RCC_OscConfig+0xf8a>
 800424c:	4b47      	ldr	r3, [pc, #284]	; (800436c <HAL_RCC_OscConfig+0x10a4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	e027      	b.n	80042a2 <HAL_RCC_OscConfig+0xfda>
 8004252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004256:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800425a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800425e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004264:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	fa93 f2a3 	rbit	r2, r3
 800426e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004272:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800427c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004280:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800428a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	fa93 f2a3 	rbit	r2, r3
 8004294:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004298:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	4b33      	ldr	r3, [pc, #204]	; (800436c <HAL_RCC_OscConfig+0x10a4>)
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80042a6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80042aa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042ae:	6011      	str	r1, [r2, #0]
 80042b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80042b4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80042b8:	6812      	ldr	r2, [r2, #0]
 80042ba:	fa92 f1a2 	rbit	r1, r2
 80042be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80042c2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80042c6:	6011      	str	r1, [r2, #0]
  return result;
 80042c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80042cc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	fab2 f282 	clz	r2, r2
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	f042 0220 	orr.w	r2, r2, #32
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	f002 021f 	and.w	r2, r2, #31
 80042e2:	2101      	movs	r1, #1
 80042e4:	fa01 f202 	lsl.w	r2, r1, r2
 80042e8:	4013      	ands	r3, r2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d182      	bne.n	80041f4 <HAL_RCC_OscConfig+0xf2c>
 80042ee:	e037      	b.n	8004360 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e02e      	b.n	8004362 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004304:	4b19      	ldr	r3, [pc, #100]	; (800436c <HAL_RCC_OscConfig+0x10a4>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800430c:	4b17      	ldr	r3, [pc, #92]	; (800436c <HAL_RCC_OscConfig+0x10a4>)
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004314:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004318:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800431c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004320:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	429a      	cmp	r2, r3
 800432a:	d117      	bne.n	800435c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800432c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004330:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004334:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004338:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004340:	429a      	cmp	r2, r3
 8004342:	d10b      	bne.n	800435c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004344:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004348:	f003 020f 	and.w	r2, r3, #15
 800434c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004350:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004358:	429a      	cmp	r2, r3
 800435a:	d001      	beq.n	8004360 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e000      	b.n	8004362 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40021000 	.word	0x40021000

08004370 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b09e      	sub	sp, #120	; 0x78
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e162      	b.n	800464e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004388:	4b90      	ldr	r3, [pc, #576]	; (80045cc <HAL_RCC_ClockConfig+0x25c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d910      	bls.n	80043b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004396:	4b8d      	ldr	r3, [pc, #564]	; (80045cc <HAL_RCC_ClockConfig+0x25c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f023 0207 	bic.w	r2, r3, #7
 800439e:	498b      	ldr	r1, [pc, #556]	; (80045cc <HAL_RCC_ClockConfig+0x25c>)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a6:	4b89      	ldr	r3, [pc, #548]	; (80045cc <HAL_RCC_ClockConfig+0x25c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d001      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e14a      	b.n	800464e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d008      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c4:	4b82      	ldr	r3, [pc, #520]	; (80045d0 <HAL_RCC_ClockConfig+0x260>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	497f      	ldr	r1, [pc, #508]	; (80045d0 <HAL_RCC_ClockConfig+0x260>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 80dc 	beq.w	800459c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d13c      	bne.n	8004466 <HAL_RCC_ClockConfig+0xf6>
 80043ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043f4:	fa93 f3a3 	rbit	r3, r3
 80043f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80043fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fc:	fab3 f383 	clz	r3, r3
 8004400:	b2db      	uxtb	r3, r3
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	b2db      	uxtb	r3, r3
 8004406:	f043 0301 	orr.w	r3, r3, #1
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	d102      	bne.n	8004416 <HAL_RCC_ClockConfig+0xa6>
 8004410:	4b6f      	ldr	r3, [pc, #444]	; (80045d0 <HAL_RCC_ClockConfig+0x260>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	e00f      	b.n	8004436 <HAL_RCC_ClockConfig+0xc6>
 8004416:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800441a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800441e:	fa93 f3a3 	rbit	r3, r3
 8004422:	667b      	str	r3, [r7, #100]	; 0x64
 8004424:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004428:	663b      	str	r3, [r7, #96]	; 0x60
 800442a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800442c:	fa93 f3a3 	rbit	r3, r3
 8004430:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004432:	4b67      	ldr	r3, [pc, #412]	; (80045d0 <HAL_RCC_ClockConfig+0x260>)
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800443a:	65ba      	str	r2, [r7, #88]	; 0x58
 800443c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800443e:	fa92 f2a2 	rbit	r2, r2
 8004442:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004444:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004446:	fab2 f282 	clz	r2, r2
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	f042 0220 	orr.w	r2, r2, #32
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	f002 021f 	and.w	r2, r2, #31
 8004456:	2101      	movs	r1, #1
 8004458:	fa01 f202 	lsl.w	r2, r1, r2
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d17b      	bne.n	800455a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e0f3      	b.n	800464e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d13c      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x178>
 800446e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004472:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004476:	fa93 f3a3 	rbit	r3, r3
 800447a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800447c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800447e:	fab3 f383 	clz	r3, r3
 8004482:	b2db      	uxtb	r3, r3
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b01      	cmp	r3, #1
 8004490:	d102      	bne.n	8004498 <HAL_RCC_ClockConfig+0x128>
 8004492:	4b4f      	ldr	r3, [pc, #316]	; (80045d0 <HAL_RCC_ClockConfig+0x260>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	e00f      	b.n	80044b8 <HAL_RCC_ClockConfig+0x148>
 8004498:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800449c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a0:	fa93 f3a3 	rbit	r3, r3
 80044a4:	647b      	str	r3, [r7, #68]	; 0x44
 80044a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044aa:	643b      	str	r3, [r7, #64]	; 0x40
 80044ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ae:	fa93 f3a3 	rbit	r3, r3
 80044b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044b4:	4b46      	ldr	r3, [pc, #280]	; (80045d0 <HAL_RCC_ClockConfig+0x260>)
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80044be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044c0:	fa92 f2a2 	rbit	r2, r2
 80044c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80044c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044c8:	fab2 f282 	clz	r2, r2
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	f042 0220 	orr.w	r2, r2, #32
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	f002 021f 	and.w	r2, r2, #31
 80044d8:	2101      	movs	r1, #1
 80044da:	fa01 f202 	lsl.w	r2, r1, r2
 80044de:	4013      	ands	r3, r2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d13a      	bne.n	800455a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0b2      	b.n	800464e <HAL_RCC_ClockConfig+0x2de>
 80044e8:	2302      	movs	r3, #2
 80044ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	fa93 f3a3 	rbit	r3, r3
 80044f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80044f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f6:	fab3 f383 	clz	r3, r3
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	f043 0301 	orr.w	r3, r3, #1
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b01      	cmp	r3, #1
 8004508:	d102      	bne.n	8004510 <HAL_RCC_ClockConfig+0x1a0>
 800450a:	4b31      	ldr	r3, [pc, #196]	; (80045d0 <HAL_RCC_ClockConfig+0x260>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	e00d      	b.n	800452c <HAL_RCC_ClockConfig+0x1bc>
 8004510:	2302      	movs	r3, #2
 8004512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004516:	fa93 f3a3 	rbit	r3, r3
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
 800451c:	2302      	movs	r3, #2
 800451e:	623b      	str	r3, [r7, #32]
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	fa93 f3a3 	rbit	r3, r3
 8004526:	61fb      	str	r3, [r7, #28]
 8004528:	4b29      	ldr	r3, [pc, #164]	; (80045d0 <HAL_RCC_ClockConfig+0x260>)
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	2202      	movs	r2, #2
 800452e:	61ba      	str	r2, [r7, #24]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	fa92 f2a2 	rbit	r2, r2
 8004536:	617a      	str	r2, [r7, #20]
  return result;
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	fab2 f282 	clz	r2, r2
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	f042 0220 	orr.w	r2, r2, #32
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	f002 021f 	and.w	r2, r2, #31
 800454a:	2101      	movs	r1, #1
 800454c:	fa01 f202 	lsl.w	r2, r1, r2
 8004550:	4013      	ands	r3, r2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e079      	b.n	800464e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800455a:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <HAL_RCC_ClockConfig+0x260>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f023 0203 	bic.w	r2, r3, #3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	491a      	ldr	r1, [pc, #104]	; (80045d0 <HAL_RCC_ClockConfig+0x260>)
 8004568:	4313      	orrs	r3, r2
 800456a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800456c:	f7fe f9d8 	bl	8002920 <HAL_GetTick>
 8004570:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004572:	e00a      	b.n	800458a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004574:	f7fe f9d4 	bl	8002920 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004582:	4293      	cmp	r3, r2
 8004584:	d901      	bls.n	800458a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e061      	b.n	800464e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458a:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <HAL_RCC_ClockConfig+0x260>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f003 020c 	and.w	r2, r3, #12
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	429a      	cmp	r2, r3
 800459a:	d1eb      	bne.n	8004574 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <HAL_RCC_ClockConfig+0x25c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d214      	bcs.n	80045d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045aa:	4b08      	ldr	r3, [pc, #32]	; (80045cc <HAL_RCC_ClockConfig+0x25c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f023 0207 	bic.w	r2, r3, #7
 80045b2:	4906      	ldr	r1, [pc, #24]	; (80045cc <HAL_RCC_ClockConfig+0x25c>)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ba:	4b04      	ldr	r3, [pc, #16]	; (80045cc <HAL_RCC_ClockConfig+0x25c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e040      	b.n	800464e <HAL_RCC_ClockConfig+0x2de>
 80045cc:	40022000 	.word	0x40022000
 80045d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045e0:	4b1d      	ldr	r3, [pc, #116]	; (8004658 <HAL_RCC_ClockConfig+0x2e8>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	491a      	ldr	r1, [pc, #104]	; (8004658 <HAL_RCC_ClockConfig+0x2e8>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d009      	beq.n	8004612 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045fe:	4b16      	ldr	r3, [pc, #88]	; (8004658 <HAL_RCC_ClockConfig+0x2e8>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	4912      	ldr	r1, [pc, #72]	; (8004658 <HAL_RCC_ClockConfig+0x2e8>)
 800460e:	4313      	orrs	r3, r2
 8004610:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004612:	f000 f829 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 8004616:	4601      	mov	r1, r0
 8004618:	4b0f      	ldr	r3, [pc, #60]	; (8004658 <HAL_RCC_ClockConfig+0x2e8>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004620:	22f0      	movs	r2, #240	; 0xf0
 8004622:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	fa92 f2a2 	rbit	r2, r2
 800462a:	60fa      	str	r2, [r7, #12]
  return result;
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	fab2 f282 	clz	r2, r2
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	40d3      	lsrs	r3, r2
 8004636:	4a09      	ldr	r2, [pc, #36]	; (800465c <HAL_RCC_ClockConfig+0x2ec>)
 8004638:	5cd3      	ldrb	r3, [r2, r3]
 800463a:	fa21 f303 	lsr.w	r3, r1, r3
 800463e:	4a08      	ldr	r2, [pc, #32]	; (8004660 <HAL_RCC_ClockConfig+0x2f0>)
 8004640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004642:	4b08      	ldr	r3, [pc, #32]	; (8004664 <HAL_RCC_ClockConfig+0x2f4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe f816 	bl	8002678 <HAL_InitTick>
  
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3778      	adds	r7, #120	; 0x78
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40021000 	.word	0x40021000
 800465c:	08009c6c 	.word	0x08009c6c
 8004660:	20000000 	.word	0x20000000
 8004664:	20000004 	.word	0x20000004

08004668 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004668:	b480      	push	{r7}
 800466a:	b08b      	sub	sp, #44	; 0x2c
 800466c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	2300      	movs	r3, #0
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	2300      	movs	r3, #0
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800467e:	2300      	movs	r3, #0
 8004680:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004682:	4b2a      	ldr	r3, [pc, #168]	; (800472c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f003 030c 	and.w	r3, r3, #12
 800468e:	2b04      	cmp	r3, #4
 8004690:	d002      	beq.n	8004698 <HAL_RCC_GetSysClockFreq+0x30>
 8004692:	2b08      	cmp	r3, #8
 8004694:	d003      	beq.n	800469e <HAL_RCC_GetSysClockFreq+0x36>
 8004696:	e03f      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004698:	4b25      	ldr	r3, [pc, #148]	; (8004730 <HAL_RCC_GetSysClockFreq+0xc8>)
 800469a:	623b      	str	r3, [r7, #32]
      break;
 800469c:	e03f      	b.n	800471e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80046a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80046a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	fa92 f2a2 	rbit	r2, r2
 80046b0:	607a      	str	r2, [r7, #4]
  return result;
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	fab2 f282 	clz	r2, r2
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	40d3      	lsrs	r3, r2
 80046bc:	4a1d      	ldr	r2, [pc, #116]	; (8004734 <HAL_RCC_GetSysClockFreq+0xcc>)
 80046be:	5cd3      	ldrb	r3, [r2, r3]
 80046c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80046c2:	4b1a      	ldr	r3, [pc, #104]	; (800472c <HAL_RCC_GetSysClockFreq+0xc4>)
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	220f      	movs	r2, #15
 80046cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	fa92 f2a2 	rbit	r2, r2
 80046d4:	60fa      	str	r2, [r7, #12]
  return result;
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	fab2 f282 	clz	r2, r2
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	40d3      	lsrs	r3, r2
 80046e0:	4a15      	ldr	r2, [pc, #84]	; (8004738 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046e2:	5cd3      	ldrb	r3, [r2, r3]
 80046e4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046f0:	4a0f      	ldr	r2, [pc, #60]	; (8004730 <HAL_RCC_GetSysClockFreq+0xc8>)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	fb02 f303 	mul.w	r3, r2, r3
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004700:	e007      	b.n	8004712 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004702:	4a0b      	ldr	r2, [pc, #44]	; (8004730 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	fbb2 f2f3 	udiv	r2, r2, r3
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	fb02 f303 	mul.w	r3, r2, r3
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	623b      	str	r3, [r7, #32]
      break;
 8004716:	e002      	b.n	800471e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_RCC_GetSysClockFreq+0xc8>)
 800471a:	623b      	str	r3, [r7, #32]
      break;
 800471c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800471e:	6a3b      	ldr	r3, [r7, #32]
}
 8004720:	4618      	mov	r0, r3
 8004722:	372c      	adds	r7, #44	; 0x2c
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	40021000 	.word	0x40021000
 8004730:	007a1200 	.word	0x007a1200
 8004734:	08009c84 	.word	0x08009c84
 8004738:	08009c94 	.word	0x08009c94

0800473c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004740:	4b03      	ldr	r3, [pc, #12]	; (8004750 <HAL_RCC_GetHCLKFreq+0x14>)
 8004742:	681b      	ldr	r3, [r3, #0]
}
 8004744:	4618      	mov	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	20000000 	.word	0x20000000

08004754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800475a:	f7ff ffef 	bl	800473c <HAL_RCC_GetHCLKFreq>
 800475e:	4601      	mov	r1, r0
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004768:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800476c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	fa92 f2a2 	rbit	r2, r2
 8004774:	603a      	str	r2, [r7, #0]
  return result;
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	fab2 f282 	clz	r2, r2
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	40d3      	lsrs	r3, r2
 8004780:	4a04      	ldr	r2, [pc, #16]	; (8004794 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004782:	5cd3      	ldrb	r3, [r2, r3]
 8004784:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40021000 	.word	0x40021000
 8004794:	08009c7c 	.word	0x08009c7c

08004798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800479e:	f7ff ffcd 	bl	800473c <HAL_RCC_GetHCLKFreq>
 80047a2:	4601      	mov	r1, r0
 80047a4:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80047ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80047b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	fa92 f2a2 	rbit	r2, r2
 80047b8:	603a      	str	r2, [r7, #0]
  return result;
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	fab2 f282 	clz	r2, r2
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	40d3      	lsrs	r3, r2
 80047c4:	4a04      	ldr	r2, [pc, #16]	; (80047d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80047c6:	5cd3      	ldrb	r3, [r2, r3]
 80047c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40021000 	.word	0x40021000
 80047d8:	08009c7c 	.word	0x08009c7c

080047dc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	220f      	movs	r2, #15
 80047ea:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047ec:	4b12      	ldr	r3, [pc, #72]	; (8004838 <HAL_RCC_GetClockConfig+0x5c>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 0203 	and.w	r2, r3, #3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80047f8:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <HAL_RCC_GetClockConfig+0x5c>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <HAL_RCC_GetClockConfig+0x5c>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004810:	4b09      	ldr	r3, [pc, #36]	; (8004838 <HAL_RCC_GetClockConfig+0x5c>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	08db      	lsrs	r3, r3, #3
 8004816:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800481e:	4b07      	ldr	r3, [pc, #28]	; (800483c <HAL_RCC_GetClockConfig+0x60>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0207 	and.w	r2, r3, #7
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	601a      	str	r2, [r3, #0]
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000
 800483c:	40022000 	.word	0x40022000

08004840 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b092      	sub	sp, #72	; 0x48
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004850:	2300      	movs	r3, #0
 8004852:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 80d4 	beq.w	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004864:	4b4e      	ldr	r3, [pc, #312]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10e      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004870:	4b4b      	ldr	r3, [pc, #300]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	4a4a      	ldr	r2, [pc, #296]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800487a:	61d3      	str	r3, [r2, #28]
 800487c:	4b48      	ldr	r3, [pc, #288]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004888:	2301      	movs	r3, #1
 800488a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488e:	4b45      	ldr	r3, [pc, #276]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d118      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800489a:	4b42      	ldr	r3, [pc, #264]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a41      	ldr	r2, [pc, #260]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048a6:	f7fe f83b 	bl	8002920 <HAL_GetTick>
 80048aa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ac:	e008      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ae:	f7fe f837 	bl	8002920 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b64      	cmp	r3, #100	; 0x64
 80048ba:	d901      	bls.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e1d6      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c0:	4b38      	ldr	r3, [pc, #224]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0f0      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048cc:	4b34      	ldr	r3, [pc, #208]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 8084 	beq.w	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d07c      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048ec:	4b2c      	ldr	r3, [pc, #176]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	fa93 f3a3 	rbit	r3, r3
 8004902:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004906:	fab3 f383 	clz	r3, r3
 800490a:	b2db      	uxtb	r3, r3
 800490c:	461a      	mov	r2, r3
 800490e:	4b26      	ldr	r3, [pc, #152]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	461a      	mov	r2, r3
 8004916:	2301      	movs	r3, #1
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800491e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	fa93 f3a3 	rbit	r3, r3
 8004926:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800492a:	fab3 f383 	clz	r3, r3
 800492e:	b2db      	uxtb	r3, r3
 8004930:	461a      	mov	r2, r3
 8004932:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	461a      	mov	r2, r3
 800493a:	2300      	movs	r3, #0
 800493c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800493e:	4a18      	ldr	r2, [pc, #96]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004942:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d04b      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494e:	f7fd ffe7 	bl	8002920 <HAL_GetTick>
 8004952:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004954:	e00a      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004956:	f7fd ffe3 	bl	8002920 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	; 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d901      	bls.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e180      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800496c:	2302      	movs	r3, #2
 800496e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	fa93 f3a3 	rbit	r3, r3
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
 8004978:	2302      	movs	r3, #2
 800497a:	623b      	str	r3, [r7, #32]
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	fa93 f3a3 	rbit	r3, r3
 8004982:	61fb      	str	r3, [r7, #28]
  return result;
 8004984:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004986:	fab3 f383 	clz	r3, r3
 800498a:	b2db      	uxtb	r3, r3
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f043 0302 	orr.w	r3, r3, #2
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d108      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800499a:	4b01      	ldr	r3, [pc, #4]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	e00d      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40007000 	.word	0x40007000
 80049a8:	10908100 	.word	0x10908100
 80049ac:	2302      	movs	r3, #2
 80049ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	fa93 f3a3 	rbit	r3, r3
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	4b9a      	ldr	r3, [pc, #616]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	2202      	movs	r2, #2
 80049be:	613a      	str	r2, [r7, #16]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	fa92 f2a2 	rbit	r2, r2
 80049c6:	60fa      	str	r2, [r7, #12]
  return result;
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	fab2 f282 	clz	r2, r2
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	f002 021f 	and.w	r2, r2, #31
 80049da:	2101      	movs	r1, #1
 80049dc:	fa01 f202 	lsl.w	r2, r1, r2
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0b7      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80049e6:	4b8f      	ldr	r3, [pc, #572]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	498c      	ldr	r1, [pc, #560]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d105      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a00:	4b88      	ldr	r3, [pc, #544]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	4a87      	ldr	r2, [pc, #540]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d008      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a18:	4b82      	ldr	r3, [pc, #520]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1c:	f023 0203 	bic.w	r2, r3, #3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	497f      	ldr	r1, [pc, #508]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d008      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a36:	4b7b      	ldr	r3, [pc, #492]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	4978      	ldr	r1, [pc, #480]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a54:	4b73      	ldr	r3, [pc, #460]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	4970      	ldr	r1, [pc, #448]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d008      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a72:	4b6c      	ldr	r3, [pc, #432]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	f023 0210 	bic.w	r2, r3, #16
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	4969      	ldr	r1, [pc, #420]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004a90:	4b64      	ldr	r3, [pc, #400]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9c:	4961      	ldr	r1, [pc, #388]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d008      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004aae:	4b5d      	ldr	r3, [pc, #372]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	f023 0220 	bic.w	r2, r3, #32
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	495a      	ldr	r1, [pc, #360]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d008      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004acc:	4b55      	ldr	r3, [pc, #340]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	4952      	ldr	r1, [pc, #328]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d008      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004aea:	4b4e      	ldr	r3, [pc, #312]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	494b      	ldr	r1, [pc, #300]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b08:	4b46      	ldr	r3, [pc, #280]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	4943      	ldr	r1, [pc, #268]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d008      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b26:	4b3f      	ldr	r3, [pc, #252]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	493c      	ldr	r1, [pc, #240]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d008      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b44:	4b37      	ldr	r3, [pc, #220]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	4934      	ldr	r1, [pc, #208]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d008      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004b62:	4b30      	ldr	r3, [pc, #192]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b66:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	492d      	ldr	r1, [pc, #180]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b80:	4b28      	ldr	r3, [pc, #160]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8c:	4925      	ldr	r1, [pc, #148]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d008      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004b9e:	4b21      	ldr	r3, [pc, #132]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	491e      	ldr	r1, [pc, #120]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d008      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004bbc:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc8:	4916      	ldr	r1, [pc, #88]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d008      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004bda:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be6:	490f      	ldr	r1, [pc, #60]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004bf8:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c04:	4907      	ldr	r1, [pc, #28]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00c      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004c16:	4b03      	ldr	r3, [pc, #12]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	e002      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004c22:	bf00      	nop
 8004c24:	40021000 	.word	0x40021000
 8004c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c2a:	4913      	ldr	r1, [pc, #76]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004c3c:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c48:	490b      	ldr	r1, [pc, #44]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d008      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004c5a:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c66:	4904      	ldr	r1, [pc, #16]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3748      	adds	r7, #72	; 0x48
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000

08004c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e049      	b.n	8004d22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f841 	bl	8004d2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f000 fb42 	bl	8005344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
	...

08004d40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d001      	beq.n	8004d58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e04f      	b.n	8004df8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a23      	ldr	r2, [pc, #140]	; (8004e04 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d01d      	beq.n	8004db6 <HAL_TIM_Base_Start_IT+0x76>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d82:	d018      	beq.n	8004db6 <HAL_TIM_Base_Start_IT+0x76>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1f      	ldr	r2, [pc, #124]	; (8004e08 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d013      	beq.n	8004db6 <HAL_TIM_Base_Start_IT+0x76>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a1e      	ldr	r2, [pc, #120]	; (8004e0c <HAL_TIM_Base_Start_IT+0xcc>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00e      	beq.n	8004db6 <HAL_TIM_Base_Start_IT+0x76>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a1c      	ldr	r2, [pc, #112]	; (8004e10 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d009      	beq.n	8004db6 <HAL_TIM_Base_Start_IT+0x76>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a1b      	ldr	r2, [pc, #108]	; (8004e14 <HAL_TIM_Base_Start_IT+0xd4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d004      	beq.n	8004db6 <HAL_TIM_Base_Start_IT+0x76>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a19      	ldr	r2, [pc, #100]	; (8004e18 <HAL_TIM_Base_Start_IT+0xd8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d115      	bne.n	8004de2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	4b17      	ldr	r3, [pc, #92]	; (8004e1c <HAL_TIM_Base_Start_IT+0xdc>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b06      	cmp	r3, #6
 8004dc6:	d015      	beq.n	8004df4 <HAL_TIM_Base_Start_IT+0xb4>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dce:	d011      	beq.n	8004df4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de0:	e008      	b.n	8004df4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f042 0201 	orr.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	e000      	b.n	8004df6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	40012c00 	.word	0x40012c00
 8004e08:	40000400 	.word	0x40000400
 8004e0c:	40000800 	.word	0x40000800
 8004e10:	40013400 	.word	0x40013400
 8004e14:	40014000 	.word	0x40014000
 8004e18:	40015000 	.word	0x40015000
 8004e1c:	00010007 	.word	0x00010007

08004e20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e097      	b.n	8004f64 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d106      	bne.n	8004e4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7fd fb35 	bl	80024b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2202      	movs	r2, #2
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004e64:	f023 0307 	bic.w	r3, r3, #7
 8004e68:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3304      	adds	r3, #4
 8004e72:	4619      	mov	r1, r3
 8004e74:	4610      	mov	r0, r2
 8004e76:	f000 fa65 	bl	8005344 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea2:	f023 0303 	bic.w	r3, r3, #3
 8004ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004ec0:	f023 030c 	bic.w	r3, r3, #12
 8004ec4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ecc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ed0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	4313      	orrs	r3, r2
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	011a      	lsls	r2, r3, #4
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	031b      	lsls	r3, r3, #12
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004efe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004f06:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	4313      	orrs	r3, r2
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f7c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f84:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f8c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f94:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d110      	bne.n	8004fbe <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d102      	bne.n	8004fa8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fa2:	7b7b      	ldrb	r3, [r7, #13]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d001      	beq.n	8004fac <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e089      	b.n	80050c0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fbc:	e031      	b.n	8005022 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d110      	bne.n	8004fe6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fc4:	7bbb      	ldrb	r3, [r7, #14]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d102      	bne.n	8004fd0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fca:	7b3b      	ldrb	r3, [r7, #12]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d001      	beq.n	8004fd4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e075      	b.n	80050c0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fe4:	e01d      	b.n	8005022 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d108      	bne.n	8004ffe <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fec:	7bbb      	ldrb	r3, [r7, #14]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d105      	bne.n	8004ffe <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ff2:	7b7b      	ldrb	r3, [r7, #13]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d102      	bne.n	8004ffe <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ff8:	7b3b      	ldrb	r3, [r7, #12]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d001      	beq.n	8005002 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e05e      	b.n	80050c0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2202      	movs	r2, #2
 8005006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2202      	movs	r2, #2
 800500e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2202      	movs	r2, #2
 800501e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b04      	cmp	r3, #4
 800502c:	d010      	beq.n	8005050 <HAL_TIM_Encoder_Start_IT+0xe4>
 800502e:	e01f      	b.n	8005070 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2201      	movs	r2, #1
 8005036:	2100      	movs	r1, #0
 8005038:	4618      	mov	r0, r3
 800503a:	f000 fa21 	bl	8005480 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0202 	orr.w	r2, r2, #2
 800504c:	60da      	str	r2, [r3, #12]
      break;
 800504e:	e02e      	b.n	80050ae <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2201      	movs	r2, #1
 8005056:	2104      	movs	r1, #4
 8005058:	4618      	mov	r0, r3
 800505a:	f000 fa11 	bl	8005480 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0204 	orr.w	r2, r2, #4
 800506c:	60da      	str	r2, [r3, #12]
      break;
 800506e:	e01e      	b.n	80050ae <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2201      	movs	r2, #1
 8005076:	2100      	movs	r1, #0
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fa01 	bl	8005480 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2201      	movs	r2, #1
 8005084:	2104      	movs	r1, #4
 8005086:	4618      	mov	r0, r3
 8005088:	f000 f9fa 	bl	8005480 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0202 	orr.w	r2, r2, #2
 800509a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0204 	orr.w	r2, r2, #4
 80050aa:	60da      	str	r2, [r3, #12]
      break;
 80050ac:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f042 0201 	orr.w	r2, r2, #1
 80050bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d122      	bne.n	8005124 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d11b      	bne.n	8005124 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0202 	mvn.w	r2, #2
 80050f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fb fa42 	bl	8000594 <HAL_TIM_IC_CaptureCallback>
 8005110:	e005      	b.n	800511e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f8f7 	bl	8005306 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f8fe 	bl	800531a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b04      	cmp	r3, #4
 8005130:	d122      	bne.n	8005178 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b04      	cmp	r3, #4
 800513e:	d11b      	bne.n	8005178 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0204 	mvn.w	r2, #4
 8005148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2202      	movs	r2, #2
 800514e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7fb fa18 	bl	8000594 <HAL_TIM_IC_CaptureCallback>
 8005164:	e005      	b.n	8005172 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f8cd 	bl	8005306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f8d4 	bl	800531a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b08      	cmp	r3, #8
 8005184:	d122      	bne.n	80051cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	2b08      	cmp	r3, #8
 8005192:	d11b      	bne.n	80051cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0208 	mvn.w	r2, #8
 800519c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2204      	movs	r2, #4
 80051a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fb f9ee 	bl	8000594 <HAL_TIM_IC_CaptureCallback>
 80051b8:	e005      	b.n	80051c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f8a3 	bl	8005306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f8aa 	bl	800531a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	2b10      	cmp	r3, #16
 80051d8:	d122      	bne.n	8005220 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b10      	cmp	r3, #16
 80051e6:	d11b      	bne.n	8005220 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0210 	mvn.w	r2, #16
 80051f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2208      	movs	r2, #8
 80051f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fb f9c4 	bl	8000594 <HAL_TIM_IC_CaptureCallback>
 800520c:	e005      	b.n	800521a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f879 	bl	8005306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f880 	bl	800531a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b01      	cmp	r3, #1
 800522c:	d10e      	bne.n	800524c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b01      	cmp	r3, #1
 800523a:	d107      	bne.n	800524c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0201 	mvn.w	r2, #1
 8005244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fb f9de 	bl	8000608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005256:	2b80      	cmp	r3, #128	; 0x80
 8005258:	d10e      	bne.n	8005278 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005264:	2b80      	cmp	r3, #128	; 0x80
 8005266:	d107      	bne.n	8005278 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f9c0 	bl	80055f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005286:	d10e      	bne.n	80052a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005292:	2b80      	cmp	r3, #128	; 0x80
 8005294:	d107      	bne.n	80052a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800529e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f9b3 	bl	800560c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d10e      	bne.n	80052d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052be:	2b40      	cmp	r3, #64	; 0x40
 80052c0:	d107      	bne.n	80052d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f82e 	bl	800532e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	f003 0320 	and.w	r3, r3, #32
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d10e      	bne.n	80052fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b20      	cmp	r3, #32
 80052ec:	d107      	bne.n	80052fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f06f 0220 	mvn.w	r2, #32
 80052f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f973 	bl	80055e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052fe:	bf00      	nop
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a42      	ldr	r2, [pc, #264]	; (8005460 <TIM_Base_SetConfig+0x11c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d013      	beq.n	8005384 <TIM_Base_SetConfig+0x40>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005362:	d00f      	beq.n	8005384 <TIM_Base_SetConfig+0x40>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a3f      	ldr	r2, [pc, #252]	; (8005464 <TIM_Base_SetConfig+0x120>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00b      	beq.n	8005384 <TIM_Base_SetConfig+0x40>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a3e      	ldr	r2, [pc, #248]	; (8005468 <TIM_Base_SetConfig+0x124>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d007      	beq.n	8005384 <TIM_Base_SetConfig+0x40>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a3d      	ldr	r2, [pc, #244]	; (800546c <TIM_Base_SetConfig+0x128>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d003      	beq.n	8005384 <TIM_Base_SetConfig+0x40>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a3c      	ldr	r2, [pc, #240]	; (8005470 <TIM_Base_SetConfig+0x12c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d108      	bne.n	8005396 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a31      	ldr	r2, [pc, #196]	; (8005460 <TIM_Base_SetConfig+0x11c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d01f      	beq.n	80053de <TIM_Base_SetConfig+0x9a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a4:	d01b      	beq.n	80053de <TIM_Base_SetConfig+0x9a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2e      	ldr	r2, [pc, #184]	; (8005464 <TIM_Base_SetConfig+0x120>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d017      	beq.n	80053de <TIM_Base_SetConfig+0x9a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2d      	ldr	r2, [pc, #180]	; (8005468 <TIM_Base_SetConfig+0x124>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d013      	beq.n	80053de <TIM_Base_SetConfig+0x9a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a2c      	ldr	r2, [pc, #176]	; (800546c <TIM_Base_SetConfig+0x128>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00f      	beq.n	80053de <TIM_Base_SetConfig+0x9a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a2c      	ldr	r2, [pc, #176]	; (8005474 <TIM_Base_SetConfig+0x130>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00b      	beq.n	80053de <TIM_Base_SetConfig+0x9a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a2b      	ldr	r2, [pc, #172]	; (8005478 <TIM_Base_SetConfig+0x134>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d007      	beq.n	80053de <TIM_Base_SetConfig+0x9a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a2a      	ldr	r2, [pc, #168]	; (800547c <TIM_Base_SetConfig+0x138>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d003      	beq.n	80053de <TIM_Base_SetConfig+0x9a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a25      	ldr	r2, [pc, #148]	; (8005470 <TIM_Base_SetConfig+0x12c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d108      	bne.n	80053f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a12      	ldr	r2, [pc, #72]	; (8005460 <TIM_Base_SetConfig+0x11c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d013      	beq.n	8005444 <TIM_Base_SetConfig+0x100>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a13      	ldr	r2, [pc, #76]	; (800546c <TIM_Base_SetConfig+0x128>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00f      	beq.n	8005444 <TIM_Base_SetConfig+0x100>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a13      	ldr	r2, [pc, #76]	; (8005474 <TIM_Base_SetConfig+0x130>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00b      	beq.n	8005444 <TIM_Base_SetConfig+0x100>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a12      	ldr	r2, [pc, #72]	; (8005478 <TIM_Base_SetConfig+0x134>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d007      	beq.n	8005444 <TIM_Base_SetConfig+0x100>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a11      	ldr	r2, [pc, #68]	; (800547c <TIM_Base_SetConfig+0x138>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d003      	beq.n	8005444 <TIM_Base_SetConfig+0x100>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a0c      	ldr	r2, [pc, #48]	; (8005470 <TIM_Base_SetConfig+0x12c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d103      	bne.n	800544c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	615a      	str	r2, [r3, #20]
}
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40012c00 	.word	0x40012c00
 8005464:	40000400 	.word	0x40000400
 8005468:	40000800 	.word	0x40000800
 800546c:	40013400 	.word	0x40013400
 8005470:	40015000 	.word	0x40015000
 8005474:	40014000 	.word	0x40014000
 8005478:	40014400 	.word	0x40014400
 800547c:	40014800 	.word	0x40014800

08005480 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f003 031f 	and.w	r3, r3, #31
 8005492:	2201      	movs	r2, #1
 8005494:	fa02 f303 	lsl.w	r3, r2, r3
 8005498:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a1a      	ldr	r2, [r3, #32]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	43db      	mvns	r3, r3
 80054a2:	401a      	ands	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a1a      	ldr	r2, [r3, #32]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f003 031f 	and.w	r3, r3, #31
 80054b2:	6879      	ldr	r1, [r7, #4]
 80054b4:	fa01 f303 	lsl.w	r3, r1, r3
 80054b8:	431a      	orrs	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	621a      	str	r2, [r3, #32]
}
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
	...

080054cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e06d      	b.n	80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a30      	ldr	r2, [pc, #192]	; (80055cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d009      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a2f      	ldr	r2, [pc, #188]	; (80055d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d004      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a2d      	ldr	r2, [pc, #180]	; (80055d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d108      	bne.n	8005534 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005528:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a1e      	ldr	r2, [pc, #120]	; (80055cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d01d      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005560:	d018      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a1c      	ldr	r2, [pc, #112]	; (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d013      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a1a      	ldr	r2, [pc, #104]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00e      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a15      	ldr	r2, [pc, #84]	; (80055d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d009      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a16      	ldr	r2, [pc, #88]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a11      	ldr	r2, [pc, #68]	; (80055d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d10c      	bne.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800559a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	40012c00 	.word	0x40012c00
 80055d0:	40013400 	.word	0x40013400
 80055d4:	40015000 	.word	0x40015000
 80055d8:	40000400 	.word	0x40000400
 80055dc:	40000800 	.word	0x40000800
 80055e0:	40014000 	.word	0x40014000

080055e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e040      	b.n	80056b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fc ff78 	bl	8002538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2224      	movs	r2, #36	; 0x24
 800564c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0201 	bic.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fc12 	bl	8005e88 <UART_SetConfig>
 8005664:	4603      	mov	r3, r0
 8005666:	2b01      	cmp	r3, #1
 8005668:	d101      	bne.n	800566e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e022      	b.n	80056b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fddc 	bl	8006234 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800568a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800569a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0201 	orr.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fe63 	bl	8006378 <UART_CheckIdleState>
 80056b2:	4603      	mov	r3, r0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08a      	sub	sp, #40	; 0x28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	4613      	mov	r3, r2
 80056c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056ce:	2b20      	cmp	r3, #32
 80056d0:	d178      	bne.n	80057c4 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <HAL_UART_Transmit_DMA+0x22>
 80056d8:	88fb      	ldrh	r3, [r7, #6]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e071      	b.n	80057c6 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_UART_Transmit_DMA+0x34>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e06a      	b.n	80057c6 <HAL_UART_Transmit_DMA+0x10a>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	88fa      	ldrh	r2, [r7, #6]
 8005702:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	88fa      	ldrh	r2, [r7, #6]
 800570a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2221      	movs	r2, #33	; 0x21
 800571a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005720:	2b00      	cmp	r3, #0
 8005722:	d02b      	beq.n	800577c <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005728:	4a29      	ldr	r2, [pc, #164]	; (80057d0 <HAL_UART_Transmit_DMA+0x114>)
 800572a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005730:	4a28      	ldr	r2, [pc, #160]	; (80057d4 <HAL_UART_Transmit_DMA+0x118>)
 8005732:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005738:	4a27      	ldr	r2, [pc, #156]	; (80057d8 <HAL_UART_Transmit_DMA+0x11c>)
 800573a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005740:	2200      	movs	r2, #0
 8005742:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574c:	4619      	mov	r1, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3328      	adds	r3, #40	; 0x28
 8005754:	461a      	mov	r2, r3
 8005756:	88fb      	ldrh	r3, [r7, #6]
 8005758:	f7fd fa17 	bl	8002b8a <HAL_DMA_Start_IT>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00c      	beq.n	800577c <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2210      	movs	r2, #16
 8005766:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2220      	movs	r2, #32
 8005776:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e024      	b.n	80057c6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2240      	movs	r2, #64	; 0x40
 8005782:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3308      	adds	r3, #8
 8005792:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	613b      	str	r3, [r7, #16]
   return(result);
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a2:	627b      	str	r3, [r7, #36]	; 0x24
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3308      	adds	r3, #8
 80057aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ac:	623a      	str	r2, [r7, #32]
 80057ae:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	69f9      	ldr	r1, [r7, #28]
 80057b2:	6a3a      	ldr	r2, [r7, #32]
 80057b4:	e841 2300 	strex	r3, r2, [r1]
 80057b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e5      	bne.n	800578c <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	e000      	b.n	80057c6 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80057c4:	2302      	movs	r3, #2
  }
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3728      	adds	r7, #40	; 0x28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	080067eb 	.word	0x080067eb
 80057d4:	0800687f 	.word	0x0800687f
 80057d8:	080069f1 	.word	0x080069f1

080057dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	; 0x28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	4613      	mov	r3, r2
 80057e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057ee:	2b20      	cmp	r3, #32
 80057f0:	d13d      	bne.n	800586e <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <HAL_UART_Receive_DMA+0x22>
 80057f8:	88fb      	ldrh	r3, [r7, #6]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e036      	b.n	8005870 <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <HAL_UART_Receive_DMA+0x34>
 800580c:	2302      	movs	r3, #2
 800580e:	e02f      	b.n	8005870 <HAL_UART_Receive_DMA+0x94>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d018      	beq.n	800585e <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	e853 3f00 	ldrex	r3, [r3]
 8005838:	613b      	str	r3, [r7, #16]
   return(result);
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	623b      	str	r3, [r7, #32]
 800584c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	69f9      	ldr	r1, [r7, #28]
 8005850:	6a3a      	ldr	r2, [r7, #32]
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	61bb      	str	r3, [r7, #24]
   return(result);
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e6      	bne.n	800582c <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800585e:	88fb      	ldrh	r3, [r7, #6]
 8005860:	461a      	mov	r2, r3
 8005862:	68b9      	ldr	r1, [r7, #8]
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fe95 	bl	8006594 <UART_Start_Receive_DMA>
 800586a:	4603      	mov	r3, r0
 800586c:	e000      	b.n	8005870 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 800586e:	2302      	movs	r3, #2
  }
}
 8005870:	4618      	mov	r0, r3
 8005872:	3728      	adds	r7, #40	; 0x28
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b0ba      	sub	sp, #232	; 0xe8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800589e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80058a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80058a6:	4013      	ands	r3, r2
 80058a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80058ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d115      	bne.n	80058e0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b8:	f003 0320 	and.w	r3, r3, #32
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00f      	beq.n	80058e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d009      	beq.n	80058e0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 82a3 	beq.w	8005e1c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	4798      	blx	r3
      }
      return;
 80058de:	e29d      	b.n	8005e1c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80058e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 8117 	beq.w	8005b18 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80058ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d106      	bne.n	8005904 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80058f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80058fa:	4b85      	ldr	r3, [pc, #532]	; (8005b10 <HAL_UART_IRQHandler+0x298>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 810a 	beq.w	8005b18 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d011      	beq.n	8005934 <HAL_UART_IRQHandler+0xbc>
 8005910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00b      	beq.n	8005934 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2201      	movs	r2, #1
 8005922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800592a:	f043 0201 	orr.w	r2, r3, #1
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d011      	beq.n	8005964 <HAL_UART_IRQHandler+0xec>
 8005940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00b      	beq.n	8005964 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2202      	movs	r2, #2
 8005952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800595a:	f043 0204 	orr.w	r2, r3, #4
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d011      	beq.n	8005994 <HAL_UART_IRQHandler+0x11c>
 8005970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00b      	beq.n	8005994 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2204      	movs	r2, #4
 8005982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800598a:	f043 0202 	orr.w	r2, r3, #2
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b00      	cmp	r3, #0
 800599e:	d017      	beq.n	80059d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a4:	f003 0320 	and.w	r3, r3, #32
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00b      	beq.n	80059d0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2208      	movs	r2, #8
 80059be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059c6:	f043 0208 	orr.w	r2, r3, #8
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d012      	beq.n	8005a02 <HAL_UART_IRQHandler+0x18a>
 80059dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00c      	beq.n	8005a02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059f8:	f043 0220 	orr.w	r2, r3, #32
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 8209 	beq.w	8005e20 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00d      	beq.n	8005a36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4a:	2b40      	cmp	r3, #64	; 0x40
 8005a4c:	d005      	beq.n	8005a5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d04f      	beq.n	8005afa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fe62 	bl	8006724 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6a:	2b40      	cmp	r3, #64	; 0x40
 8005a6c:	d141      	bne.n	8005af2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3308      	adds	r3, #8
 8005a74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3308      	adds	r3, #8
 8005a96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005aa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005aaa:	e841 2300 	strex	r3, r2, [r1]
 8005aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ab2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1d9      	bne.n	8005a6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d013      	beq.n	8005aea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac6:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <HAL_UART_IRQHandler+0x29c>)
 8005ac8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fd f8f3 	bl	8002cba <HAL_DMA_Abort_IT>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d017      	beq.n	8005b0a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae8:	e00f      	b.n	8005b0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f9b6 	bl	8005e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af0:	e00b      	b.n	8005b0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f9b2 	bl	8005e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af8:	e007      	b.n	8005b0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f9ae 	bl	8005e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005b08:	e18a      	b.n	8005e20 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0a:	bf00      	nop
    return;
 8005b0c:	e188      	b.n	8005e20 <HAL_UART_IRQHandler+0x5a8>
 8005b0e:	bf00      	nop
 8005b10:	04000120 	.word	0x04000120
 8005b14:	08006a6d 	.word	0x08006a6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	f040 8143 	bne.w	8005da8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b26:	f003 0310 	and.w	r3, r3, #16
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 813c 	beq.w	8005da8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 8135 	beq.w	8005da8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2210      	movs	r2, #16
 8005b44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b50:	2b40      	cmp	r3, #64	; 0x40
 8005b52:	f040 80b1 	bne.w	8005cb8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b62:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 815c 	beq.w	8005e24 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b76:	429a      	cmp	r2, r3
 8005b78:	f080 8154 	bcs.w	8005e24 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	f000 8085 	beq.w	8005c9c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b9e:	e853 3f00 	ldrex	r3, [r3]
 8005ba2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005baa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bc0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bc8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bcc:	e841 2300 	strex	r3, r2, [r1]
 8005bd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1da      	bne.n	8005b92 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3308      	adds	r3, #8
 8005be2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bee:	f023 0301 	bic.w	r3, r3, #1
 8005bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c00:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c04:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c06:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c0c:	e841 2300 	strex	r3, r2, [r1]
 8005c10:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1e1      	bne.n	8005bdc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3308      	adds	r3, #8
 8005c1e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c22:	e853 3f00 	ldrex	r3, [r3]
 8005c26:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3308      	adds	r3, #8
 8005c38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c3c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c44:	e841 2300 	strex	r3, r2, [r1]
 8005c48:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e3      	bne.n	8005c18 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c6c:	f023 0310 	bic.w	r3, r3, #16
 8005c70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c80:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e4      	bne.n	8005c5c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fc ffd6 	bl	8002c48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	4619      	mov	r1, r3
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f8dd 	bl	8005e70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cb6:	e0b5      	b.n	8005e24 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 80a7 	beq.w	8005e28 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005cda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 80a2 	beq.w	8005e28 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cf8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	461a      	mov	r2, r3
 8005d02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d06:	647b      	str	r3, [r7, #68]	; 0x44
 8005d08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e4      	bne.n	8005ce4 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3308      	adds	r3, #8
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	623b      	str	r3, [r7, #32]
   return(result);
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	f023 0301 	bic.w	r3, r3, #1
 8005d30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3308      	adds	r3, #8
 8005d3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d3e:	633a      	str	r2, [r7, #48]	; 0x30
 8005d40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e3      	bne.n	8005d1a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f023 0310 	bic.w	r3, r3, #16
 8005d78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d86:	61fb      	str	r3, [r7, #28]
 8005d88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8a:	69b9      	ldr	r1, [r7, #24]
 8005d8c:	69fa      	ldr	r2, [r7, #28]
 8005d8e:	e841 2300 	strex	r3, r2, [r1]
 8005d92:	617b      	str	r3, [r7, #20]
   return(result);
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1e4      	bne.n	8005d64 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d9e:	4619      	mov	r1, r3
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f865 	bl	8005e70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005da6:	e03f      	b.n	8005e28 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00e      	beq.n	8005dd2 <HAL_UART_IRQHandler+0x55a>
 8005db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d008      	beq.n	8005dd2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005dc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fe8e 	bl	8006aec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dd0:	e02d      	b.n	8005e2e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00e      	beq.n	8005dfc <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d008      	beq.n	8005dfc <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d01c      	beq.n	8005e2c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	4798      	blx	r3
    }
    return;
 8005dfa:	e017      	b.n	8005e2c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d012      	beq.n	8005e2e <HAL_UART_IRQHandler+0x5b6>
 8005e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00c      	beq.n	8005e2e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fe3f 	bl	8006a98 <UART_EndTransmit_IT>
    return;
 8005e1a:	e008      	b.n	8005e2e <HAL_UART_IRQHandler+0x5b6>
      return;
 8005e1c:	bf00      	nop
 8005e1e:	e006      	b.n	8005e2e <HAL_UART_IRQHandler+0x5b6>
    return;
 8005e20:	bf00      	nop
 8005e22:	e004      	b.n	8005e2e <HAL_UART_IRQHandler+0x5b6>
      return;
 8005e24:	bf00      	nop
 8005e26:	e002      	b.n	8005e2e <HAL_UART_IRQHandler+0x5b6>
      return;
 8005e28:	bf00      	nop
 8005e2a:	e000      	b.n	8005e2e <HAL_UART_IRQHandler+0x5b6>
    return;
 8005e2c:	bf00      	nop
  }

}
 8005e2e:	37e8      	adds	r7, #232	; 0xe8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e90:	2300      	movs	r3, #0
 8005e92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4b92      	ldr	r3, [pc, #584]	; (80060fc <UART_SetConfig+0x274>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6812      	ldr	r2, [r2, #0]
 8005eba:	6979      	ldr	r1, [r7, #20]
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a80      	ldr	r2, [pc, #512]	; (8006100 <UART_SetConfig+0x278>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d120      	bne.n	8005f46 <UART_SetConfig+0xbe>
 8005f04:	4b7f      	ldr	r3, [pc, #508]	; (8006104 <UART_SetConfig+0x27c>)
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	f003 0303 	and.w	r3, r3, #3
 8005f0c:	2b03      	cmp	r3, #3
 8005f0e:	d817      	bhi.n	8005f40 <UART_SetConfig+0xb8>
 8005f10:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <UART_SetConfig+0x90>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005f29 	.word	0x08005f29
 8005f1c:	08005f35 	.word	0x08005f35
 8005f20:	08005f3b 	.word	0x08005f3b
 8005f24:	08005f2f 	.word	0x08005f2f
 8005f28:	2301      	movs	r3, #1
 8005f2a:	77fb      	strb	r3, [r7, #31]
 8005f2c:	e0b5      	b.n	800609a <UART_SetConfig+0x212>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	77fb      	strb	r3, [r7, #31]
 8005f32:	e0b2      	b.n	800609a <UART_SetConfig+0x212>
 8005f34:	2304      	movs	r3, #4
 8005f36:	77fb      	strb	r3, [r7, #31]
 8005f38:	e0af      	b.n	800609a <UART_SetConfig+0x212>
 8005f3a:	2308      	movs	r3, #8
 8005f3c:	77fb      	strb	r3, [r7, #31]
 8005f3e:	e0ac      	b.n	800609a <UART_SetConfig+0x212>
 8005f40:	2310      	movs	r3, #16
 8005f42:	77fb      	strb	r3, [r7, #31]
 8005f44:	e0a9      	b.n	800609a <UART_SetConfig+0x212>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a6f      	ldr	r2, [pc, #444]	; (8006108 <UART_SetConfig+0x280>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d124      	bne.n	8005f9a <UART_SetConfig+0x112>
 8005f50:	4b6c      	ldr	r3, [pc, #432]	; (8006104 <UART_SetConfig+0x27c>)
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f5c:	d011      	beq.n	8005f82 <UART_SetConfig+0xfa>
 8005f5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f62:	d817      	bhi.n	8005f94 <UART_SetConfig+0x10c>
 8005f64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f68:	d011      	beq.n	8005f8e <UART_SetConfig+0x106>
 8005f6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f6e:	d811      	bhi.n	8005f94 <UART_SetConfig+0x10c>
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <UART_SetConfig+0xf4>
 8005f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f78:	d006      	beq.n	8005f88 <UART_SetConfig+0x100>
 8005f7a:	e00b      	b.n	8005f94 <UART_SetConfig+0x10c>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	77fb      	strb	r3, [r7, #31]
 8005f80:	e08b      	b.n	800609a <UART_SetConfig+0x212>
 8005f82:	2302      	movs	r3, #2
 8005f84:	77fb      	strb	r3, [r7, #31]
 8005f86:	e088      	b.n	800609a <UART_SetConfig+0x212>
 8005f88:	2304      	movs	r3, #4
 8005f8a:	77fb      	strb	r3, [r7, #31]
 8005f8c:	e085      	b.n	800609a <UART_SetConfig+0x212>
 8005f8e:	2308      	movs	r3, #8
 8005f90:	77fb      	strb	r3, [r7, #31]
 8005f92:	e082      	b.n	800609a <UART_SetConfig+0x212>
 8005f94:	2310      	movs	r3, #16
 8005f96:	77fb      	strb	r3, [r7, #31]
 8005f98:	e07f      	b.n	800609a <UART_SetConfig+0x212>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a5b      	ldr	r2, [pc, #364]	; (800610c <UART_SetConfig+0x284>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d124      	bne.n	8005fee <UART_SetConfig+0x166>
 8005fa4:	4b57      	ldr	r3, [pc, #348]	; (8006104 <UART_SetConfig+0x27c>)
 8005fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005fac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005fb0:	d011      	beq.n	8005fd6 <UART_SetConfig+0x14e>
 8005fb2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005fb6:	d817      	bhi.n	8005fe8 <UART_SetConfig+0x160>
 8005fb8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005fbc:	d011      	beq.n	8005fe2 <UART_SetConfig+0x15a>
 8005fbe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005fc2:	d811      	bhi.n	8005fe8 <UART_SetConfig+0x160>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <UART_SetConfig+0x148>
 8005fc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fcc:	d006      	beq.n	8005fdc <UART_SetConfig+0x154>
 8005fce:	e00b      	b.n	8005fe8 <UART_SetConfig+0x160>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	77fb      	strb	r3, [r7, #31]
 8005fd4:	e061      	b.n	800609a <UART_SetConfig+0x212>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	77fb      	strb	r3, [r7, #31]
 8005fda:	e05e      	b.n	800609a <UART_SetConfig+0x212>
 8005fdc:	2304      	movs	r3, #4
 8005fde:	77fb      	strb	r3, [r7, #31]
 8005fe0:	e05b      	b.n	800609a <UART_SetConfig+0x212>
 8005fe2:	2308      	movs	r3, #8
 8005fe4:	77fb      	strb	r3, [r7, #31]
 8005fe6:	e058      	b.n	800609a <UART_SetConfig+0x212>
 8005fe8:	2310      	movs	r3, #16
 8005fea:	77fb      	strb	r3, [r7, #31]
 8005fec:	e055      	b.n	800609a <UART_SetConfig+0x212>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a47      	ldr	r2, [pc, #284]	; (8006110 <UART_SetConfig+0x288>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d124      	bne.n	8006042 <UART_SetConfig+0x1ba>
 8005ff8:	4b42      	ldr	r3, [pc, #264]	; (8006104 <UART_SetConfig+0x27c>)
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006000:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006004:	d011      	beq.n	800602a <UART_SetConfig+0x1a2>
 8006006:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800600a:	d817      	bhi.n	800603c <UART_SetConfig+0x1b4>
 800600c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006010:	d011      	beq.n	8006036 <UART_SetConfig+0x1ae>
 8006012:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006016:	d811      	bhi.n	800603c <UART_SetConfig+0x1b4>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <UART_SetConfig+0x19c>
 800601c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006020:	d006      	beq.n	8006030 <UART_SetConfig+0x1a8>
 8006022:	e00b      	b.n	800603c <UART_SetConfig+0x1b4>
 8006024:	2300      	movs	r3, #0
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e037      	b.n	800609a <UART_SetConfig+0x212>
 800602a:	2302      	movs	r3, #2
 800602c:	77fb      	strb	r3, [r7, #31]
 800602e:	e034      	b.n	800609a <UART_SetConfig+0x212>
 8006030:	2304      	movs	r3, #4
 8006032:	77fb      	strb	r3, [r7, #31]
 8006034:	e031      	b.n	800609a <UART_SetConfig+0x212>
 8006036:	2308      	movs	r3, #8
 8006038:	77fb      	strb	r3, [r7, #31]
 800603a:	e02e      	b.n	800609a <UART_SetConfig+0x212>
 800603c:	2310      	movs	r3, #16
 800603e:	77fb      	strb	r3, [r7, #31]
 8006040:	e02b      	b.n	800609a <UART_SetConfig+0x212>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a33      	ldr	r2, [pc, #204]	; (8006114 <UART_SetConfig+0x28c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d124      	bne.n	8006096 <UART_SetConfig+0x20e>
 800604c:	4b2d      	ldr	r3, [pc, #180]	; (8006104 <UART_SetConfig+0x27c>)
 800604e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006050:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006054:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006058:	d011      	beq.n	800607e <UART_SetConfig+0x1f6>
 800605a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800605e:	d817      	bhi.n	8006090 <UART_SetConfig+0x208>
 8006060:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006064:	d011      	beq.n	800608a <UART_SetConfig+0x202>
 8006066:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800606a:	d811      	bhi.n	8006090 <UART_SetConfig+0x208>
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <UART_SetConfig+0x1f0>
 8006070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006074:	d006      	beq.n	8006084 <UART_SetConfig+0x1fc>
 8006076:	e00b      	b.n	8006090 <UART_SetConfig+0x208>
 8006078:	2300      	movs	r3, #0
 800607a:	77fb      	strb	r3, [r7, #31]
 800607c:	e00d      	b.n	800609a <UART_SetConfig+0x212>
 800607e:	2302      	movs	r3, #2
 8006080:	77fb      	strb	r3, [r7, #31]
 8006082:	e00a      	b.n	800609a <UART_SetConfig+0x212>
 8006084:	2304      	movs	r3, #4
 8006086:	77fb      	strb	r3, [r7, #31]
 8006088:	e007      	b.n	800609a <UART_SetConfig+0x212>
 800608a:	2308      	movs	r3, #8
 800608c:	77fb      	strb	r3, [r7, #31]
 800608e:	e004      	b.n	800609a <UART_SetConfig+0x212>
 8006090:	2310      	movs	r3, #16
 8006092:	77fb      	strb	r3, [r7, #31]
 8006094:	e001      	b.n	800609a <UART_SetConfig+0x212>
 8006096:	2310      	movs	r3, #16
 8006098:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a2:	d16c      	bne.n	800617e <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80060a4:	7ffb      	ldrb	r3, [r7, #31]
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d838      	bhi.n	800611c <UART_SetConfig+0x294>
 80060aa:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <UART_SetConfig+0x228>)
 80060ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b0:	080060d5 	.word	0x080060d5
 80060b4:	080060dd 	.word	0x080060dd
 80060b8:	080060e5 	.word	0x080060e5
 80060bc:	0800611d 	.word	0x0800611d
 80060c0:	080060eb 	.word	0x080060eb
 80060c4:	0800611d 	.word	0x0800611d
 80060c8:	0800611d 	.word	0x0800611d
 80060cc:	0800611d 	.word	0x0800611d
 80060d0:	080060f3 	.word	0x080060f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060d4:	f7fe fb3e 	bl	8004754 <HAL_RCC_GetPCLK1Freq>
 80060d8:	61b8      	str	r0, [r7, #24]
        break;
 80060da:	e024      	b.n	8006126 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060dc:	f7fe fb5c 	bl	8004798 <HAL_RCC_GetPCLK2Freq>
 80060e0:	61b8      	str	r0, [r7, #24]
        break;
 80060e2:	e020      	b.n	8006126 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060e4:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <UART_SetConfig+0x290>)
 80060e6:	61bb      	str	r3, [r7, #24]
        break;
 80060e8:	e01d      	b.n	8006126 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ea:	f7fe fabd 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 80060ee:	61b8      	str	r0, [r7, #24]
        break;
 80060f0:	e019      	b.n	8006126 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060f6:	61bb      	str	r3, [r7, #24]
        break;
 80060f8:	e015      	b.n	8006126 <UART_SetConfig+0x29e>
 80060fa:	bf00      	nop
 80060fc:	efff69f3 	.word	0xefff69f3
 8006100:	40013800 	.word	0x40013800
 8006104:	40021000 	.word	0x40021000
 8006108:	40004400 	.word	0x40004400
 800610c:	40004800 	.word	0x40004800
 8006110:	40004c00 	.word	0x40004c00
 8006114:	40005000 	.word	0x40005000
 8006118:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	77bb      	strb	r3, [r7, #30]
        break;
 8006124:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d075      	beq.n	8006218 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	005a      	lsls	r2, r3, #1
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	085b      	lsrs	r3, r3, #1
 8006136:	441a      	add	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006140:	b29b      	uxth	r3, r3
 8006142:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	2b0f      	cmp	r3, #15
 8006148:	d916      	bls.n	8006178 <UART_SetConfig+0x2f0>
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006150:	d212      	bcs.n	8006178 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	b29b      	uxth	r3, r3
 8006156:	f023 030f 	bic.w	r3, r3, #15
 800615a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	085b      	lsrs	r3, r3, #1
 8006160:	b29b      	uxth	r3, r3
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	b29a      	uxth	r2, r3
 8006168:	89fb      	ldrh	r3, [r7, #14]
 800616a:	4313      	orrs	r3, r2
 800616c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	89fa      	ldrh	r2, [r7, #14]
 8006174:	60da      	str	r2, [r3, #12]
 8006176:	e04f      	b.n	8006218 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	77bb      	strb	r3, [r7, #30]
 800617c:	e04c      	b.n	8006218 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800617e:	7ffb      	ldrb	r3, [r7, #31]
 8006180:	2b08      	cmp	r3, #8
 8006182:	d828      	bhi.n	80061d6 <UART_SetConfig+0x34e>
 8006184:	a201      	add	r2, pc, #4	; (adr r2, 800618c <UART_SetConfig+0x304>)
 8006186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618a:	bf00      	nop
 800618c:	080061b1 	.word	0x080061b1
 8006190:	080061b9 	.word	0x080061b9
 8006194:	080061c1 	.word	0x080061c1
 8006198:	080061d7 	.word	0x080061d7
 800619c:	080061c7 	.word	0x080061c7
 80061a0:	080061d7 	.word	0x080061d7
 80061a4:	080061d7 	.word	0x080061d7
 80061a8:	080061d7 	.word	0x080061d7
 80061ac:	080061cf 	.word	0x080061cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061b0:	f7fe fad0 	bl	8004754 <HAL_RCC_GetPCLK1Freq>
 80061b4:	61b8      	str	r0, [r7, #24]
        break;
 80061b6:	e013      	b.n	80061e0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061b8:	f7fe faee 	bl	8004798 <HAL_RCC_GetPCLK2Freq>
 80061bc:	61b8      	str	r0, [r7, #24]
        break;
 80061be:	e00f      	b.n	80061e0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061c0:	4b1b      	ldr	r3, [pc, #108]	; (8006230 <UART_SetConfig+0x3a8>)
 80061c2:	61bb      	str	r3, [r7, #24]
        break;
 80061c4:	e00c      	b.n	80061e0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061c6:	f7fe fa4f 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 80061ca:	61b8      	str	r0, [r7, #24]
        break;
 80061cc:	e008      	b.n	80061e0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061d2:	61bb      	str	r3, [r7, #24]
        break;
 80061d4:	e004      	b.n	80061e0 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	77bb      	strb	r3, [r7, #30]
        break;
 80061de:	bf00      	nop
    }

    if (pclk != 0U)
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d018      	beq.n	8006218 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	085a      	lsrs	r2, r3, #1
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	441a      	add	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	2b0f      	cmp	r3, #15
 8006200:	d908      	bls.n	8006214 <UART_SetConfig+0x38c>
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006208:	d204      	bcs.n	8006214 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	60da      	str	r2, [r3, #12]
 8006212:	e001      	b.n	8006218 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006224:	7fbb      	ldrb	r3, [r7, #30]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3720      	adds	r7, #32
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	007a1200 	.word	0x007a1200

08006234 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00a      	beq.n	800625e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00a      	beq.n	80062a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	f003 0310 	and.w	r3, r3, #16
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00a      	beq.n	80062e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	f003 0320 	and.w	r3, r3, #32
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00a      	beq.n	8006308 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01a      	beq.n	800634a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006332:	d10a      	bne.n	800634a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	430a      	orrs	r2, r1
 800636a:	605a      	str	r2, [r3, #4]
  }
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af02      	add	r7, sp, #8
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006388:	f7fc faca 	bl	8002920 <HAL_GetTick>
 800638c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0308 	and.w	r3, r3, #8
 8006398:	2b08      	cmp	r3, #8
 800639a:	d10e      	bne.n	80063ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800639c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f82d 	bl	800640a <UART_WaitOnFlagUntilTimeout>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e023      	b.n	8006402 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	d10e      	bne.n	80063e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f817 	bl	800640a <UART_WaitOnFlagUntilTimeout>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e00d      	b.n	8006402 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2220      	movs	r2, #32
 80063ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2220      	movs	r2, #32
 80063f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b09c      	sub	sp, #112	; 0x70
 800640e:	af00      	add	r7, sp, #0
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	603b      	str	r3, [r7, #0]
 8006416:	4613      	mov	r3, r2
 8006418:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800641a:	e0a5      	b.n	8006568 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800641c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800641e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006422:	f000 80a1 	beq.w	8006568 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006426:	f7fc fa7b 	bl	8002920 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006432:	429a      	cmp	r2, r3
 8006434:	d302      	bcc.n	800643c <UART_WaitOnFlagUntilTimeout+0x32>
 8006436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006438:	2b00      	cmp	r3, #0
 800643a:	d13e      	bne.n	80064ba <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006444:	e853 3f00 	ldrex	r3, [r3]
 8006448:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800644a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800644c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006450:	667b      	str	r3, [r7, #100]	; 0x64
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800645a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800645c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006460:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006462:	e841 2300 	strex	r3, r2, [r1]
 8006466:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1e6      	bne.n	800643c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3308      	adds	r3, #8
 8006474:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800647e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006480:	f023 0301 	bic.w	r3, r3, #1
 8006484:	663b      	str	r3, [r7, #96]	; 0x60
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3308      	adds	r3, #8
 800648c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800648e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006490:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006492:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006494:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006496:	e841 2300 	strex	r3, r2, [r1]
 800649a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800649c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1e5      	bne.n	800646e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2220      	movs	r2, #32
 80064a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2220      	movs	r2, #32
 80064ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e067      	b.n	800658a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0304 	and.w	r3, r3, #4
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d04f      	beq.n	8006568 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064d6:	d147      	bne.n	8006568 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	e853 3f00 	ldrex	r3, [r3]
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	461a      	mov	r2, r3
 80064fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006500:	637b      	str	r3, [r7, #52]	; 0x34
 8006502:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006504:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006508:	e841 2300 	strex	r3, r2, [r1]
 800650c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800650e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e6      	bne.n	80064e2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3308      	adds	r3, #8
 800651a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	e853 3f00 	ldrex	r3, [r3]
 8006522:	613b      	str	r3, [r7, #16]
   return(result);
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f023 0301 	bic.w	r3, r3, #1
 800652a:	66bb      	str	r3, [r7, #104]	; 0x68
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3308      	adds	r3, #8
 8006532:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006534:	623a      	str	r2, [r7, #32]
 8006536:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006538:	69f9      	ldr	r1, [r7, #28]
 800653a:	6a3a      	ldr	r2, [r7, #32]
 800653c:	e841 2300 	strex	r3, r2, [r1]
 8006540:	61bb      	str	r3, [r7, #24]
   return(result);
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1e5      	bne.n	8006514 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2220      	movs	r2, #32
 800654c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2220      	movs	r2, #32
 8006552:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2220      	movs	r2, #32
 8006558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e010      	b.n	800658a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	69da      	ldr	r2, [r3, #28]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	4013      	ands	r3, r2
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	429a      	cmp	r2, r3
 8006576:	bf0c      	ite	eq
 8006578:	2301      	moveq	r3, #1
 800657a:	2300      	movne	r3, #0
 800657c:	b2db      	uxtb	r3, r3
 800657e:	461a      	mov	r2, r3
 8006580:	79fb      	ldrb	r3, [r7, #7]
 8006582:	429a      	cmp	r2, r3
 8006584:	f43f af4a 	beq.w	800641c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3770      	adds	r7, #112	; 0x70
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
	...

08006594 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b096      	sub	sp, #88	; 0x58
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	4613      	mov	r3, r2
 80065a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	88fa      	ldrh	r2, [r7, #6]
 80065ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2222      	movs	r2, #34	; 0x22
 80065bc:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d02b      	beq.n	800661e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ca:	4a40      	ldr	r2, [pc, #256]	; (80066cc <UART_Start_Receive_DMA+0x138>)
 80065cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d2:	4a3f      	ldr	r2, [pc, #252]	; (80066d0 <UART_Start_Receive_DMA+0x13c>)
 80065d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065da:	4a3e      	ldr	r2, [pc, #248]	; (80066d4 <UART_Start_Receive_DMA+0x140>)
 80065dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e2:	2200      	movs	r2, #0
 80065e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3324      	adds	r3, #36	; 0x24
 80065f0:	4619      	mov	r1, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f6:	461a      	mov	r2, r3
 80065f8:	88fb      	ldrh	r3, [r7, #6]
 80065fa:	f7fc fac6 	bl	8002b8a <HAL_DMA_Start_IT>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00c      	beq.n	800661e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2210      	movs	r2, #16
 8006608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2220      	movs	r2, #32
 8006618:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e051      	b.n	80066c2 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662e:	e853 3f00 	ldrex	r3, [r3]
 8006632:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800663a:	657b      	str	r3, [r7, #84]	; 0x54
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	461a      	mov	r2, r3
 8006642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006644:	64bb      	str	r3, [r7, #72]	; 0x48
 8006646:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800664a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e6      	bne.n	8006626 <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3308      	adds	r3, #8
 800665e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	e853 3f00 	ldrex	r3, [r3]
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	f043 0301 	orr.w	r3, r3, #1
 800666e:	653b      	str	r3, [r7, #80]	; 0x50
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3308      	adds	r3, #8
 8006676:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006678:	637a      	str	r2, [r7, #52]	; 0x34
 800667a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800667e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006680:	e841 2300 	strex	r3, r2, [r1]
 8006684:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1e5      	bne.n	8006658 <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3308      	adds	r3, #8
 8006692:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	e853 3f00 	ldrex	r3, [r3]
 800669a:	613b      	str	r3, [r7, #16]
   return(result);
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3308      	adds	r3, #8
 80066aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066ac:	623a      	str	r2, [r7, #32]
 80066ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	69f9      	ldr	r1, [r7, #28]
 80066b2:	6a3a      	ldr	r2, [r7, #32]
 80066b4:	e841 2300 	strex	r3, r2, [r1]
 80066b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e5      	bne.n	800668c <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3758      	adds	r7, #88	; 0x58
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	0800689b 	.word	0x0800689b
 80066d0:	080069b9 	.word	0x080069b9
 80066d4:	080069f1 	.word	0x080069f1

080066d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80066d8:	b480      	push	{r7}
 80066da:	b089      	sub	sp, #36	; 0x24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	e853 3f00 	ldrex	r3, [r3]
 80066ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80066f4:	61fb      	str	r3, [r7, #28]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	61bb      	str	r3, [r7, #24]
 8006700:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006702:	6979      	ldr	r1, [r7, #20]
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	e841 2300 	strex	r3, r2, [r1]
 800670a:	613b      	str	r3, [r7, #16]
   return(result);
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1e6      	bne.n	80066e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2220      	movs	r2, #32
 8006716:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006718:	bf00      	nop
 800671a:	3724      	adds	r7, #36	; 0x24
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006724:	b480      	push	{r7}
 8006726:	b095      	sub	sp, #84	; 0x54
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006734:	e853 3f00 	ldrex	r3, [r3]
 8006738:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800673a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006740:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	461a      	mov	r2, r3
 8006748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674a:	643b      	str	r3, [r7, #64]	; 0x40
 800674c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006750:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e6      	bne.n	800672c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3308      	adds	r3, #8
 8006764:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	61fb      	str	r3, [r7, #28]
   return(result);
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	f023 0301 	bic.w	r3, r3, #1
 8006774:	64bb      	str	r3, [r7, #72]	; 0x48
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3308      	adds	r3, #8
 800677c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800677e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006780:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006786:	e841 2300 	strex	r3, r2, [r1]
 800678a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1e5      	bne.n	800675e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006796:	2b01      	cmp	r3, #1
 8006798:	d118      	bne.n	80067cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	f023 0310 	bic.w	r3, r3, #16
 80067ae:	647b      	str	r3, [r7, #68]	; 0x44
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	6979      	ldr	r1, [r7, #20]
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	613b      	str	r3, [r7, #16]
   return(result);
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e6      	bne.n	800679a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2220      	movs	r2, #32
 80067d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80067de:	bf00      	nop
 80067e0:	3754      	adds	r7, #84	; 0x54
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b090      	sub	sp, #64	; 0x40
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	2b20      	cmp	r3, #32
 80067fe:	d037      	beq.n	8006870 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8006800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006802:	2200      	movs	r2, #0
 8006804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3308      	adds	r3, #8
 800680e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	e853 3f00 	ldrex	r3, [r3]
 8006816:	623b      	str	r3, [r7, #32]
   return(result);
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800681e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3308      	adds	r3, #8
 8006826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006828:	633a      	str	r2, [r7, #48]	; 0x30
 800682a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800682e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006830:	e841 2300 	strex	r3, r2, [r1]
 8006834:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1e5      	bne.n	8006808 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800683c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	60fb      	str	r3, [r7, #12]
   return(result);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006850:	637b      	str	r3, [r7, #52]	; 0x34
 8006852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685a:	61fb      	str	r3, [r7, #28]
 800685c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	69b9      	ldr	r1, [r7, #24]
 8006860:	69fa      	ldr	r2, [r7, #28]
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	617b      	str	r3, [r7, #20]
   return(result);
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e6      	bne.n	800683c <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800686e:	e002      	b.n	8006876 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8006870:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006872:	f7fa ffc9 	bl	8001808 <HAL_UART_TxCpltCallback>
}
 8006876:	bf00      	nop
 8006878:	3740      	adds	r7, #64	; 0x40
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f7ff fad1 	bl	8005e34 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006892:	bf00      	nop
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b09c      	sub	sp, #112	; 0x70
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	2b20      	cmp	r3, #32
 80068ae:	d070      	beq.n	8006992 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 80068b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80068ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80068d8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1e6      	bne.n	80068b8 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3308      	adds	r3, #8
 80068f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f4:	e853 3f00 	ldrex	r3, [r3]
 80068f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fc:	f023 0301 	bic.w	r3, r3, #1
 8006900:	667b      	str	r3, [r7, #100]	; 0x64
 8006902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3308      	adds	r3, #8
 8006908:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800690a:	647a      	str	r2, [r7, #68]	; 0x44
 800690c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006910:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e5      	bne.n	80068ea <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800691e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3308      	adds	r3, #8
 8006924:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	e853 3f00 	ldrex	r3, [r3]
 800692c:	623b      	str	r3, [r7, #32]
   return(result);
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006934:	663b      	str	r3, [r7, #96]	; 0x60
 8006936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3308      	adds	r3, #8
 800693c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800693e:	633a      	str	r2, [r7, #48]	; 0x30
 8006940:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006942:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800694c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1e5      	bne.n	800691e <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006954:	2220      	movs	r2, #32
 8006956:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800695a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800695c:	2b01      	cmp	r3, #1
 800695e:	d118      	bne.n	8006992 <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	60fb      	str	r3, [r7, #12]
   return(result);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f023 0310 	bic.w	r3, r3, #16
 8006974:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800697e:	61fb      	str	r3, [r7, #28]
 8006980:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006982:	69b9      	ldr	r1, [r7, #24]
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	e841 2300 	strex	r3, r2, [r1]
 800698a:	617b      	str	r3, [r7, #20]
   return(result);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1e6      	bne.n	8006960 <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006996:	2b01      	cmp	r3, #1
 8006998:	d107      	bne.n	80069aa <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800699a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800699c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069a0:	4619      	mov	r1, r3
 80069a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80069a4:	f7ff fa64 	bl	8005e70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069a8:	e002      	b.n	80069b0 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 80069aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80069ac:	f7fa ff3e 	bl	800182c <HAL_UART_RxCpltCallback>
}
 80069b0:	bf00      	nop
 80069b2:	3770      	adds	r7, #112	; 0x70
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d109      	bne.n	80069e2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069d4:	085b      	lsrs	r3, r3, #1
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	4619      	mov	r1, r3
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7ff fa48 	bl	8005e70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069e0:	e002      	b.n	80069e8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f7ff fa30 	bl	8005e48 <HAL_UART_RxHalfCpltCallback>
}
 80069e8:	bf00      	nop
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a02:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a08:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a14:	2b80      	cmp	r3, #128	; 0x80
 8006a16:	d109      	bne.n	8006a2c <UART_DMAError+0x3c>
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	2b21      	cmp	r3, #33	; 0x21
 8006a1c:	d106      	bne.n	8006a2c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006a26:	6978      	ldr	r0, [r7, #20]
 8006a28:	f7ff fe56 	bl	80066d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a36:	2b40      	cmp	r3, #64	; 0x40
 8006a38:	d109      	bne.n	8006a4e <UART_DMAError+0x5e>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2b22      	cmp	r3, #34	; 0x22
 8006a3e:	d106      	bne.n	8006a4e <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006a48:	6978      	ldr	r0, [r7, #20]
 8006a4a:	f7ff fe6b 	bl	8006724 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a54:	f043 0210 	orr.w	r2, r3, #16
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a5e:	6978      	ldr	r0, [r7, #20]
 8006a60:	f7ff f9fc 	bl	8005e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a64:	bf00      	nop
 8006a66:	3718      	adds	r7, #24
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f7ff f9e6 	bl	8005e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a90:	bf00      	nop
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	e853 3f00 	ldrex	r3, [r3]
 8006aac:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	61bb      	str	r3, [r7, #24]
 8006ac0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	6979      	ldr	r1, [r7, #20]
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	613b      	str	r3, [r7, #16]
   return(result);
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1e6      	bne.n	8006aa0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fa fe92 	bl	8001808 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ae4:	bf00      	nop
 8006ae6:	3720      	adds	r7, #32
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b06:	f3ef 8305 	mrs	r3, IPSR
 8006b0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10f      	bne.n	8006b32 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b12:	f3ef 8310 	mrs	r3, PRIMASK
 8006b16:	607b      	str	r3, [r7, #4]
  return(result);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d109      	bne.n	8006b32 <osKernelInitialize+0x32>
 8006b1e:	4b11      	ldr	r3, [pc, #68]	; (8006b64 <osKernelInitialize+0x64>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d109      	bne.n	8006b3a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b26:	f3ef 8311 	mrs	r3, BASEPRI
 8006b2a:	603b      	str	r3, [r7, #0]
  return(result);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006b32:	f06f 0305 	mvn.w	r3, #5
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	e00c      	b.n	8006b54 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006b3a:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <osKernelInitialize+0x64>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d105      	bne.n	8006b4e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006b42:	4b08      	ldr	r3, [pc, #32]	; (8006b64 <osKernelInitialize+0x64>)
 8006b44:	2201      	movs	r2, #1
 8006b46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	e002      	b.n	8006b54 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b52:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006b54:	68fb      	ldr	r3, [r7, #12]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	20000bd4 	.word	0x20000bd4

08006b68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b6e:	f3ef 8305 	mrs	r3, IPSR
 8006b72:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10f      	bne.n	8006b9a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b7e:	607b      	str	r3, [r7, #4]
  return(result);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d109      	bne.n	8006b9a <osKernelStart+0x32>
 8006b86:	4b11      	ldr	r3, [pc, #68]	; (8006bcc <osKernelStart+0x64>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d109      	bne.n	8006ba2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b8e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b92:	603b      	str	r3, [r7, #0]
  return(result);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006b9a:	f06f 0305 	mvn.w	r3, #5
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	e00e      	b.n	8006bc0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006ba2:	4b0a      	ldr	r3, [pc, #40]	; (8006bcc <osKernelStart+0x64>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d107      	bne.n	8006bba <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006baa:	4b08      	ldr	r3, [pc, #32]	; (8006bcc <osKernelStart+0x64>)
 8006bac:	2202      	movs	r2, #2
 8006bae:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006bb0:	f001 f880 	bl	8007cb4 <vTaskStartScheduler>
      stat = osOK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	60fb      	str	r3, [r7, #12]
 8006bb8:	e002      	b.n	8006bc0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bbe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	20000bd4 	.word	0x20000bd4

08006bd0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b092      	sub	sp, #72	; 0x48
 8006bd4:	af04      	add	r7, sp, #16
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006be0:	f3ef 8305 	mrs	r3, IPSR
 8006be4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f040 8094 	bne.w	8006d16 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bee:	f3ef 8310 	mrs	r3, PRIMASK
 8006bf2:	623b      	str	r3, [r7, #32]
  return(result);
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f040 808d 	bne.w	8006d16 <osThreadNew+0x146>
 8006bfc:	4b48      	ldr	r3, [pc, #288]	; (8006d20 <osThreadNew+0x150>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d106      	bne.n	8006c12 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c04:	f3ef 8311 	mrs	r3, BASEPRI
 8006c08:	61fb      	str	r3, [r7, #28]
  return(result);
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f040 8082 	bne.w	8006d16 <osThreadNew+0x146>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d07e      	beq.n	8006d16 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006c18:	2380      	movs	r3, #128	; 0x80
 8006c1a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006c1c:	2318      	movs	r3, #24
 8006c1e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006c20:	2300      	movs	r3, #0
 8006c22:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006c24:	f107 031b 	add.w	r3, r7, #27
 8006c28:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c2e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d045      	beq.n	8006cc2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <osThreadNew+0x74>
        name = attr->name;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d002      	beq.n	8006c52 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d008      	beq.n	8006c6a <osThreadNew+0x9a>
 8006c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5a:	2b38      	cmp	r3, #56	; 0x38
 8006c5c:	d805      	bhi.n	8006c6a <osThreadNew+0x9a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <osThreadNew+0x9e>
        return (NULL);
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	e054      	b.n	8006d18 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	089b      	lsrs	r3, r3, #2
 8006c7c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00e      	beq.n	8006ca4 <osThreadNew+0xd4>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	2b5b      	cmp	r3, #91	; 0x5b
 8006c8c:	d90a      	bls.n	8006ca4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d006      	beq.n	8006ca4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <osThreadNew+0xd4>
        mem = 1;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ca2:	e010      	b.n	8006cc6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10c      	bne.n	8006cc6 <osThreadNew+0xf6>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d108      	bne.n	8006cc6 <osThreadNew+0xf6>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d104      	bne.n	8006cc6 <osThreadNew+0xf6>
          mem = 0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cc0:	e001      	b.n	8006cc6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d110      	bne.n	8006cee <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006cd4:	9202      	str	r2, [sp, #8]
 8006cd6:	9301      	str	r3, [sp, #4]
 8006cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ce0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f000 fe1a 	bl	800791c <xTaskCreateStatic>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	e013      	b.n	8006d16 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d110      	bne.n	8006d16 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	f107 0314 	add.w	r3, r7, #20
 8006cfc:	9301      	str	r3, [sp, #4]
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 fe64 	bl	80079d4 <xTaskCreate>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d001      	beq.n	8006d16 <osThreadNew+0x146>
          hTask = NULL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006d16:	697b      	ldr	r3, [r7, #20]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3738      	adds	r7, #56	; 0x38
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	20000bd4 	.word	0x20000bd4

08006d24 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d2c:	f3ef 8305 	mrs	r3, IPSR
 8006d30:	613b      	str	r3, [r7, #16]
  return(result);
 8006d32:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10f      	bne.n	8006d58 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d38:	f3ef 8310 	mrs	r3, PRIMASK
 8006d3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d109      	bne.n	8006d58 <osDelay+0x34>
 8006d44:	4b0d      	ldr	r3, [pc, #52]	; (8006d7c <osDelay+0x58>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d109      	bne.n	8006d60 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d4c:	f3ef 8311 	mrs	r3, BASEPRI
 8006d50:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d003      	beq.n	8006d60 <osDelay+0x3c>
    stat = osErrorISR;
 8006d58:	f06f 0305 	mvn.w	r3, #5
 8006d5c:	617b      	str	r3, [r7, #20]
 8006d5e:	e007      	b.n	8006d70 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 ff6e 	bl	8007c4c <vTaskDelay>
    }
  }

  return (stat);
 8006d70:	697b      	ldr	r3, [r7, #20]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20000bd4 	.word	0x20000bd4

08006d80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4a07      	ldr	r2, [pc, #28]	; (8006dac <vApplicationGetIdleTaskMemory+0x2c>)
 8006d90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	4a06      	ldr	r2, [pc, #24]	; (8006db0 <vApplicationGetIdleTaskMemory+0x30>)
 8006d96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2280      	movs	r2, #128	; 0x80
 8006d9c:	601a      	str	r2, [r3, #0]
}
 8006d9e:	bf00      	nop
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	20000bd8 	.word	0x20000bd8
 8006db0:	20000c34 	.word	0x20000c34

08006db4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4a07      	ldr	r2, [pc, #28]	; (8006de0 <vApplicationGetTimerTaskMemory+0x2c>)
 8006dc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	4a06      	ldr	r2, [pc, #24]	; (8006de4 <vApplicationGetTimerTaskMemory+0x30>)
 8006dca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dd2:	601a      	str	r2, [r3, #0]
}
 8006dd4:	bf00      	nop
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	20000e34 	.word	0x20000e34
 8006de4:	20000e90 	.word	0x20000e90

08006de8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f103 0208 	add.w	r2, r3, #8
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f103 0208 	add.w	r2, r3, #8
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f103 0208 	add.w	r2, r3, #8
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e36:	bf00      	nop
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e42:	b480      	push	{r7}
 8006e44:	b085      	sub	sp, #20
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	1c5a      	adds	r2, r3, #1
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	601a      	str	r2, [r3, #0]
}
 8006e7e:	bf00      	nop
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b085      	sub	sp, #20
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ea0:	d103      	bne.n	8006eaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	60fb      	str	r3, [r7, #12]
 8006ea8:	e00c      	b.n	8006ec4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3308      	adds	r3, #8
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	e002      	b.n	8006eb8 <vListInsert+0x2e>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d2f6      	bcs.n	8006eb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	601a      	str	r2, [r3, #0]
}
 8006ef0:	bf00      	nop
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	6892      	ldr	r2, [r2, #8]
 8006f12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	6852      	ldr	r2, [r2, #4]
 8006f1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d103      	bne.n	8006f30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	689a      	ldr	r2, [r3, #8]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	1e5a      	subs	r2, r3, #1
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10a      	bne.n	8006f7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f76:	bf00      	nop
 8006f78:	e7fe      	b.n	8006f78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006f7a:	f002 f80b 	bl	8008f94 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f86:	68f9      	ldr	r1, [r7, #12]
 8006f88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f8a:	fb01 f303 	mul.w	r3, r1, r3
 8006f8e:	441a      	add	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006faa:	3b01      	subs	r3, #1
 8006fac:	68f9      	ldr	r1, [r7, #12]
 8006fae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006fb0:	fb01 f303 	mul.w	r3, r1, r3
 8006fb4:	441a      	add	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	22ff      	movs	r2, #255	; 0xff
 8006fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	22ff      	movs	r2, #255	; 0xff
 8006fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d114      	bne.n	8006ffa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d01a      	beq.n	800700e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	3310      	adds	r3, #16
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f001 f8f7 	bl	80081d0 <xTaskRemoveFromEventList>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d012      	beq.n	800700e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006fe8:	4b0c      	ldr	r3, [pc, #48]	; (800701c <xQueueGenericReset+0xcc>)
 8006fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	e009      	b.n	800700e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3310      	adds	r3, #16
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7ff fef2 	bl	8006de8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	3324      	adds	r3, #36	; 0x24
 8007008:	4618      	mov	r0, r3
 800700a:	f7ff feed 	bl	8006de8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800700e:	f001 fff1 	bl	8008ff4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007012:	2301      	movs	r3, #1
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	e000ed04 	.word	0xe000ed04

08007020 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007020:	b580      	push	{r7, lr}
 8007022:	b08e      	sub	sp, #56	; 0x38
 8007024:	af02      	add	r7, sp, #8
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
 800702c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10a      	bne.n	800704a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007046:	bf00      	nop
 8007048:	e7fe      	b.n	8007048 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10a      	bne.n	8007066 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007062:	bf00      	nop
 8007064:	e7fe      	b.n	8007064 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <xQueueGenericCreateStatic+0x52>
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <xQueueGenericCreateStatic+0x56>
 8007072:	2301      	movs	r3, #1
 8007074:	e000      	b.n	8007078 <xQueueGenericCreateStatic+0x58>
 8007076:	2300      	movs	r3, #0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	623b      	str	r3, [r7, #32]
}
 800708e:	bf00      	nop
 8007090:	e7fe      	b.n	8007090 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d102      	bne.n	800709e <xQueueGenericCreateStatic+0x7e>
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <xQueueGenericCreateStatic+0x82>
 800709e:	2301      	movs	r3, #1
 80070a0:	e000      	b.n	80070a4 <xQueueGenericCreateStatic+0x84>
 80070a2:	2300      	movs	r3, #0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10a      	bne.n	80070be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80070a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	61fb      	str	r3, [r7, #28]
}
 80070ba:	bf00      	nop
 80070bc:	e7fe      	b.n	80070bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80070be:	2350      	movs	r3, #80	; 0x50
 80070c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2b50      	cmp	r3, #80	; 0x50
 80070c6:	d00a      	beq.n	80070de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	61bb      	str	r3, [r7, #24]
}
 80070da:	bf00      	nop
 80070dc:	e7fe      	b.n	80070dc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80070e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00d      	beq.n	8007104 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80070e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80070f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	4613      	mov	r3, r2
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 f805 	bl	800710e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007106:	4618      	mov	r0, r3
 8007108:	3730      	adds	r7, #48	; 0x30
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	607a      	str	r2, [r7, #4]
 800711a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d103      	bne.n	800712a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	e002      	b.n	8007130 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800713c:	2101      	movs	r1, #1
 800713e:	69b8      	ldr	r0, [r7, #24]
 8007140:	f7ff ff06 	bl	8006f50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	78fa      	ldrb	r2, [r7, #3]
 8007148:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800714c:	bf00      	nop
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08e      	sub	sp, #56	; 0x38
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007162:	2300      	movs	r3, #0
 8007164:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10a      	bne.n	8007186 <xQueueGenericSend+0x32>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d103      	bne.n	8007194 <xQueueGenericSend+0x40>
 800718c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <xQueueGenericSend+0x44>
 8007194:	2301      	movs	r3, #1
 8007196:	e000      	b.n	800719a <xQueueGenericSend+0x46>
 8007198:	2300      	movs	r3, #0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10a      	bne.n	80071b4 <xQueueGenericSend+0x60>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071b0:	bf00      	nop
 80071b2:	e7fe      	b.n	80071b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d103      	bne.n	80071c2 <xQueueGenericSend+0x6e>
 80071ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d101      	bne.n	80071c6 <xQueueGenericSend+0x72>
 80071c2:	2301      	movs	r3, #1
 80071c4:	e000      	b.n	80071c8 <xQueueGenericSend+0x74>
 80071c6:	2300      	movs	r3, #0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10a      	bne.n	80071e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	623b      	str	r3, [r7, #32]
}
 80071de:	bf00      	nop
 80071e0:	e7fe      	b.n	80071e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071e2:	f001 f9b9 	bl	8008558 <xTaskGetSchedulerState>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d102      	bne.n	80071f2 <xQueueGenericSend+0x9e>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <xQueueGenericSend+0xa2>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e000      	b.n	80071f8 <xQueueGenericSend+0xa4>
 80071f6:	2300      	movs	r3, #0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10a      	bne.n	8007212 <xQueueGenericSend+0xbe>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	61fb      	str	r3, [r7, #28]
}
 800720e:	bf00      	nop
 8007210:	e7fe      	b.n	8007210 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007212:	f001 febf 	bl	8008f94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721e:	429a      	cmp	r2, r3
 8007220:	d302      	bcc.n	8007228 <xQueueGenericSend+0xd4>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2b02      	cmp	r3, #2
 8007226:	d129      	bne.n	800727c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	68b9      	ldr	r1, [r7, #8]
 800722c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800722e:	f000 fa07 	bl	8007640 <prvCopyDataToQueue>
 8007232:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	2b00      	cmp	r3, #0
 800723a:	d010      	beq.n	800725e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	3324      	adds	r3, #36	; 0x24
 8007240:	4618      	mov	r0, r3
 8007242:	f000 ffc5 	bl	80081d0 <xTaskRemoveFromEventList>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d013      	beq.n	8007274 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800724c:	4b3f      	ldr	r3, [pc, #252]	; (800734c <xQueueGenericSend+0x1f8>)
 800724e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	e00a      	b.n	8007274 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007260:	2b00      	cmp	r3, #0
 8007262:	d007      	beq.n	8007274 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007264:	4b39      	ldr	r3, [pc, #228]	; (800734c <xQueueGenericSend+0x1f8>)
 8007266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007274:	f001 febe 	bl	8008ff4 <vPortExitCritical>
				return pdPASS;
 8007278:	2301      	movs	r3, #1
 800727a:	e063      	b.n	8007344 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d103      	bne.n	800728a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007282:	f001 feb7 	bl	8008ff4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007286:	2300      	movs	r3, #0
 8007288:	e05c      	b.n	8007344 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800728a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800728c:	2b00      	cmp	r3, #0
 800728e:	d106      	bne.n	800729e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007290:	f107 0314 	add.w	r3, r7, #20
 8007294:	4618      	mov	r0, r3
 8007296:	f000 ffff 	bl	8008298 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800729a:	2301      	movs	r3, #1
 800729c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800729e:	f001 fea9 	bl	8008ff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072a2:	f000 fd6d 	bl	8007d80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072a6:	f001 fe75 	bl	8008f94 <vPortEnterCritical>
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072b0:	b25b      	sxtb	r3, r3
 80072b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072b6:	d103      	bne.n	80072c0 <xQueueGenericSend+0x16c>
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072c6:	b25b      	sxtb	r3, r3
 80072c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072cc:	d103      	bne.n	80072d6 <xQueueGenericSend+0x182>
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072d6:	f001 fe8d 	bl	8008ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072da:	1d3a      	adds	r2, r7, #4
 80072dc:	f107 0314 	add.w	r3, r7, #20
 80072e0:	4611      	mov	r1, r2
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 ffee 	bl	80082c4 <xTaskCheckForTimeOut>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d124      	bne.n	8007338 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80072ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072f0:	f000 fa9e 	bl	8007830 <prvIsQueueFull>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d018      	beq.n	800732c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	3310      	adds	r3, #16
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	4611      	mov	r1, r2
 8007302:	4618      	mov	r0, r3
 8007304:	f000 ff14 	bl	8008130 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800730a:	f000 fa29 	bl	8007760 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800730e:	f000 fd45 	bl	8007d9c <xTaskResumeAll>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	f47f af7c 	bne.w	8007212 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800731a:	4b0c      	ldr	r3, [pc, #48]	; (800734c <xQueueGenericSend+0x1f8>)
 800731c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	e772      	b.n	8007212 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800732c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800732e:	f000 fa17 	bl	8007760 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007332:	f000 fd33 	bl	8007d9c <xTaskResumeAll>
 8007336:	e76c      	b.n	8007212 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800733a:	f000 fa11 	bl	8007760 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800733e:	f000 fd2d 	bl	8007d9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007342:	2300      	movs	r3, #0
		}
	}
}
 8007344:	4618      	mov	r0, r3
 8007346:	3738      	adds	r7, #56	; 0x38
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	e000ed04 	.word	0xe000ed04

08007350 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b08e      	sub	sp, #56	; 0x38
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
 800735c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	627b      	str	r3, [r7, #36]	; 0x24
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d103      	bne.n	800738c <xQueueGenericSendFromISR+0x3c>
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <xQueueGenericSendFromISR+0x40>
 800738c:	2301      	movs	r3, #1
 800738e:	e000      	b.n	8007392 <xQueueGenericSendFromISR+0x42>
 8007390:	2300      	movs	r3, #0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10a      	bne.n	80073ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	623b      	str	r3, [r7, #32]
}
 80073a8:	bf00      	nop
 80073aa:	e7fe      	b.n	80073aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d103      	bne.n	80073ba <xQueueGenericSendFromISR+0x6a>
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d101      	bne.n	80073be <xQueueGenericSendFromISR+0x6e>
 80073ba:	2301      	movs	r3, #1
 80073bc:	e000      	b.n	80073c0 <xQueueGenericSendFromISR+0x70>
 80073be:	2300      	movs	r3, #0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10a      	bne.n	80073da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	61fb      	str	r3, [r7, #28]
}
 80073d6:	bf00      	nop
 80073d8:	e7fe      	b.n	80073d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073da:	f001 febd 	bl	8009158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80073de:	f3ef 8211 	mrs	r2, BASEPRI
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	61ba      	str	r2, [r7, #24]
 80073f4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80073f6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007402:	429a      	cmp	r2, r3
 8007404:	d302      	bcc.n	800740c <xQueueGenericSendFromISR+0xbc>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b02      	cmp	r3, #2
 800740a:	d12c      	bne.n	8007466 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	68b9      	ldr	r1, [r7, #8]
 800741a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800741c:	f000 f910 	bl	8007640 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007420:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007428:	d112      	bne.n	8007450 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	2b00      	cmp	r3, #0
 8007430:	d016      	beq.n	8007460 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	3324      	adds	r3, #36	; 0x24
 8007436:	4618      	mov	r0, r3
 8007438:	f000 feca 	bl	80081d0 <xTaskRemoveFromEventList>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00e      	beq.n	8007460 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00b      	beq.n	8007460 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	e007      	b.n	8007460 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007450:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007454:	3301      	adds	r3, #1
 8007456:	b2db      	uxtb	r3, r3
 8007458:	b25a      	sxtb	r2, r3
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007460:	2301      	movs	r3, #1
 8007462:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007464:	e001      	b.n	800746a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007466:	2300      	movs	r3, #0
 8007468:	637b      	str	r3, [r7, #52]	; 0x34
 800746a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007474:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007478:	4618      	mov	r0, r3
 800747a:	3738      	adds	r7, #56	; 0x38
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08c      	sub	sp, #48	; 0x30
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800748c:	2300      	movs	r3, #0
 800748e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10a      	bne.n	80074b0 <xQueueReceive+0x30>
	__asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749e:	f383 8811 	msr	BASEPRI, r3
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	623b      	str	r3, [r7, #32]
}
 80074ac:	bf00      	nop
 80074ae:	e7fe      	b.n	80074ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d103      	bne.n	80074be <xQueueReceive+0x3e>
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <xQueueReceive+0x42>
 80074be:	2301      	movs	r3, #1
 80074c0:	e000      	b.n	80074c4 <xQueueReceive+0x44>
 80074c2:	2300      	movs	r3, #0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10a      	bne.n	80074de <xQueueReceive+0x5e>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	61fb      	str	r3, [r7, #28]
}
 80074da:	bf00      	nop
 80074dc:	e7fe      	b.n	80074dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074de:	f001 f83b 	bl	8008558 <xTaskGetSchedulerState>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d102      	bne.n	80074ee <xQueueReceive+0x6e>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <xQueueReceive+0x72>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e000      	b.n	80074f4 <xQueueReceive+0x74>
 80074f2:	2300      	movs	r3, #0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10a      	bne.n	800750e <xQueueReceive+0x8e>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	61bb      	str	r3, [r7, #24]
}
 800750a:	bf00      	nop
 800750c:	e7fe      	b.n	800750c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800750e:	f001 fd41 	bl	8008f94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	2b00      	cmp	r3, #0
 800751c:	d01f      	beq.n	800755e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800751e:	68b9      	ldr	r1, [r7, #8]
 8007520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007522:	f000 f8f7 	bl	8007714 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	1e5a      	subs	r2, r3, #1
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00f      	beq.n	8007556 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007538:	3310      	adds	r3, #16
 800753a:	4618      	mov	r0, r3
 800753c:	f000 fe48 	bl	80081d0 <xTaskRemoveFromEventList>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d007      	beq.n	8007556 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007546:	4b3d      	ldr	r3, [pc, #244]	; (800763c <xQueueReceive+0x1bc>)
 8007548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007556:	f001 fd4d 	bl	8008ff4 <vPortExitCritical>
				return pdPASS;
 800755a:	2301      	movs	r3, #1
 800755c:	e069      	b.n	8007632 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d103      	bne.n	800756c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007564:	f001 fd46 	bl	8008ff4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007568:	2300      	movs	r3, #0
 800756a:	e062      	b.n	8007632 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756e:	2b00      	cmp	r3, #0
 8007570:	d106      	bne.n	8007580 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007572:	f107 0310 	add.w	r3, r7, #16
 8007576:	4618      	mov	r0, r3
 8007578:	f000 fe8e 	bl	8008298 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800757c:	2301      	movs	r3, #1
 800757e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007580:	f001 fd38 	bl	8008ff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007584:	f000 fbfc 	bl	8007d80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007588:	f001 fd04 	bl	8008f94 <vPortEnterCritical>
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007592:	b25b      	sxtb	r3, r3
 8007594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007598:	d103      	bne.n	80075a2 <xQueueReceive+0x122>
 800759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075a8:	b25b      	sxtb	r3, r3
 80075aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075ae:	d103      	bne.n	80075b8 <xQueueReceive+0x138>
 80075b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075b8:	f001 fd1c 	bl	8008ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075bc:	1d3a      	adds	r2, r7, #4
 80075be:	f107 0310 	add.w	r3, r7, #16
 80075c2:	4611      	mov	r1, r2
 80075c4:	4618      	mov	r0, r3
 80075c6:	f000 fe7d 	bl	80082c4 <xTaskCheckForTimeOut>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d123      	bne.n	8007618 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075d2:	f000 f917 	bl	8007804 <prvIsQueueEmpty>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d017      	beq.n	800760c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075de:	3324      	adds	r3, #36	; 0x24
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	4611      	mov	r1, r2
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 fda3 	bl	8008130 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ec:	f000 f8b8 	bl	8007760 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075f0:	f000 fbd4 	bl	8007d9c <xTaskResumeAll>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d189      	bne.n	800750e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80075fa:	4b10      	ldr	r3, [pc, #64]	; (800763c <xQueueReceive+0x1bc>)
 80075fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	e780      	b.n	800750e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800760c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800760e:	f000 f8a7 	bl	8007760 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007612:	f000 fbc3 	bl	8007d9c <xTaskResumeAll>
 8007616:	e77a      	b.n	800750e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800761a:	f000 f8a1 	bl	8007760 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800761e:	f000 fbbd 	bl	8007d9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007624:	f000 f8ee 	bl	8007804 <prvIsQueueEmpty>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	f43f af6f 	beq.w	800750e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007630:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007632:	4618      	mov	r0, r3
 8007634:	3730      	adds	r7, #48	; 0x30
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	e000ed04 	.word	0xe000ed04

08007640 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800764c:	2300      	movs	r3, #0
 800764e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007654:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10d      	bne.n	800767a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d14d      	bne.n	8007702 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	4618      	mov	r0, r3
 800766c:	f000 ff92 	bl	8008594 <xTaskPriorityDisinherit>
 8007670:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	605a      	str	r2, [r3, #4]
 8007678:	e043      	b.n	8007702 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d119      	bne.n	80076b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6898      	ldr	r0, [r3, #8]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007688:	461a      	mov	r2, r3
 800768a:	68b9      	ldr	r1, [r7, #8]
 800768c:	f001 ffc4 	bl	8009618 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007698:	441a      	add	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d32b      	bcc.n	8007702 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	609a      	str	r2, [r3, #8]
 80076b2:	e026      	b.n	8007702 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	68d8      	ldr	r0, [r3, #12]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076bc:	461a      	mov	r2, r3
 80076be:	68b9      	ldr	r1, [r7, #8]
 80076c0:	f001 ffaa 	bl	8009618 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	68da      	ldr	r2, [r3, #12]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076cc:	425b      	negs	r3, r3
 80076ce:	441a      	add	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d207      	bcs.n	80076f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e8:	425b      	negs	r3, r3
 80076ea:	441a      	add	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d105      	bne.n	8007702 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	3b01      	subs	r3, #1
 8007700:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	1c5a      	adds	r2, r3, #1
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800770a:	697b      	ldr	r3, [r7, #20]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3718      	adds	r7, #24
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007722:	2b00      	cmp	r3, #0
 8007724:	d018      	beq.n	8007758 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772e:	441a      	add	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68da      	ldr	r2, [r3, #12]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	429a      	cmp	r2, r3
 800773e:	d303      	bcc.n	8007748 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68d9      	ldr	r1, [r3, #12]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007750:	461a      	mov	r2, r3
 8007752:	6838      	ldr	r0, [r7, #0]
 8007754:	f001 ff60 	bl	8009618 <memcpy>
	}
}
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007768:	f001 fc14 	bl	8008f94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007772:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007774:	e011      	b.n	800779a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	2b00      	cmp	r3, #0
 800777c:	d012      	beq.n	80077a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3324      	adds	r3, #36	; 0x24
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fd24 	bl	80081d0 <xTaskRemoveFromEventList>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800778e:	f000 fdfb 	bl	8008388 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007792:	7bfb      	ldrb	r3, [r7, #15]
 8007794:	3b01      	subs	r3, #1
 8007796:	b2db      	uxtb	r3, r3
 8007798:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800779a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	dce9      	bgt.n	8007776 <prvUnlockQueue+0x16>
 80077a2:	e000      	b.n	80077a6 <prvUnlockQueue+0x46>
					break;
 80077a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	22ff      	movs	r2, #255	; 0xff
 80077aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80077ae:	f001 fc21 	bl	8008ff4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80077b2:	f001 fbef 	bl	8008f94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077be:	e011      	b.n	80077e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d012      	beq.n	80077ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	3310      	adds	r3, #16
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 fcff 	bl	80081d0 <xTaskRemoveFromEventList>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80077d8:	f000 fdd6 	bl	8008388 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80077dc:	7bbb      	ldrb	r3, [r7, #14]
 80077de:	3b01      	subs	r3, #1
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	dce9      	bgt.n	80077c0 <prvUnlockQueue+0x60>
 80077ec:	e000      	b.n	80077f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80077ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	22ff      	movs	r2, #255	; 0xff
 80077f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80077f8:	f001 fbfc 	bl	8008ff4 <vPortExitCritical>
}
 80077fc:	bf00      	nop
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800780c:	f001 fbc2 	bl	8008f94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	2b00      	cmp	r3, #0
 8007816:	d102      	bne.n	800781e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007818:	2301      	movs	r3, #1
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	e001      	b.n	8007822 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800781e:	2300      	movs	r3, #0
 8007820:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007822:	f001 fbe7 	bl	8008ff4 <vPortExitCritical>

	return xReturn;
 8007826:	68fb      	ldr	r3, [r7, #12]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007838:	f001 fbac 	bl	8008f94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007844:	429a      	cmp	r2, r3
 8007846:	d102      	bne.n	800784e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007848:	2301      	movs	r3, #1
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	e001      	b.n	8007852 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007852:	f001 fbcf 	bl	8008ff4 <vPortExitCritical>

	return xReturn;
 8007856:	68fb      	ldr	r3, [r7, #12]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]
 800786e:	e014      	b.n	800789a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007870:	4a0f      	ldr	r2, [pc, #60]	; (80078b0 <vQueueAddToRegistry+0x50>)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10b      	bne.n	8007894 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800787c:	490c      	ldr	r1, [pc, #48]	; (80078b0 <vQueueAddToRegistry+0x50>)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007886:	4a0a      	ldr	r2, [pc, #40]	; (80078b0 <vQueueAddToRegistry+0x50>)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	00db      	lsls	r3, r3, #3
 800788c:	4413      	add	r3, r2
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007892:	e006      	b.n	80078a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	3301      	adds	r3, #1
 8007898:	60fb      	str	r3, [r7, #12]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b07      	cmp	r3, #7
 800789e:	d9e7      	bls.n	8007870 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80078a0:	bf00      	nop
 80078a2:	bf00      	nop
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	20001290 	.word	0x20001290

080078b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80078c4:	f001 fb66 	bl	8008f94 <vPortEnterCritical>
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078ce:	b25b      	sxtb	r3, r3
 80078d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078d4:	d103      	bne.n	80078de <vQueueWaitForMessageRestricted+0x2a>
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078e4:	b25b      	sxtb	r3, r3
 80078e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078ea:	d103      	bne.n	80078f4 <vQueueWaitForMessageRestricted+0x40>
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078f4:	f001 fb7e 	bl	8008ff4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d106      	bne.n	800790e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	3324      	adds	r3, #36	; 0x24
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	68b9      	ldr	r1, [r7, #8]
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fc35 	bl	8008178 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800790e:	6978      	ldr	r0, [r7, #20]
 8007910:	f7ff ff26 	bl	8007760 <prvUnlockQueue>
	}
 8007914:	bf00      	nop
 8007916:	3718      	adds	r7, #24
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08e      	sub	sp, #56	; 0x38
 8007920:	af04      	add	r7, sp, #16
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800792a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10a      	bne.n	8007946 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	623b      	str	r3, [r7, #32]
}
 8007942:	bf00      	nop
 8007944:	e7fe      	b.n	8007944 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10a      	bne.n	8007962 <xTaskCreateStatic+0x46>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	61fb      	str	r3, [r7, #28]
}
 800795e:	bf00      	nop
 8007960:	e7fe      	b.n	8007960 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007962:	235c      	movs	r3, #92	; 0x5c
 8007964:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	2b5c      	cmp	r3, #92	; 0x5c
 800796a:	d00a      	beq.n	8007982 <xTaskCreateStatic+0x66>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	61bb      	str	r3, [r7, #24]
}
 800797e:	bf00      	nop
 8007980:	e7fe      	b.n	8007980 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	2b00      	cmp	r3, #0
 8007986:	d01e      	beq.n	80079c6 <xTaskCreateStatic+0xaa>
 8007988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798a:	2b00      	cmp	r3, #0
 800798c:	d01b      	beq.n	80079c6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007996:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	2202      	movs	r2, #2
 800799c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079a0:	2300      	movs	r3, #0
 80079a2:	9303      	str	r3, [sp, #12]
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	9302      	str	r3, [sp, #8]
 80079a8:	f107 0314 	add.w	r3, r7, #20
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	68b9      	ldr	r1, [r7, #8]
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 f850 	bl	8007a5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079c0:	f000 f8d4 	bl	8007b6c <prvAddNewTaskToReadyList>
 80079c4:	e001      	b.n	80079ca <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80079c6:	2300      	movs	r3, #0
 80079c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079ca:	697b      	ldr	r3, [r7, #20]
	}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3728      	adds	r7, #40	; 0x28
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08c      	sub	sp, #48	; 0x30
 80079d8:	af04      	add	r7, sp, #16
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	603b      	str	r3, [r7, #0]
 80079e0:	4613      	mov	r3, r2
 80079e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079e4:	88fb      	ldrh	r3, [r7, #6]
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 fbf5 	bl	80091d8 <pvPortMalloc>
 80079ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00e      	beq.n	8007a14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80079f6:	205c      	movs	r0, #92	; 0x5c
 80079f8:	f001 fbee 	bl	80091d8 <pvPortMalloc>
 80079fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d003      	beq.n	8007a0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	631a      	str	r2, [r3, #48]	; 0x30
 8007a0a:	e005      	b.n	8007a18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a0c:	6978      	ldr	r0, [r7, #20]
 8007a0e:	f001 fca7 	bl	8009360 <vPortFree>
 8007a12:	e001      	b.n	8007a18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a14:	2300      	movs	r3, #0
 8007a16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d017      	beq.n	8007a4e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a26:	88fa      	ldrh	r2, [r7, #6]
 8007a28:	2300      	movs	r3, #0
 8007a2a:	9303      	str	r3, [sp, #12]
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	9302      	str	r3, [sp, #8]
 8007a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a32:	9301      	str	r3, [sp, #4]
 8007a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	68b9      	ldr	r1, [r7, #8]
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 f80e 	bl	8007a5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a42:	69f8      	ldr	r0, [r7, #28]
 8007a44:	f000 f892 	bl	8007b6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	61bb      	str	r3, [r7, #24]
 8007a4c:	e002      	b.n	8007a54 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a54:	69bb      	ldr	r3, [r7, #24]
	}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3720      	adds	r7, #32
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b088      	sub	sp, #32
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	607a      	str	r2, [r7, #4]
 8007a6a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	461a      	mov	r2, r3
 8007a76:	21a5      	movs	r1, #165	; 0xa5
 8007a78:	f001 fddc 	bl	8009634 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a86:	3b01      	subs	r3, #1
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	f023 0307 	bic.w	r3, r3, #7
 8007a94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	f003 0307 	and.w	r3, r3, #7
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00a      	beq.n	8007ab6 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	617b      	str	r3, [r7, #20]
}
 8007ab2:	bf00      	nop
 8007ab4:	e7fe      	b.n	8007ab4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	61fb      	str	r3, [r7, #28]
 8007aba:	e012      	b.n	8007ae2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	7819      	ldrb	r1, [r3, #0]
 8007ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	4413      	add	r3, r2
 8007aca:	3334      	adds	r3, #52	; 0x34
 8007acc:	460a      	mov	r2, r1
 8007ace:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d006      	beq.n	8007aea <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	61fb      	str	r3, [r7, #28]
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	2b0f      	cmp	r3, #15
 8007ae6:	d9e9      	bls.n	8007abc <prvInitialiseNewTask+0x5e>
 8007ae8:	e000      	b.n	8007aec <prvInitialiseNewTask+0x8e>
		{
			break;
 8007aea:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	2b37      	cmp	r3, #55	; 0x37
 8007af8:	d901      	bls.n	8007afe <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007afa:	2337      	movs	r3, #55	; 0x37
 8007afc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b02:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b08:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b12:	3304      	adds	r3, #4
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7ff f987 	bl	8006e28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	3318      	adds	r3, #24
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7ff f982 	bl	8006e28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b28:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b32:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b38:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	68f9      	ldr	r1, [r7, #12]
 8007b4c:	69b8      	ldr	r0, [r7, #24]
 8007b4e:	f001 f8f5 	bl	8008d3c <pxPortInitialiseStack>
 8007b52:	4602      	mov	r2, r0
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b56:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d002      	beq.n	8007b64 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b64:	bf00      	nop
 8007b66:	3720      	adds	r7, #32
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b74:	f001 fa0e 	bl	8008f94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b78:	4b2d      	ldr	r3, [pc, #180]	; (8007c30 <prvAddNewTaskToReadyList+0xc4>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	4a2c      	ldr	r2, [pc, #176]	; (8007c30 <prvAddNewTaskToReadyList+0xc4>)
 8007b80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b82:	4b2c      	ldr	r3, [pc, #176]	; (8007c34 <prvAddNewTaskToReadyList+0xc8>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d109      	bne.n	8007b9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b8a:	4a2a      	ldr	r2, [pc, #168]	; (8007c34 <prvAddNewTaskToReadyList+0xc8>)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b90:	4b27      	ldr	r3, [pc, #156]	; (8007c30 <prvAddNewTaskToReadyList+0xc4>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d110      	bne.n	8007bba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b98:	f000 fc1a 	bl	80083d0 <prvInitialiseTaskLists>
 8007b9c:	e00d      	b.n	8007bba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b9e:	4b26      	ldr	r3, [pc, #152]	; (8007c38 <prvAddNewTaskToReadyList+0xcc>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d109      	bne.n	8007bba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ba6:	4b23      	ldr	r3, [pc, #140]	; (8007c34 <prvAddNewTaskToReadyList+0xc8>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d802      	bhi.n	8007bba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007bb4:	4a1f      	ldr	r2, [pc, #124]	; (8007c34 <prvAddNewTaskToReadyList+0xc8>)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007bba:	4b20      	ldr	r3, [pc, #128]	; (8007c3c <prvAddNewTaskToReadyList+0xd0>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	4a1e      	ldr	r2, [pc, #120]	; (8007c3c <prvAddNewTaskToReadyList+0xd0>)
 8007bc2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007bc4:	4b1d      	ldr	r3, [pc, #116]	; (8007c3c <prvAddNewTaskToReadyList+0xd0>)
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd0:	4b1b      	ldr	r3, [pc, #108]	; (8007c40 <prvAddNewTaskToReadyList+0xd4>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d903      	bls.n	8007be0 <prvAddNewTaskToReadyList+0x74>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bdc:	4a18      	ldr	r2, [pc, #96]	; (8007c40 <prvAddNewTaskToReadyList+0xd4>)
 8007bde:	6013      	str	r3, [r2, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be4:	4613      	mov	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4a15      	ldr	r2, [pc, #84]	; (8007c44 <prvAddNewTaskToReadyList+0xd8>)
 8007bee:	441a      	add	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	3304      	adds	r3, #4
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	f7ff f923 	bl	8006e42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007bfc:	f001 f9fa 	bl	8008ff4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c00:	4b0d      	ldr	r3, [pc, #52]	; (8007c38 <prvAddNewTaskToReadyList+0xcc>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00e      	beq.n	8007c26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c08:	4b0a      	ldr	r3, [pc, #40]	; (8007c34 <prvAddNewTaskToReadyList+0xc8>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d207      	bcs.n	8007c26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c16:	4b0c      	ldr	r3, [pc, #48]	; (8007c48 <prvAddNewTaskToReadyList+0xdc>)
 8007c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c26:	bf00      	nop
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	200017a4 	.word	0x200017a4
 8007c34:	200012d0 	.word	0x200012d0
 8007c38:	200017b0 	.word	0x200017b0
 8007c3c:	200017c0 	.word	0x200017c0
 8007c40:	200017ac 	.word	0x200017ac
 8007c44:	200012d4 	.word	0x200012d4
 8007c48:	e000ed04 	.word	0xe000ed04

08007c4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c54:	2300      	movs	r3, #0
 8007c56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d017      	beq.n	8007c8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c5e:	4b13      	ldr	r3, [pc, #76]	; (8007cac <vTaskDelay+0x60>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00a      	beq.n	8007c7c <vTaskDelay+0x30>
	__asm volatile
 8007c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	60bb      	str	r3, [r7, #8]
}
 8007c78:	bf00      	nop
 8007c7a:	e7fe      	b.n	8007c7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007c7c:	f000 f880 	bl	8007d80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c80:	2100      	movs	r1, #0
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fcf4 	bl	8008670 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c88:	f000 f888 	bl	8007d9c <xTaskResumeAll>
 8007c8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d107      	bne.n	8007ca4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007c94:	4b06      	ldr	r3, [pc, #24]	; (8007cb0 <vTaskDelay+0x64>)
 8007c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c9a:	601a      	str	r2, [r3, #0]
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ca4:	bf00      	nop
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	200017cc 	.word	0x200017cc
 8007cb0:	e000ed04 	.word	0xe000ed04

08007cb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08a      	sub	sp, #40	; 0x28
 8007cb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007cc2:	463a      	mov	r2, r7
 8007cc4:	1d39      	adds	r1, r7, #4
 8007cc6:	f107 0308 	add.w	r3, r7, #8
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7ff f858 	bl	8006d80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	9202      	str	r2, [sp, #8]
 8007cd8:	9301      	str	r3, [sp, #4]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	460a      	mov	r2, r1
 8007ce2:	4921      	ldr	r1, [pc, #132]	; (8007d68 <vTaskStartScheduler+0xb4>)
 8007ce4:	4821      	ldr	r0, [pc, #132]	; (8007d6c <vTaskStartScheduler+0xb8>)
 8007ce6:	f7ff fe19 	bl	800791c <xTaskCreateStatic>
 8007cea:	4603      	mov	r3, r0
 8007cec:	4a20      	ldr	r2, [pc, #128]	; (8007d70 <vTaskStartScheduler+0xbc>)
 8007cee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007cf0:	4b1f      	ldr	r3, [pc, #124]	; (8007d70 <vTaskStartScheduler+0xbc>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	617b      	str	r3, [r7, #20]
 8007cfc:	e001      	b.n	8007d02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d102      	bne.n	8007d0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007d08:	f000 fd06 	bl	8008718 <xTimerCreateTimerTask>
 8007d0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d116      	bne.n	8007d42 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	613b      	str	r3, [r7, #16]
}
 8007d26:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d28:	4b12      	ldr	r3, [pc, #72]	; (8007d74 <vTaskStartScheduler+0xc0>)
 8007d2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d30:	4b11      	ldr	r3, [pc, #68]	; (8007d78 <vTaskStartScheduler+0xc4>)
 8007d32:	2201      	movs	r2, #1
 8007d34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007d36:	4b11      	ldr	r3, [pc, #68]	; (8007d7c <vTaskStartScheduler+0xc8>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d3c:	f001 f888 	bl	8008e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d40:	e00e      	b.n	8007d60 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d48:	d10a      	bne.n	8007d60 <vTaskStartScheduler+0xac>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	60fb      	str	r3, [r7, #12]
}
 8007d5c:	bf00      	nop
 8007d5e:	e7fe      	b.n	8007d5e <vTaskStartScheduler+0xaa>
}
 8007d60:	bf00      	nop
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	08009ae4 	.word	0x08009ae4
 8007d6c:	080083a1 	.word	0x080083a1
 8007d70:	200017c8 	.word	0x200017c8
 8007d74:	200017c4 	.word	0x200017c4
 8007d78:	200017b0 	.word	0x200017b0
 8007d7c:	200017a8 	.word	0x200017a8

08007d80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d80:	b480      	push	{r7}
 8007d82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007d84:	4b04      	ldr	r3, [pc, #16]	; (8007d98 <vTaskSuspendAll+0x18>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	4a03      	ldr	r2, [pc, #12]	; (8007d98 <vTaskSuspendAll+0x18>)
 8007d8c:	6013      	str	r3, [r2, #0]
}
 8007d8e:	bf00      	nop
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	200017cc 	.word	0x200017cc

08007d9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007da2:	2300      	movs	r3, #0
 8007da4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007da6:	2300      	movs	r3, #0
 8007da8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007daa:	4b42      	ldr	r3, [pc, #264]	; (8007eb4 <xTaskResumeAll+0x118>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10a      	bne.n	8007dc8 <xTaskResumeAll+0x2c>
	__asm volatile
 8007db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db6:	f383 8811 	msr	BASEPRI, r3
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	603b      	str	r3, [r7, #0]
}
 8007dc4:	bf00      	nop
 8007dc6:	e7fe      	b.n	8007dc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007dc8:	f001 f8e4 	bl	8008f94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007dcc:	4b39      	ldr	r3, [pc, #228]	; (8007eb4 <xTaskResumeAll+0x118>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	4a38      	ldr	r2, [pc, #224]	; (8007eb4 <xTaskResumeAll+0x118>)
 8007dd4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dd6:	4b37      	ldr	r3, [pc, #220]	; (8007eb4 <xTaskResumeAll+0x118>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d162      	bne.n	8007ea4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007dde:	4b36      	ldr	r3, [pc, #216]	; (8007eb8 <xTaskResumeAll+0x11c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d05e      	beq.n	8007ea4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007de6:	e02f      	b.n	8007e48 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007de8:	4b34      	ldr	r3, [pc, #208]	; (8007ebc <xTaskResumeAll+0x120>)
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3318      	adds	r3, #24
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7ff f881 	bl	8006efc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7ff f87c 	bl	8006efc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e08:	4b2d      	ldr	r3, [pc, #180]	; (8007ec0 <xTaskResumeAll+0x124>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d903      	bls.n	8007e18 <xTaskResumeAll+0x7c>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e14:	4a2a      	ldr	r2, [pc, #168]	; (8007ec0 <xTaskResumeAll+0x124>)
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4a27      	ldr	r2, [pc, #156]	; (8007ec4 <xTaskResumeAll+0x128>)
 8007e26:	441a      	add	r2, r3
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	3304      	adds	r3, #4
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	4610      	mov	r0, r2
 8007e30:	f7ff f807 	bl	8006e42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e38:	4b23      	ldr	r3, [pc, #140]	; (8007ec8 <xTaskResumeAll+0x12c>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d302      	bcc.n	8007e48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007e42:	4b22      	ldr	r3, [pc, #136]	; (8007ecc <xTaskResumeAll+0x130>)
 8007e44:	2201      	movs	r2, #1
 8007e46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e48:	4b1c      	ldr	r3, [pc, #112]	; (8007ebc <xTaskResumeAll+0x120>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1cb      	bne.n	8007de8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e56:	f000 fb59 	bl	800850c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007e5a:	4b1d      	ldr	r3, [pc, #116]	; (8007ed0 <xTaskResumeAll+0x134>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d010      	beq.n	8007e88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e66:	f000 f847 	bl	8007ef8 <xTaskIncrementTick>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007e70:	4b16      	ldr	r3, [pc, #88]	; (8007ecc <xTaskResumeAll+0x130>)
 8007e72:	2201      	movs	r2, #1
 8007e74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1f1      	bne.n	8007e66 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007e82:	4b13      	ldr	r3, [pc, #76]	; (8007ed0 <xTaskResumeAll+0x134>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e88:	4b10      	ldr	r3, [pc, #64]	; (8007ecc <xTaskResumeAll+0x130>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d009      	beq.n	8007ea4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e90:	2301      	movs	r3, #1
 8007e92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e94:	4b0f      	ldr	r3, [pc, #60]	; (8007ed4 <xTaskResumeAll+0x138>)
 8007e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ea4:	f001 f8a6 	bl	8008ff4 <vPortExitCritical>

	return xAlreadyYielded;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	200017cc 	.word	0x200017cc
 8007eb8:	200017a4 	.word	0x200017a4
 8007ebc:	20001764 	.word	0x20001764
 8007ec0:	200017ac 	.word	0x200017ac
 8007ec4:	200012d4 	.word	0x200012d4
 8007ec8:	200012d0 	.word	0x200012d0
 8007ecc:	200017b8 	.word	0x200017b8
 8007ed0:	200017b4 	.word	0x200017b4
 8007ed4:	e000ed04 	.word	0xe000ed04

08007ed8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007ede:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <xTaskGetTickCount+0x1c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ee4:	687b      	ldr	r3, [r7, #4]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	200017a8 	.word	0x200017a8

08007ef8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007efe:	2300      	movs	r3, #0
 8007f00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f02:	4b51      	ldr	r3, [pc, #324]	; (8008048 <xTaskIncrementTick+0x150>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f040 808e 	bne.w	8008028 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f0c:	4b4f      	ldr	r3, [pc, #316]	; (800804c <xTaskIncrementTick+0x154>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3301      	adds	r3, #1
 8007f12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f14:	4a4d      	ldr	r2, [pc, #308]	; (800804c <xTaskIncrementTick+0x154>)
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d120      	bne.n	8007f62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f20:	4b4b      	ldr	r3, [pc, #300]	; (8008050 <xTaskIncrementTick+0x158>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00a      	beq.n	8007f40 <xTaskIncrementTick+0x48>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	603b      	str	r3, [r7, #0]
}
 8007f3c:	bf00      	nop
 8007f3e:	e7fe      	b.n	8007f3e <xTaskIncrementTick+0x46>
 8007f40:	4b43      	ldr	r3, [pc, #268]	; (8008050 <xTaskIncrementTick+0x158>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	60fb      	str	r3, [r7, #12]
 8007f46:	4b43      	ldr	r3, [pc, #268]	; (8008054 <xTaskIncrementTick+0x15c>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a41      	ldr	r2, [pc, #260]	; (8008050 <xTaskIncrementTick+0x158>)
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	4a41      	ldr	r2, [pc, #260]	; (8008054 <xTaskIncrementTick+0x15c>)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	4b40      	ldr	r3, [pc, #256]	; (8008058 <xTaskIncrementTick+0x160>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	4a3f      	ldr	r2, [pc, #252]	; (8008058 <xTaskIncrementTick+0x160>)
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	f000 fad5 	bl	800850c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f62:	4b3e      	ldr	r3, [pc, #248]	; (800805c <xTaskIncrementTick+0x164>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d34e      	bcc.n	800800a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f6c:	4b38      	ldr	r3, [pc, #224]	; (8008050 <xTaskIncrementTick+0x158>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <xTaskIncrementTick+0x82>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e000      	b.n	8007f7c <xTaskIncrementTick+0x84>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d004      	beq.n	8007f8a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f80:	4b36      	ldr	r3, [pc, #216]	; (800805c <xTaskIncrementTick+0x164>)
 8007f82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f86:	601a      	str	r2, [r3, #0]
					break;
 8007f88:	e03f      	b.n	800800a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f8a:	4b31      	ldr	r3, [pc, #196]	; (8008050 <xTaskIncrementTick+0x158>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d203      	bcs.n	8007faa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007fa2:	4a2e      	ldr	r2, [pc, #184]	; (800805c <xTaskIncrementTick+0x164>)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6013      	str	r3, [r2, #0]
						break;
 8007fa8:	e02f      	b.n	800800a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	3304      	adds	r3, #4
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fe ffa4 	bl	8006efc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d004      	beq.n	8007fc6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	3318      	adds	r3, #24
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7fe ff9b 	bl	8006efc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fca:	4b25      	ldr	r3, [pc, #148]	; (8008060 <xTaskIncrementTick+0x168>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d903      	bls.n	8007fda <xTaskIncrementTick+0xe2>
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd6:	4a22      	ldr	r2, [pc, #136]	; (8008060 <xTaskIncrementTick+0x168>)
 8007fd8:	6013      	str	r3, [r2, #0]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fde:	4613      	mov	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4a1f      	ldr	r2, [pc, #124]	; (8008064 <xTaskIncrementTick+0x16c>)
 8007fe8:	441a      	add	r2, r3
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	3304      	adds	r3, #4
 8007fee:	4619      	mov	r1, r3
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	f7fe ff26 	bl	8006e42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ffa:	4b1b      	ldr	r3, [pc, #108]	; (8008068 <xTaskIncrementTick+0x170>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008000:	429a      	cmp	r2, r3
 8008002:	d3b3      	bcc.n	8007f6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008004:	2301      	movs	r3, #1
 8008006:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008008:	e7b0      	b.n	8007f6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800800a:	4b17      	ldr	r3, [pc, #92]	; (8008068 <xTaskIncrementTick+0x170>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008010:	4914      	ldr	r1, [pc, #80]	; (8008064 <xTaskIncrementTick+0x16c>)
 8008012:	4613      	mov	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	440b      	add	r3, r1
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d907      	bls.n	8008032 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008022:	2301      	movs	r3, #1
 8008024:	617b      	str	r3, [r7, #20]
 8008026:	e004      	b.n	8008032 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008028:	4b10      	ldr	r3, [pc, #64]	; (800806c <xTaskIncrementTick+0x174>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	3301      	adds	r3, #1
 800802e:	4a0f      	ldr	r2, [pc, #60]	; (800806c <xTaskIncrementTick+0x174>)
 8008030:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008032:	4b0f      	ldr	r3, [pc, #60]	; (8008070 <xTaskIncrementTick+0x178>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800803a:	2301      	movs	r3, #1
 800803c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800803e:	697b      	ldr	r3, [r7, #20]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	200017cc 	.word	0x200017cc
 800804c:	200017a8 	.word	0x200017a8
 8008050:	2000175c 	.word	0x2000175c
 8008054:	20001760 	.word	0x20001760
 8008058:	200017bc 	.word	0x200017bc
 800805c:	200017c4 	.word	0x200017c4
 8008060:	200017ac 	.word	0x200017ac
 8008064:	200012d4 	.word	0x200012d4
 8008068:	200012d0 	.word	0x200012d0
 800806c:	200017b4 	.word	0x200017b4
 8008070:	200017b8 	.word	0x200017b8

08008074 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800807a:	4b28      	ldr	r3, [pc, #160]	; (800811c <vTaskSwitchContext+0xa8>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008082:	4b27      	ldr	r3, [pc, #156]	; (8008120 <vTaskSwitchContext+0xac>)
 8008084:	2201      	movs	r2, #1
 8008086:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008088:	e041      	b.n	800810e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800808a:	4b25      	ldr	r3, [pc, #148]	; (8008120 <vTaskSwitchContext+0xac>)
 800808c:	2200      	movs	r2, #0
 800808e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008090:	4b24      	ldr	r3, [pc, #144]	; (8008124 <vTaskSwitchContext+0xb0>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	e010      	b.n	80080ba <vTaskSwitchContext+0x46>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10a      	bne.n	80080b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800809e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	607b      	str	r3, [r7, #4]
}
 80080b0:	bf00      	nop
 80080b2:	e7fe      	b.n	80080b2 <vTaskSwitchContext+0x3e>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	3b01      	subs	r3, #1
 80080b8:	60fb      	str	r3, [r7, #12]
 80080ba:	491b      	ldr	r1, [pc, #108]	; (8008128 <vTaskSwitchContext+0xb4>)
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	4613      	mov	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	440b      	add	r3, r1
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d0e4      	beq.n	8008098 <vTaskSwitchContext+0x24>
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	4613      	mov	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4413      	add	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4a13      	ldr	r2, [pc, #76]	; (8008128 <vTaskSwitchContext+0xb4>)
 80080da:	4413      	add	r3, r2
 80080dc:	60bb      	str	r3, [r7, #8]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	605a      	str	r2, [r3, #4]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	3308      	adds	r3, #8
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d104      	bne.n	80080fe <vTaskSwitchContext+0x8a>
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	605a      	str	r2, [r3, #4]
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	4a09      	ldr	r2, [pc, #36]	; (800812c <vTaskSwitchContext+0xb8>)
 8008106:	6013      	str	r3, [r2, #0]
 8008108:	4a06      	ldr	r2, [pc, #24]	; (8008124 <vTaskSwitchContext+0xb0>)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6013      	str	r3, [r2, #0]
}
 800810e:	bf00      	nop
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	200017cc 	.word	0x200017cc
 8008120:	200017b8 	.word	0x200017b8
 8008124:	200017ac 	.word	0x200017ac
 8008128:	200012d4 	.word	0x200012d4
 800812c:	200012d0 	.word	0x200012d0

08008130 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10a      	bne.n	8008156 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	60fb      	str	r3, [r7, #12]
}
 8008152:	bf00      	nop
 8008154:	e7fe      	b.n	8008154 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008156:	4b07      	ldr	r3, [pc, #28]	; (8008174 <vTaskPlaceOnEventList+0x44>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3318      	adds	r3, #24
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7fe fe93 	bl	8006e8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008164:	2101      	movs	r1, #1
 8008166:	6838      	ldr	r0, [r7, #0]
 8008168:	f000 fa82 	bl	8008670 <prvAddCurrentTaskToDelayedList>
}
 800816c:	bf00      	nop
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	200012d0 	.word	0x200012d0

08008178 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10a      	bne.n	80081a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	617b      	str	r3, [r7, #20]
}
 800819c:	bf00      	nop
 800819e:	e7fe      	b.n	800819e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081a0:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <vTaskPlaceOnEventListRestricted+0x54>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3318      	adds	r3, #24
 80081a6:	4619      	mov	r1, r3
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f7fe fe4a 	bl	8006e42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80081b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80081ba:	6879      	ldr	r1, [r7, #4]
 80081bc:	68b8      	ldr	r0, [r7, #8]
 80081be:	f000 fa57 	bl	8008670 <prvAddCurrentTaskToDelayedList>
	}
 80081c2:	bf00      	nop
 80081c4:	3718      	adds	r7, #24
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	200012d0 	.word	0x200012d0

080081d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10a      	bne.n	80081fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80081e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ea:	f383 8811 	msr	BASEPRI, r3
 80081ee:	f3bf 8f6f 	isb	sy
 80081f2:	f3bf 8f4f 	dsb	sy
 80081f6:	60fb      	str	r3, [r7, #12]
}
 80081f8:	bf00      	nop
 80081fa:	e7fe      	b.n	80081fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	3318      	adds	r3, #24
 8008200:	4618      	mov	r0, r3
 8008202:	f7fe fe7b 	bl	8006efc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008206:	4b1e      	ldr	r3, [pc, #120]	; (8008280 <xTaskRemoveFromEventList+0xb0>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d11d      	bne.n	800824a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	3304      	adds	r3, #4
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe fe72 	bl	8006efc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821c:	4b19      	ldr	r3, [pc, #100]	; (8008284 <xTaskRemoveFromEventList+0xb4>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	429a      	cmp	r2, r3
 8008222:	d903      	bls.n	800822c <xTaskRemoveFromEventList+0x5c>
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008228:	4a16      	ldr	r2, [pc, #88]	; (8008284 <xTaskRemoveFromEventList+0xb4>)
 800822a:	6013      	str	r3, [r2, #0]
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008230:	4613      	mov	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4a13      	ldr	r2, [pc, #76]	; (8008288 <xTaskRemoveFromEventList+0xb8>)
 800823a:	441a      	add	r2, r3
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	3304      	adds	r3, #4
 8008240:	4619      	mov	r1, r3
 8008242:	4610      	mov	r0, r2
 8008244:	f7fe fdfd 	bl	8006e42 <vListInsertEnd>
 8008248:	e005      	b.n	8008256 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	3318      	adds	r3, #24
 800824e:	4619      	mov	r1, r3
 8008250:	480e      	ldr	r0, [pc, #56]	; (800828c <xTaskRemoveFromEventList+0xbc>)
 8008252:	f7fe fdf6 	bl	8006e42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825a:	4b0d      	ldr	r3, [pc, #52]	; (8008290 <xTaskRemoveFromEventList+0xc0>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	429a      	cmp	r2, r3
 8008262:	d905      	bls.n	8008270 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008264:	2301      	movs	r3, #1
 8008266:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008268:	4b0a      	ldr	r3, [pc, #40]	; (8008294 <xTaskRemoveFromEventList+0xc4>)
 800826a:	2201      	movs	r2, #1
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	e001      	b.n	8008274 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008270:	2300      	movs	r3, #0
 8008272:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008274:	697b      	ldr	r3, [r7, #20]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3718      	adds	r7, #24
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	200017cc 	.word	0x200017cc
 8008284:	200017ac 	.word	0x200017ac
 8008288:	200012d4 	.word	0x200012d4
 800828c:	20001764 	.word	0x20001764
 8008290:	200012d0 	.word	0x200012d0
 8008294:	200017b8 	.word	0x200017b8

08008298 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082a0:	4b06      	ldr	r3, [pc, #24]	; (80082bc <vTaskInternalSetTimeOutState+0x24>)
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082a8:	4b05      	ldr	r3, [pc, #20]	; (80082c0 <vTaskInternalSetTimeOutState+0x28>)
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	605a      	str	r2, [r3, #4]
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	200017bc 	.word	0x200017bc
 80082c0:	200017a8 	.word	0x200017a8

080082c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10a      	bne.n	80082ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	613b      	str	r3, [r7, #16]
}
 80082e6:	bf00      	nop
 80082e8:	e7fe      	b.n	80082e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10a      	bne.n	8008306 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	60fb      	str	r3, [r7, #12]
}
 8008302:	bf00      	nop
 8008304:	e7fe      	b.n	8008304 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008306:	f000 fe45 	bl	8008f94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800830a:	4b1d      	ldr	r3, [pc, #116]	; (8008380 <xTaskCheckForTimeOut+0xbc>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	69ba      	ldr	r2, [r7, #24]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008322:	d102      	bne.n	800832a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008324:	2300      	movs	r3, #0
 8008326:	61fb      	str	r3, [r7, #28]
 8008328:	e023      	b.n	8008372 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	4b15      	ldr	r3, [pc, #84]	; (8008384 <xTaskCheckForTimeOut+0xc0>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	429a      	cmp	r2, r3
 8008334:	d007      	beq.n	8008346 <xTaskCheckForTimeOut+0x82>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	429a      	cmp	r2, r3
 800833e:	d302      	bcc.n	8008346 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008340:	2301      	movs	r3, #1
 8008342:	61fb      	str	r3, [r7, #28]
 8008344:	e015      	b.n	8008372 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	429a      	cmp	r2, r3
 800834e:	d20b      	bcs.n	8008368 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	1ad2      	subs	r2, r2, r3
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7ff ff9b 	bl	8008298 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008362:	2300      	movs	r3, #0
 8008364:	61fb      	str	r3, [r7, #28]
 8008366:	e004      	b.n	8008372 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	2200      	movs	r2, #0
 800836c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800836e:	2301      	movs	r3, #1
 8008370:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008372:	f000 fe3f 	bl	8008ff4 <vPortExitCritical>

	return xReturn;
 8008376:	69fb      	ldr	r3, [r7, #28]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3720      	adds	r7, #32
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	200017a8 	.word	0x200017a8
 8008384:	200017bc 	.word	0x200017bc

08008388 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008388:	b480      	push	{r7}
 800838a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800838c:	4b03      	ldr	r3, [pc, #12]	; (800839c <vTaskMissedYield+0x14>)
 800838e:	2201      	movs	r2, #1
 8008390:	601a      	str	r2, [r3, #0]
}
 8008392:	bf00      	nop
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	200017b8 	.word	0x200017b8

080083a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083a8:	f000 f852 	bl	8008450 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083ac:	4b06      	ldr	r3, [pc, #24]	; (80083c8 <prvIdleTask+0x28>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d9f9      	bls.n	80083a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80083b4:	4b05      	ldr	r3, [pc, #20]	; (80083cc <prvIdleTask+0x2c>)
 80083b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083c4:	e7f0      	b.n	80083a8 <prvIdleTask+0x8>
 80083c6:	bf00      	nop
 80083c8:	200012d4 	.word	0x200012d4
 80083cc:	e000ed04 	.word	0xe000ed04

080083d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083d6:	2300      	movs	r3, #0
 80083d8:	607b      	str	r3, [r7, #4]
 80083da:	e00c      	b.n	80083f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	4613      	mov	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4a12      	ldr	r2, [pc, #72]	; (8008430 <prvInitialiseTaskLists+0x60>)
 80083e8:	4413      	add	r3, r2
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe fcfc 	bl	8006de8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	3301      	adds	r3, #1
 80083f4:	607b      	str	r3, [r7, #4]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b37      	cmp	r3, #55	; 0x37
 80083fa:	d9ef      	bls.n	80083dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083fc:	480d      	ldr	r0, [pc, #52]	; (8008434 <prvInitialiseTaskLists+0x64>)
 80083fe:	f7fe fcf3 	bl	8006de8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008402:	480d      	ldr	r0, [pc, #52]	; (8008438 <prvInitialiseTaskLists+0x68>)
 8008404:	f7fe fcf0 	bl	8006de8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008408:	480c      	ldr	r0, [pc, #48]	; (800843c <prvInitialiseTaskLists+0x6c>)
 800840a:	f7fe fced 	bl	8006de8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800840e:	480c      	ldr	r0, [pc, #48]	; (8008440 <prvInitialiseTaskLists+0x70>)
 8008410:	f7fe fcea 	bl	8006de8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008414:	480b      	ldr	r0, [pc, #44]	; (8008444 <prvInitialiseTaskLists+0x74>)
 8008416:	f7fe fce7 	bl	8006de8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800841a:	4b0b      	ldr	r3, [pc, #44]	; (8008448 <prvInitialiseTaskLists+0x78>)
 800841c:	4a05      	ldr	r2, [pc, #20]	; (8008434 <prvInitialiseTaskLists+0x64>)
 800841e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008420:	4b0a      	ldr	r3, [pc, #40]	; (800844c <prvInitialiseTaskLists+0x7c>)
 8008422:	4a05      	ldr	r2, [pc, #20]	; (8008438 <prvInitialiseTaskLists+0x68>)
 8008424:	601a      	str	r2, [r3, #0]
}
 8008426:	bf00      	nop
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	200012d4 	.word	0x200012d4
 8008434:	20001734 	.word	0x20001734
 8008438:	20001748 	.word	0x20001748
 800843c:	20001764 	.word	0x20001764
 8008440:	20001778 	.word	0x20001778
 8008444:	20001790 	.word	0x20001790
 8008448:	2000175c 	.word	0x2000175c
 800844c:	20001760 	.word	0x20001760

08008450 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008456:	e019      	b.n	800848c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008458:	f000 fd9c 	bl	8008f94 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800845c:	4b10      	ldr	r3, [pc, #64]	; (80084a0 <prvCheckTasksWaitingTermination+0x50>)
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	3304      	adds	r3, #4
 8008468:	4618      	mov	r0, r3
 800846a:	f7fe fd47 	bl	8006efc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800846e:	4b0d      	ldr	r3, [pc, #52]	; (80084a4 <prvCheckTasksWaitingTermination+0x54>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3b01      	subs	r3, #1
 8008474:	4a0b      	ldr	r2, [pc, #44]	; (80084a4 <prvCheckTasksWaitingTermination+0x54>)
 8008476:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008478:	4b0b      	ldr	r3, [pc, #44]	; (80084a8 <prvCheckTasksWaitingTermination+0x58>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3b01      	subs	r3, #1
 800847e:	4a0a      	ldr	r2, [pc, #40]	; (80084a8 <prvCheckTasksWaitingTermination+0x58>)
 8008480:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008482:	f000 fdb7 	bl	8008ff4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f810 	bl	80084ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800848c:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <prvCheckTasksWaitingTermination+0x58>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1e1      	bne.n	8008458 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008494:	bf00      	nop
 8008496:	bf00      	nop
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	20001778 	.word	0x20001778
 80084a4:	200017a4 	.word	0x200017a4
 80084a8:	2000178c 	.word	0x2000178c

080084ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d108      	bne.n	80084d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 ff4c 	bl	8009360 <vPortFree>
				vPortFree( pxTCB );
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 ff49 	bl	8009360 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084ce:	e018      	b.n	8008502 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d103      	bne.n	80084e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 ff40 	bl	8009360 <vPortFree>
	}
 80084e0:	e00f      	b.n	8008502 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d00a      	beq.n	8008502 <prvDeleteTCB+0x56>
	__asm volatile
 80084ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	60fb      	str	r3, [r7, #12]
}
 80084fe:	bf00      	nop
 8008500:	e7fe      	b.n	8008500 <prvDeleteTCB+0x54>
	}
 8008502:	bf00      	nop
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
	...

0800850c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008512:	4b0f      	ldr	r3, [pc, #60]	; (8008550 <prvResetNextTaskUnblockTime+0x44>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <prvResetNextTaskUnblockTime+0x14>
 800851c:	2301      	movs	r3, #1
 800851e:	e000      	b.n	8008522 <prvResetNextTaskUnblockTime+0x16>
 8008520:	2300      	movs	r3, #0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d004      	beq.n	8008530 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008526:	4b0b      	ldr	r3, [pc, #44]	; (8008554 <prvResetNextTaskUnblockTime+0x48>)
 8008528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800852c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800852e:	e008      	b.n	8008542 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008530:	4b07      	ldr	r3, [pc, #28]	; (8008550 <prvResetNextTaskUnblockTime+0x44>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	4a05      	ldr	r2, [pc, #20]	; (8008554 <prvResetNextTaskUnblockTime+0x48>)
 8008540:	6013      	str	r3, [r2, #0]
}
 8008542:	bf00      	nop
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	2000175c 	.word	0x2000175c
 8008554:	200017c4 	.word	0x200017c4

08008558 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800855e:	4b0b      	ldr	r3, [pc, #44]	; (800858c <xTaskGetSchedulerState+0x34>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d102      	bne.n	800856c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008566:	2301      	movs	r3, #1
 8008568:	607b      	str	r3, [r7, #4]
 800856a:	e008      	b.n	800857e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800856c:	4b08      	ldr	r3, [pc, #32]	; (8008590 <xTaskGetSchedulerState+0x38>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d102      	bne.n	800857a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008574:	2302      	movs	r3, #2
 8008576:	607b      	str	r3, [r7, #4]
 8008578:	e001      	b.n	800857e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800857a:	2300      	movs	r3, #0
 800857c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800857e:	687b      	ldr	r3, [r7, #4]
	}
 8008580:	4618      	mov	r0, r3
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	200017b0 	.word	0x200017b0
 8008590:	200017cc 	.word	0x200017cc

08008594 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80085a0:	2300      	movs	r3, #0
 80085a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d056      	beq.n	8008658 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80085aa:	4b2e      	ldr	r3, [pc, #184]	; (8008664 <xTaskPriorityDisinherit+0xd0>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	693a      	ldr	r2, [r7, #16]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d00a      	beq.n	80085ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80085b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	60fb      	str	r3, [r7, #12]
}
 80085c6:	bf00      	nop
 80085c8:	e7fe      	b.n	80085c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10a      	bne.n	80085e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	60bb      	str	r3, [r7, #8]
}
 80085e4:	bf00      	nop
 80085e6:	e7fe      	b.n	80085e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ec:	1e5a      	subs	r2, r3, #1
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d02c      	beq.n	8008658 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008602:	2b00      	cmp	r3, #0
 8008604:	d128      	bne.n	8008658 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	3304      	adds	r3, #4
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe fc76 	bl	8006efc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008628:	4b0f      	ldr	r3, [pc, #60]	; (8008668 <xTaskPriorityDisinherit+0xd4>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	429a      	cmp	r2, r3
 800862e:	d903      	bls.n	8008638 <xTaskPriorityDisinherit+0xa4>
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008634:	4a0c      	ldr	r2, [pc, #48]	; (8008668 <xTaskPriorityDisinherit+0xd4>)
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863c:	4613      	mov	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4a09      	ldr	r2, [pc, #36]	; (800866c <xTaskPriorityDisinherit+0xd8>)
 8008646:	441a      	add	r2, r3
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	3304      	adds	r3, #4
 800864c:	4619      	mov	r1, r3
 800864e:	4610      	mov	r0, r2
 8008650:	f7fe fbf7 	bl	8006e42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008654:	2301      	movs	r3, #1
 8008656:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008658:	697b      	ldr	r3, [r7, #20]
	}
 800865a:	4618      	mov	r0, r3
 800865c:	3718      	adds	r7, #24
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	200012d0 	.word	0x200012d0
 8008668:	200017ac 	.word	0x200017ac
 800866c:	200012d4 	.word	0x200012d4

08008670 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800867a:	4b21      	ldr	r3, [pc, #132]	; (8008700 <prvAddCurrentTaskToDelayedList+0x90>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008680:	4b20      	ldr	r3, [pc, #128]	; (8008704 <prvAddCurrentTaskToDelayedList+0x94>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3304      	adds	r3, #4
 8008686:	4618      	mov	r0, r3
 8008688:	f7fe fc38 	bl	8006efc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008692:	d10a      	bne.n	80086aa <prvAddCurrentTaskToDelayedList+0x3a>
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d007      	beq.n	80086aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800869a:	4b1a      	ldr	r3, [pc, #104]	; (8008704 <prvAddCurrentTaskToDelayedList+0x94>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	3304      	adds	r3, #4
 80086a0:	4619      	mov	r1, r3
 80086a2:	4819      	ldr	r0, [pc, #100]	; (8008708 <prvAddCurrentTaskToDelayedList+0x98>)
 80086a4:	f7fe fbcd 	bl	8006e42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086a8:	e026      	b.n	80086f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4413      	add	r3, r2
 80086b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086b2:	4b14      	ldr	r3, [pc, #80]	; (8008704 <prvAddCurrentTaskToDelayedList+0x94>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d209      	bcs.n	80086d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086c2:	4b12      	ldr	r3, [pc, #72]	; (800870c <prvAddCurrentTaskToDelayedList+0x9c>)
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	4b0f      	ldr	r3, [pc, #60]	; (8008704 <prvAddCurrentTaskToDelayedList+0x94>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3304      	adds	r3, #4
 80086cc:	4619      	mov	r1, r3
 80086ce:	4610      	mov	r0, r2
 80086d0:	f7fe fbdb 	bl	8006e8a <vListInsert>
}
 80086d4:	e010      	b.n	80086f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086d6:	4b0e      	ldr	r3, [pc, #56]	; (8008710 <prvAddCurrentTaskToDelayedList+0xa0>)
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	4b0a      	ldr	r3, [pc, #40]	; (8008704 <prvAddCurrentTaskToDelayedList+0x94>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3304      	adds	r3, #4
 80086e0:	4619      	mov	r1, r3
 80086e2:	4610      	mov	r0, r2
 80086e4:	f7fe fbd1 	bl	8006e8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086e8:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d202      	bcs.n	80086f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80086f2:	4a08      	ldr	r2, [pc, #32]	; (8008714 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	6013      	str	r3, [r2, #0]
}
 80086f8:	bf00      	nop
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	200017a8 	.word	0x200017a8
 8008704:	200012d0 	.word	0x200012d0
 8008708:	20001790 	.word	0x20001790
 800870c:	20001760 	.word	0x20001760
 8008710:	2000175c 	.word	0x2000175c
 8008714:	200017c4 	.word	0x200017c4

08008718 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08a      	sub	sp, #40	; 0x28
 800871c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800871e:	2300      	movs	r3, #0
 8008720:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008722:	f000 facb 	bl	8008cbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008726:	4b1c      	ldr	r3, [pc, #112]	; (8008798 <xTimerCreateTimerTask+0x80>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d021      	beq.n	8008772 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008732:	2300      	movs	r3, #0
 8008734:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008736:	1d3a      	adds	r2, r7, #4
 8008738:	f107 0108 	add.w	r1, r7, #8
 800873c:	f107 030c 	add.w	r3, r7, #12
 8008740:	4618      	mov	r0, r3
 8008742:	f7fe fb37 	bl	8006db4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008746:	6879      	ldr	r1, [r7, #4]
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	9202      	str	r2, [sp, #8]
 800874e:	9301      	str	r3, [sp, #4]
 8008750:	2302      	movs	r3, #2
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	2300      	movs	r3, #0
 8008756:	460a      	mov	r2, r1
 8008758:	4910      	ldr	r1, [pc, #64]	; (800879c <xTimerCreateTimerTask+0x84>)
 800875a:	4811      	ldr	r0, [pc, #68]	; (80087a0 <xTimerCreateTimerTask+0x88>)
 800875c:	f7ff f8de 	bl	800791c <xTaskCreateStatic>
 8008760:	4603      	mov	r3, r0
 8008762:	4a10      	ldr	r2, [pc, #64]	; (80087a4 <xTimerCreateTimerTask+0x8c>)
 8008764:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008766:	4b0f      	ldr	r3, [pc, #60]	; (80087a4 <xTimerCreateTimerTask+0x8c>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800876e:	2301      	movs	r3, #1
 8008770:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10a      	bne.n	800878e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877c:	f383 8811 	msr	BASEPRI, r3
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	613b      	str	r3, [r7, #16]
}
 800878a:	bf00      	nop
 800878c:	e7fe      	b.n	800878c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800878e:	697b      	ldr	r3, [r7, #20]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	20001800 	.word	0x20001800
 800879c:	08009aec 	.word	0x08009aec
 80087a0:	080088c5 	.word	0x080088c5
 80087a4:	20001804 	.word	0x20001804

080087a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b08a      	sub	sp, #40	; 0x28
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
 80087b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80087b6:	2300      	movs	r3, #0
 80087b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10a      	bne.n	80087d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80087c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	623b      	str	r3, [r7, #32]
}
 80087d2:	bf00      	nop
 80087d4:	e7fe      	b.n	80087d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80087d6:	4b1a      	ldr	r3, [pc, #104]	; (8008840 <xTimerGenericCommand+0x98>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d02a      	beq.n	8008834 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2b05      	cmp	r3, #5
 80087ee:	dc18      	bgt.n	8008822 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087f0:	f7ff feb2 	bl	8008558 <xTaskGetSchedulerState>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d109      	bne.n	800880e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80087fa:	4b11      	ldr	r3, [pc, #68]	; (8008840 <xTimerGenericCommand+0x98>)
 80087fc:	6818      	ldr	r0, [r3, #0]
 80087fe:	f107 0110 	add.w	r1, r7, #16
 8008802:	2300      	movs	r3, #0
 8008804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008806:	f7fe fca5 	bl	8007154 <xQueueGenericSend>
 800880a:	6278      	str	r0, [r7, #36]	; 0x24
 800880c:	e012      	b.n	8008834 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800880e:	4b0c      	ldr	r3, [pc, #48]	; (8008840 <xTimerGenericCommand+0x98>)
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	f107 0110 	add.w	r1, r7, #16
 8008816:	2300      	movs	r3, #0
 8008818:	2200      	movs	r2, #0
 800881a:	f7fe fc9b 	bl	8007154 <xQueueGenericSend>
 800881e:	6278      	str	r0, [r7, #36]	; 0x24
 8008820:	e008      	b.n	8008834 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008822:	4b07      	ldr	r3, [pc, #28]	; (8008840 <xTimerGenericCommand+0x98>)
 8008824:	6818      	ldr	r0, [r3, #0]
 8008826:	f107 0110 	add.w	r1, r7, #16
 800882a:	2300      	movs	r3, #0
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	f7fe fd8f 	bl	8007350 <xQueueGenericSendFromISR>
 8008832:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008836:	4618      	mov	r0, r3
 8008838:	3728      	adds	r7, #40	; 0x28
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20001800 	.word	0x20001800

08008844 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af02      	add	r7, sp, #8
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800884e:	4b1c      	ldr	r3, [pc, #112]	; (80088c0 <prvProcessExpiredTimer+0x7c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	3304      	adds	r3, #4
 800885c:	4618      	mov	r0, r3
 800885e:	f7fe fb4d 	bl	8006efc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d122      	bne.n	80088b0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	699a      	ldr	r2, [r3, #24]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	18d1      	adds	r1, r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	6978      	ldr	r0, [r7, #20]
 8008878:	f000 f8c8 	bl	8008a0c <prvInsertTimerInActiveList>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d016      	beq.n	80088b0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008882:	2300      	movs	r3, #0
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	2300      	movs	r3, #0
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	2100      	movs	r1, #0
 800888c:	6978      	ldr	r0, [r7, #20]
 800888e:	f7ff ff8b 	bl	80087a8 <xTimerGenericCommand>
 8008892:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10a      	bne.n	80088b0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	60fb      	str	r3, [r7, #12]
}
 80088ac:	bf00      	nop
 80088ae:	e7fe      	b.n	80088ae <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b4:	6978      	ldr	r0, [r7, #20]
 80088b6:	4798      	blx	r3
}
 80088b8:	bf00      	nop
 80088ba:	3718      	adds	r7, #24
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	200017f8 	.word	0x200017f8

080088c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088cc:	f107 0308 	add.w	r3, r7, #8
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 f857 	bl	8008984 <prvGetNextExpireTime>
 80088d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	4619      	mov	r1, r3
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 f803 	bl	80088e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80088e2:	f000 f8d5 	bl	8008a90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088e6:	e7f1      	b.n	80088cc <prvTimerTask+0x8>

080088e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80088f2:	f7ff fa45 	bl	8007d80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088f6:	f107 0308 	add.w	r3, r7, #8
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 f866 	bl	80089cc <prvSampleTimeNow>
 8008900:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d130      	bne.n	800896a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10a      	bne.n	8008924 <prvProcessTimerOrBlockTask+0x3c>
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	429a      	cmp	r2, r3
 8008914:	d806      	bhi.n	8008924 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008916:	f7ff fa41 	bl	8007d9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800891a:	68f9      	ldr	r1, [r7, #12]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7ff ff91 	bl	8008844 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008922:	e024      	b.n	800896e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d008      	beq.n	800893c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800892a:	4b13      	ldr	r3, [pc, #76]	; (8008978 <prvProcessTimerOrBlockTask+0x90>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	bf0c      	ite	eq
 8008934:	2301      	moveq	r3, #1
 8008936:	2300      	movne	r3, #0
 8008938:	b2db      	uxtb	r3, r3
 800893a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800893c:	4b0f      	ldr	r3, [pc, #60]	; (800897c <prvProcessTimerOrBlockTask+0x94>)
 800893e:	6818      	ldr	r0, [r3, #0]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	4619      	mov	r1, r3
 800894a:	f7fe ffb3 	bl	80078b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800894e:	f7ff fa25 	bl	8007d9c <xTaskResumeAll>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10a      	bne.n	800896e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008958:	4b09      	ldr	r3, [pc, #36]	; (8008980 <prvProcessTimerOrBlockTask+0x98>)
 800895a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800895e:	601a      	str	r2, [r3, #0]
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	f3bf 8f6f 	isb	sy
}
 8008968:	e001      	b.n	800896e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800896a:	f7ff fa17 	bl	8007d9c <xTaskResumeAll>
}
 800896e:	bf00      	nop
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	200017fc 	.word	0x200017fc
 800897c:	20001800 	.word	0x20001800
 8008980:	e000ed04 	.word	0xe000ed04

08008984 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800898c:	4b0e      	ldr	r3, [pc, #56]	; (80089c8 <prvGetNextExpireTime+0x44>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	bf0c      	ite	eq
 8008996:	2301      	moveq	r3, #1
 8008998:	2300      	movne	r3, #0
 800899a:	b2db      	uxtb	r3, r3
 800899c:	461a      	mov	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d105      	bne.n	80089b6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089aa:	4b07      	ldr	r3, [pc, #28]	; (80089c8 <prvGetNextExpireTime+0x44>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	e001      	b.n	80089ba <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80089b6:	2300      	movs	r3, #0
 80089b8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80089ba:	68fb      	ldr	r3, [r7, #12]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3714      	adds	r7, #20
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	200017f8 	.word	0x200017f8

080089cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80089d4:	f7ff fa80 	bl	8007ed8 <xTaskGetTickCount>
 80089d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80089da:	4b0b      	ldr	r3, [pc, #44]	; (8008a08 <prvSampleTimeNow+0x3c>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d205      	bcs.n	80089f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80089e4:	f000 f908 	bl	8008bf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	e002      	b.n	80089f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80089f6:	4a04      	ldr	r2, [pc, #16]	; (8008a08 <prvSampleTimeNow+0x3c>)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80089fc:	68fb      	ldr	r3, [r7, #12]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	20001808 	.word	0x20001808

08008a0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
 8008a18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d812      	bhi.n	8008a58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	1ad2      	subs	r2, r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d302      	bcc.n	8008a46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a40:	2301      	movs	r3, #1
 8008a42:	617b      	str	r3, [r7, #20]
 8008a44:	e01b      	b.n	8008a7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a46:	4b10      	ldr	r3, [pc, #64]	; (8008a88 <prvInsertTimerInActiveList+0x7c>)
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	3304      	adds	r3, #4
 8008a4e:	4619      	mov	r1, r3
 8008a50:	4610      	mov	r0, r2
 8008a52:	f7fe fa1a 	bl	8006e8a <vListInsert>
 8008a56:	e012      	b.n	8008a7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d206      	bcs.n	8008a6e <prvInsertTimerInActiveList+0x62>
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d302      	bcc.n	8008a6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	617b      	str	r3, [r7, #20]
 8008a6c:	e007      	b.n	8008a7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a6e:	4b07      	ldr	r3, [pc, #28]	; (8008a8c <prvInsertTimerInActiveList+0x80>)
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	3304      	adds	r3, #4
 8008a76:	4619      	mov	r1, r3
 8008a78:	4610      	mov	r0, r2
 8008a7a:	f7fe fa06 	bl	8006e8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a7e:	697b      	ldr	r3, [r7, #20]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3718      	adds	r7, #24
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	200017fc 	.word	0x200017fc
 8008a8c:	200017f8 	.word	0x200017f8

08008a90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b08e      	sub	sp, #56	; 0x38
 8008a94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a96:	e09d      	b.n	8008bd4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	da18      	bge.n	8008ad0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008a9e:	1d3b      	adds	r3, r7, #4
 8008aa0:	3304      	adds	r3, #4
 8008aa2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10a      	bne.n	8008ac0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aae:	f383 8811 	msr	BASEPRI, r3
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	61fb      	str	r3, [r7, #28]
}
 8008abc:	bf00      	nop
 8008abe:	e7fe      	b.n	8008abe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ac6:	6850      	ldr	r0, [r2, #4]
 8008ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aca:	6892      	ldr	r2, [r2, #8]
 8008acc:	4611      	mov	r1, r2
 8008ace:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	db7d      	blt.n	8008bd2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d004      	beq.n	8008aec <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fe fa08 	bl	8006efc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008aec:	463b      	mov	r3, r7
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7ff ff6c 	bl	80089cc <prvSampleTimeNow>
 8008af4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b09      	cmp	r3, #9
 8008afa:	d86b      	bhi.n	8008bd4 <prvProcessReceivedCommands+0x144>
 8008afc:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <prvProcessReceivedCommands+0x74>)
 8008afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b02:	bf00      	nop
 8008b04:	08008b2d 	.word	0x08008b2d
 8008b08:	08008b2d 	.word	0x08008b2d
 8008b0c:	08008b2d 	.word	0x08008b2d
 8008b10:	08008bd5 	.word	0x08008bd5
 8008b14:	08008b89 	.word	0x08008b89
 8008b18:	08008bc1 	.word	0x08008bc1
 8008b1c:	08008b2d 	.word	0x08008b2d
 8008b20:	08008b2d 	.word	0x08008b2d
 8008b24:	08008bd5 	.word	0x08008bd5
 8008b28:	08008b89 	.word	0x08008b89
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	18d1      	adds	r1, r2, r3
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b3a:	f7ff ff67 	bl	8008a0c <prvInsertTimerInActiveList>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d047      	beq.n	8008bd4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b4a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d13f      	bne.n	8008bd4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	441a      	add	r2, r3
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	2300      	movs	r3, #0
 8008b62:	2100      	movs	r1, #0
 8008b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b66:	f7ff fe1f 	bl	80087a8 <xTimerGenericCommand>
 8008b6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d130      	bne.n	8008bd4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	61bb      	str	r3, [r7, #24]
}
 8008b84:	bf00      	nop
 8008b86:	e7fe      	b.n	8008b86 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10a      	bne.n	8008bac <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	617b      	str	r3, [r7, #20]
}
 8008ba8:	bf00      	nop
 8008baa:	e7fe      	b.n	8008baa <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bae:	699a      	ldr	r2, [r3, #24]
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb2:	18d1      	adds	r1, r2, r3
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bba:	f7ff ff27 	bl	8008a0c <prvInsertTimerInActiveList>
					break;
 8008bbe:	e009      	b.n	8008bd4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d104      	bne.n	8008bd4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008bca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bcc:	f000 fbc8 	bl	8009360 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008bd0:	e000      	b.n	8008bd4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008bd2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008bd4:	4b07      	ldr	r3, [pc, #28]	; (8008bf4 <prvProcessReceivedCommands+0x164>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	1d39      	adds	r1, r7, #4
 8008bda:	2200      	movs	r2, #0
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7fe fc4f 	bl	8007480 <xQueueReceive>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f47f af57 	bne.w	8008a98 <prvProcessReceivedCommands+0x8>
	}
}
 8008bea:	bf00      	nop
 8008bec:	bf00      	nop
 8008bee:	3730      	adds	r7, #48	; 0x30
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	20001800 	.word	0x20001800

08008bf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b088      	sub	sp, #32
 8008bfc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008bfe:	e045      	b.n	8008c8c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c00:	4b2c      	ldr	r3, [pc, #176]	; (8008cb4 <prvSwitchTimerLists+0xbc>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c0a:	4b2a      	ldr	r3, [pc, #168]	; (8008cb4 <prvSwitchTimerLists+0xbc>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3304      	adds	r3, #4
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7fe f96f 	bl	8006efc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d12e      	bne.n	8008c8c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	4413      	add	r3, r2
 8008c36:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d90e      	bls.n	8008c5e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c4c:	4b19      	ldr	r3, [pc, #100]	; (8008cb4 <prvSwitchTimerLists+0xbc>)
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	3304      	adds	r3, #4
 8008c54:	4619      	mov	r1, r3
 8008c56:	4610      	mov	r0, r2
 8008c58:	f7fe f917 	bl	8006e8a <vListInsert>
 8008c5c:	e016      	b.n	8008c8c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c5e:	2300      	movs	r3, #0
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	2300      	movs	r3, #0
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	2100      	movs	r1, #0
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f7ff fd9d 	bl	80087a8 <xTimerGenericCommand>
 8008c6e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10a      	bne.n	8008c8c <prvSwitchTimerLists+0x94>
	__asm volatile
 8008c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	603b      	str	r3, [r7, #0]
}
 8008c88:	bf00      	nop
 8008c8a:	e7fe      	b.n	8008c8a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c8c:	4b09      	ldr	r3, [pc, #36]	; (8008cb4 <prvSwitchTimerLists+0xbc>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1b4      	bne.n	8008c00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008c96:	4b07      	ldr	r3, [pc, #28]	; (8008cb4 <prvSwitchTimerLists+0xbc>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008c9c:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <prvSwitchTimerLists+0xc0>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a04      	ldr	r2, [pc, #16]	; (8008cb4 <prvSwitchTimerLists+0xbc>)
 8008ca2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008ca4:	4a04      	ldr	r2, [pc, #16]	; (8008cb8 <prvSwitchTimerLists+0xc0>)
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	6013      	str	r3, [r2, #0]
}
 8008caa:	bf00      	nop
 8008cac:	3718      	adds	r7, #24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	200017f8 	.word	0x200017f8
 8008cb8:	200017fc 	.word	0x200017fc

08008cbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008cc2:	f000 f967 	bl	8008f94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008cc6:	4b15      	ldr	r3, [pc, #84]	; (8008d1c <prvCheckForValidListAndQueue+0x60>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d120      	bne.n	8008d10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008cce:	4814      	ldr	r0, [pc, #80]	; (8008d20 <prvCheckForValidListAndQueue+0x64>)
 8008cd0:	f7fe f88a 	bl	8006de8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008cd4:	4813      	ldr	r0, [pc, #76]	; (8008d24 <prvCheckForValidListAndQueue+0x68>)
 8008cd6:	f7fe f887 	bl	8006de8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008cda:	4b13      	ldr	r3, [pc, #76]	; (8008d28 <prvCheckForValidListAndQueue+0x6c>)
 8008cdc:	4a10      	ldr	r2, [pc, #64]	; (8008d20 <prvCheckForValidListAndQueue+0x64>)
 8008cde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008ce0:	4b12      	ldr	r3, [pc, #72]	; (8008d2c <prvCheckForValidListAndQueue+0x70>)
 8008ce2:	4a10      	ldr	r2, [pc, #64]	; (8008d24 <prvCheckForValidListAndQueue+0x68>)
 8008ce4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	4b11      	ldr	r3, [pc, #68]	; (8008d30 <prvCheckForValidListAndQueue+0x74>)
 8008cec:	4a11      	ldr	r2, [pc, #68]	; (8008d34 <prvCheckForValidListAndQueue+0x78>)
 8008cee:	2110      	movs	r1, #16
 8008cf0:	200a      	movs	r0, #10
 8008cf2:	f7fe f995 	bl	8007020 <xQueueGenericCreateStatic>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	4a08      	ldr	r2, [pc, #32]	; (8008d1c <prvCheckForValidListAndQueue+0x60>)
 8008cfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008cfc:	4b07      	ldr	r3, [pc, #28]	; (8008d1c <prvCheckForValidListAndQueue+0x60>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d005      	beq.n	8008d10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d04:	4b05      	ldr	r3, [pc, #20]	; (8008d1c <prvCheckForValidListAndQueue+0x60>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	490b      	ldr	r1, [pc, #44]	; (8008d38 <prvCheckForValidListAndQueue+0x7c>)
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fe fda8 	bl	8007860 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d10:	f000 f970 	bl	8008ff4 <vPortExitCritical>
}
 8008d14:	bf00      	nop
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	20001800 	.word	0x20001800
 8008d20:	200017d0 	.word	0x200017d0
 8008d24:	200017e4 	.word	0x200017e4
 8008d28:	200017f8 	.word	0x200017f8
 8008d2c:	200017fc 	.word	0x200017fc
 8008d30:	200018ac 	.word	0x200018ac
 8008d34:	2000180c 	.word	0x2000180c
 8008d38:	08009af4 	.word	0x08009af4

08008d3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	3b04      	subs	r3, #4
 8008d4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	3b04      	subs	r3, #4
 8008d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	f023 0201 	bic.w	r2, r3, #1
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	3b04      	subs	r3, #4
 8008d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d6c:	4a0c      	ldr	r2, [pc, #48]	; (8008da0 <pxPortInitialiseStack+0x64>)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3b14      	subs	r3, #20
 8008d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3b04      	subs	r3, #4
 8008d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f06f 0202 	mvn.w	r2, #2
 8008d8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	3b20      	subs	r3, #32
 8008d90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d92:	68fb      	ldr	r3, [r7, #12]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	08008da5 	.word	0x08008da5

08008da4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008dae:	4b12      	ldr	r3, [pc, #72]	; (8008df8 <prvTaskExitError+0x54>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008db6:	d00a      	beq.n	8008dce <prvTaskExitError+0x2a>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	60fb      	str	r3, [r7, #12]
}
 8008dca:	bf00      	nop
 8008dcc:	e7fe      	b.n	8008dcc <prvTaskExitError+0x28>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	60bb      	str	r3, [r7, #8]
}
 8008de0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008de2:	bf00      	nop
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d0fc      	beq.n	8008de4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008dea:	bf00      	nop
 8008dec:	bf00      	nop
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr
 8008df8:	2000000c 	.word	0x2000000c
 8008dfc:	00000000 	.word	0x00000000

08008e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e00:	4b07      	ldr	r3, [pc, #28]	; (8008e20 <pxCurrentTCBConst2>)
 8008e02:	6819      	ldr	r1, [r3, #0]
 8008e04:	6808      	ldr	r0, [r1, #0]
 8008e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0a:	f380 8809 	msr	PSP, r0
 8008e0e:	f3bf 8f6f 	isb	sy
 8008e12:	f04f 0000 	mov.w	r0, #0
 8008e16:	f380 8811 	msr	BASEPRI, r0
 8008e1a:	4770      	bx	lr
 8008e1c:	f3af 8000 	nop.w

08008e20 <pxCurrentTCBConst2>:
 8008e20:	200012d0 	.word	0x200012d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e24:	bf00      	nop
 8008e26:	bf00      	nop

08008e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e28:	4808      	ldr	r0, [pc, #32]	; (8008e4c <prvPortStartFirstTask+0x24>)
 8008e2a:	6800      	ldr	r0, [r0, #0]
 8008e2c:	6800      	ldr	r0, [r0, #0]
 8008e2e:	f380 8808 	msr	MSP, r0
 8008e32:	f04f 0000 	mov.w	r0, #0
 8008e36:	f380 8814 	msr	CONTROL, r0
 8008e3a:	b662      	cpsie	i
 8008e3c:	b661      	cpsie	f
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	df00      	svc	0
 8008e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e4a:	bf00      	nop
 8008e4c:	e000ed08 	.word	0xe000ed08

08008e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e56:	4b46      	ldr	r3, [pc, #280]	; (8008f70 <xPortStartScheduler+0x120>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a46      	ldr	r2, [pc, #280]	; (8008f74 <xPortStartScheduler+0x124>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d10a      	bne.n	8008e76 <xPortStartScheduler+0x26>
	__asm volatile
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	613b      	str	r3, [r7, #16]
}
 8008e72:	bf00      	nop
 8008e74:	e7fe      	b.n	8008e74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e76:	4b3e      	ldr	r3, [pc, #248]	; (8008f70 <xPortStartScheduler+0x120>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a3f      	ldr	r2, [pc, #252]	; (8008f78 <xPortStartScheduler+0x128>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d10a      	bne.n	8008e96 <xPortStartScheduler+0x46>
	__asm volatile
 8008e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	60fb      	str	r3, [r7, #12]
}
 8008e92:	bf00      	nop
 8008e94:	e7fe      	b.n	8008e94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e96:	4b39      	ldr	r3, [pc, #228]	; (8008f7c <xPortStartScheduler+0x12c>)
 8008e98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	22ff      	movs	r2, #255	; 0xff
 8008ea6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008eb0:	78fb      	ldrb	r3, [r7, #3]
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008eb8:	b2da      	uxtb	r2, r3
 8008eba:	4b31      	ldr	r3, [pc, #196]	; (8008f80 <xPortStartScheduler+0x130>)
 8008ebc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ebe:	4b31      	ldr	r3, [pc, #196]	; (8008f84 <xPortStartScheduler+0x134>)
 8008ec0:	2207      	movs	r2, #7
 8008ec2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ec4:	e009      	b.n	8008eda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008ec6:	4b2f      	ldr	r3, [pc, #188]	; (8008f84 <xPortStartScheduler+0x134>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	4a2d      	ldr	r2, [pc, #180]	; (8008f84 <xPortStartScheduler+0x134>)
 8008ece:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008eda:	78fb      	ldrb	r3, [r7, #3]
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee2:	2b80      	cmp	r3, #128	; 0x80
 8008ee4:	d0ef      	beq.n	8008ec6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ee6:	4b27      	ldr	r3, [pc, #156]	; (8008f84 <xPortStartScheduler+0x134>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f1c3 0307 	rsb	r3, r3, #7
 8008eee:	2b04      	cmp	r3, #4
 8008ef0:	d00a      	beq.n	8008f08 <xPortStartScheduler+0xb8>
	__asm volatile
 8008ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	60bb      	str	r3, [r7, #8]
}
 8008f04:	bf00      	nop
 8008f06:	e7fe      	b.n	8008f06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f08:	4b1e      	ldr	r3, [pc, #120]	; (8008f84 <xPortStartScheduler+0x134>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	021b      	lsls	r3, r3, #8
 8008f0e:	4a1d      	ldr	r2, [pc, #116]	; (8008f84 <xPortStartScheduler+0x134>)
 8008f10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f12:	4b1c      	ldr	r3, [pc, #112]	; (8008f84 <xPortStartScheduler+0x134>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f1a:	4a1a      	ldr	r2, [pc, #104]	; (8008f84 <xPortStartScheduler+0x134>)
 8008f1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f26:	4b18      	ldr	r3, [pc, #96]	; (8008f88 <xPortStartScheduler+0x138>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a17      	ldr	r2, [pc, #92]	; (8008f88 <xPortStartScheduler+0x138>)
 8008f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f32:	4b15      	ldr	r3, [pc, #84]	; (8008f88 <xPortStartScheduler+0x138>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a14      	ldr	r2, [pc, #80]	; (8008f88 <xPortStartScheduler+0x138>)
 8008f38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f3e:	f000 f8dd 	bl	80090fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f42:	4b12      	ldr	r3, [pc, #72]	; (8008f8c <xPortStartScheduler+0x13c>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f48:	f000 f8fc 	bl	8009144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f4c:	4b10      	ldr	r3, [pc, #64]	; (8008f90 <xPortStartScheduler+0x140>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a0f      	ldr	r2, [pc, #60]	; (8008f90 <xPortStartScheduler+0x140>)
 8008f52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f58:	f7ff ff66 	bl	8008e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f5c:	f7ff f88a 	bl	8008074 <vTaskSwitchContext>
	prvTaskExitError();
 8008f60:	f7ff ff20 	bl	8008da4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	e000ed00 	.word	0xe000ed00
 8008f74:	410fc271 	.word	0x410fc271
 8008f78:	410fc270 	.word	0x410fc270
 8008f7c:	e000e400 	.word	0xe000e400
 8008f80:	200018fc 	.word	0x200018fc
 8008f84:	20001900 	.word	0x20001900
 8008f88:	e000ed20 	.word	0xe000ed20
 8008f8c:	2000000c 	.word	0x2000000c
 8008f90:	e000ef34 	.word	0xe000ef34

08008f94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	607b      	str	r3, [r7, #4]
}
 8008fac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008fae:	4b0f      	ldr	r3, [pc, #60]	; (8008fec <vPortEnterCritical+0x58>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	4a0d      	ldr	r2, [pc, #52]	; (8008fec <vPortEnterCritical+0x58>)
 8008fb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008fb8:	4b0c      	ldr	r3, [pc, #48]	; (8008fec <vPortEnterCritical+0x58>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d10f      	bne.n	8008fe0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008fc0:	4b0b      	ldr	r3, [pc, #44]	; (8008ff0 <vPortEnterCritical+0x5c>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00a      	beq.n	8008fe0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	603b      	str	r3, [r7, #0]
}
 8008fdc:	bf00      	nop
 8008fde:	e7fe      	b.n	8008fde <vPortEnterCritical+0x4a>
	}
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr
 8008fec:	2000000c 	.word	0x2000000c
 8008ff0:	e000ed04 	.word	0xe000ed04

08008ff4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ffa:	4b12      	ldr	r3, [pc, #72]	; (8009044 <vPortExitCritical+0x50>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10a      	bne.n	8009018 <vPortExitCritical+0x24>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	607b      	str	r3, [r7, #4]
}
 8009014:	bf00      	nop
 8009016:	e7fe      	b.n	8009016 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009018:	4b0a      	ldr	r3, [pc, #40]	; (8009044 <vPortExitCritical+0x50>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3b01      	subs	r3, #1
 800901e:	4a09      	ldr	r2, [pc, #36]	; (8009044 <vPortExitCritical+0x50>)
 8009020:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009022:	4b08      	ldr	r3, [pc, #32]	; (8009044 <vPortExitCritical+0x50>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d105      	bne.n	8009036 <vPortExitCritical+0x42>
 800902a:	2300      	movs	r3, #0
 800902c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	f383 8811 	msr	BASEPRI, r3
}
 8009034:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	2000000c 	.word	0x2000000c
	...

08009050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009050:	f3ef 8009 	mrs	r0, PSP
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	4b15      	ldr	r3, [pc, #84]	; (80090b0 <pxCurrentTCBConst>)
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	f01e 0f10 	tst.w	lr, #16
 8009060:	bf08      	it	eq
 8009062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906a:	6010      	str	r0, [r2, #0]
 800906c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009070:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009074:	f380 8811 	msr	BASEPRI, r0
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	f7fe fff8 	bl	8008074 <vTaskSwitchContext>
 8009084:	f04f 0000 	mov.w	r0, #0
 8009088:	f380 8811 	msr	BASEPRI, r0
 800908c:	bc09      	pop	{r0, r3}
 800908e:	6819      	ldr	r1, [r3, #0]
 8009090:	6808      	ldr	r0, [r1, #0]
 8009092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009096:	f01e 0f10 	tst.w	lr, #16
 800909a:	bf08      	it	eq
 800909c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80090a0:	f380 8809 	msr	PSP, r0
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	f3af 8000 	nop.w

080090b0 <pxCurrentTCBConst>:
 80090b0:	200012d0 	.word	0x200012d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80090b4:	bf00      	nop
 80090b6:	bf00      	nop

080090b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
	__asm volatile
 80090be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	607b      	str	r3, [r7, #4]
}
 80090d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80090d2:	f7fe ff11 	bl	8007ef8 <xTaskIncrementTick>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d003      	beq.n	80090e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80090dc:	4b06      	ldr	r3, [pc, #24]	; (80090f8 <SysTick_Handler+0x40>)
 80090de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090e2:	601a      	str	r2, [r3, #0]
 80090e4:	2300      	movs	r3, #0
 80090e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	f383 8811 	msr	BASEPRI, r3
}
 80090ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80090f0:	bf00      	nop
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	e000ed04 	.word	0xe000ed04

080090fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80090fc:	b480      	push	{r7}
 80090fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009100:	4b0b      	ldr	r3, [pc, #44]	; (8009130 <vPortSetupTimerInterrupt+0x34>)
 8009102:	2200      	movs	r2, #0
 8009104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009106:	4b0b      	ldr	r3, [pc, #44]	; (8009134 <vPortSetupTimerInterrupt+0x38>)
 8009108:	2200      	movs	r2, #0
 800910a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800910c:	4b0a      	ldr	r3, [pc, #40]	; (8009138 <vPortSetupTimerInterrupt+0x3c>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a0a      	ldr	r2, [pc, #40]	; (800913c <vPortSetupTimerInterrupt+0x40>)
 8009112:	fba2 2303 	umull	r2, r3, r2, r3
 8009116:	099b      	lsrs	r3, r3, #6
 8009118:	4a09      	ldr	r2, [pc, #36]	; (8009140 <vPortSetupTimerInterrupt+0x44>)
 800911a:	3b01      	subs	r3, #1
 800911c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800911e:	4b04      	ldr	r3, [pc, #16]	; (8009130 <vPortSetupTimerInterrupt+0x34>)
 8009120:	2207      	movs	r2, #7
 8009122:	601a      	str	r2, [r3, #0]
}
 8009124:	bf00      	nop
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	e000e010 	.word	0xe000e010
 8009134:	e000e018 	.word	0xe000e018
 8009138:	20000000 	.word	0x20000000
 800913c:	10624dd3 	.word	0x10624dd3
 8009140:	e000e014 	.word	0xe000e014

08009144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009154 <vPortEnableVFP+0x10>
 8009148:	6801      	ldr	r1, [r0, #0]
 800914a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800914e:	6001      	str	r1, [r0, #0]
 8009150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009152:	bf00      	nop
 8009154:	e000ed88 	.word	0xe000ed88

08009158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800915e:	f3ef 8305 	mrs	r3, IPSR
 8009162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2b0f      	cmp	r3, #15
 8009168:	d914      	bls.n	8009194 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800916a:	4a17      	ldr	r2, [pc, #92]	; (80091c8 <vPortValidateInterruptPriority+0x70>)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4413      	add	r3, r2
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009174:	4b15      	ldr	r3, [pc, #84]	; (80091cc <vPortValidateInterruptPriority+0x74>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	7afa      	ldrb	r2, [r7, #11]
 800917a:	429a      	cmp	r2, r3
 800917c:	d20a      	bcs.n	8009194 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	607b      	str	r3, [r7, #4]
}
 8009190:	bf00      	nop
 8009192:	e7fe      	b.n	8009192 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009194:	4b0e      	ldr	r3, [pc, #56]	; (80091d0 <vPortValidateInterruptPriority+0x78>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800919c:	4b0d      	ldr	r3, [pc, #52]	; (80091d4 <vPortValidateInterruptPriority+0x7c>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d90a      	bls.n	80091ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80091a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a8:	f383 8811 	msr	BASEPRI, r3
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	603b      	str	r3, [r7, #0]
}
 80091b6:	bf00      	nop
 80091b8:	e7fe      	b.n	80091b8 <vPortValidateInterruptPriority+0x60>
	}
 80091ba:	bf00      	nop
 80091bc:	3714      	adds	r7, #20
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	e000e3f0 	.word	0xe000e3f0
 80091cc:	200018fc 	.word	0x200018fc
 80091d0:	e000ed0c 	.word	0xe000ed0c
 80091d4:	20001900 	.word	0x20001900

080091d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b08a      	sub	sp, #40	; 0x28
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80091e0:	2300      	movs	r3, #0
 80091e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80091e4:	f7fe fdcc 	bl	8007d80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80091e8:	4b58      	ldr	r3, [pc, #352]	; (800934c <pvPortMalloc+0x174>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d101      	bne.n	80091f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80091f0:	f000 f910 	bl	8009414 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80091f4:	4b56      	ldr	r3, [pc, #344]	; (8009350 <pvPortMalloc+0x178>)
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4013      	ands	r3, r2
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f040 808e 	bne.w	800931e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d01d      	beq.n	8009244 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009208:	2208      	movs	r2, #8
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4413      	add	r3, r2
 800920e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f003 0307 	and.w	r3, r3, #7
 8009216:	2b00      	cmp	r3, #0
 8009218:	d014      	beq.n	8009244 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f023 0307 	bic.w	r3, r3, #7
 8009220:	3308      	adds	r3, #8
 8009222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f003 0307 	and.w	r3, r3, #7
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00a      	beq.n	8009244 <pvPortMalloc+0x6c>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	617b      	str	r3, [r7, #20]
}
 8009240:	bf00      	nop
 8009242:	e7fe      	b.n	8009242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d069      	beq.n	800931e <pvPortMalloc+0x146>
 800924a:	4b42      	ldr	r3, [pc, #264]	; (8009354 <pvPortMalloc+0x17c>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	429a      	cmp	r2, r3
 8009252:	d864      	bhi.n	800931e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009254:	4b40      	ldr	r3, [pc, #256]	; (8009358 <pvPortMalloc+0x180>)
 8009256:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009258:	4b3f      	ldr	r3, [pc, #252]	; (8009358 <pvPortMalloc+0x180>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800925e:	e004      	b.n	800926a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009262:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	429a      	cmp	r2, r3
 8009272:	d903      	bls.n	800927c <pvPortMalloc+0xa4>
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1f1      	bne.n	8009260 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800927c:	4b33      	ldr	r3, [pc, #204]	; (800934c <pvPortMalloc+0x174>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009282:	429a      	cmp	r2, r3
 8009284:	d04b      	beq.n	800931e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009286:	6a3b      	ldr	r3, [r7, #32]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2208      	movs	r2, #8
 800928c:	4413      	add	r3, r2
 800928e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	6a3b      	ldr	r3, [r7, #32]
 8009296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	1ad2      	subs	r2, r2, r3
 80092a0:	2308      	movs	r3, #8
 80092a2:	005b      	lsls	r3, r3, #1
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d91f      	bls.n	80092e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80092a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4413      	add	r3, r2
 80092ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	f003 0307 	and.w	r3, r3, #7
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00a      	beq.n	80092d0 <pvPortMalloc+0xf8>
	__asm volatile
 80092ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092be:	f383 8811 	msr	BASEPRI, r3
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	613b      	str	r3, [r7, #16]
}
 80092cc:	bf00      	nop
 80092ce:	e7fe      	b.n	80092ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d2:	685a      	ldr	r2, [r3, #4]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	1ad2      	subs	r2, r2, r3
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092e2:	69b8      	ldr	r0, [r7, #24]
 80092e4:	f000 f8f8 	bl	80094d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80092e8:	4b1a      	ldr	r3, [pc, #104]	; (8009354 <pvPortMalloc+0x17c>)
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	4a18      	ldr	r2, [pc, #96]	; (8009354 <pvPortMalloc+0x17c>)
 80092f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80092f6:	4b17      	ldr	r3, [pc, #92]	; (8009354 <pvPortMalloc+0x17c>)
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	4b18      	ldr	r3, [pc, #96]	; (800935c <pvPortMalloc+0x184>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d203      	bcs.n	800930a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009302:	4b14      	ldr	r3, [pc, #80]	; (8009354 <pvPortMalloc+0x17c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a15      	ldr	r2, [pc, #84]	; (800935c <pvPortMalloc+0x184>)
 8009308:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930c:	685a      	ldr	r2, [r3, #4]
 800930e:	4b10      	ldr	r3, [pc, #64]	; (8009350 <pvPortMalloc+0x178>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	431a      	orrs	r2, r3
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	2200      	movs	r2, #0
 800931c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800931e:	f7fe fd3d 	bl	8007d9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	f003 0307 	and.w	r3, r3, #7
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00a      	beq.n	8009342 <pvPortMalloc+0x16a>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	60fb      	str	r3, [r7, #12]
}
 800933e:	bf00      	nop
 8009340:	e7fe      	b.n	8009340 <pvPortMalloc+0x168>
	return pvReturn;
 8009342:	69fb      	ldr	r3, [r7, #28]
}
 8009344:	4618      	mov	r0, r3
 8009346:	3728      	adds	r7, #40	; 0x28
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	2000250c 	.word	0x2000250c
 8009350:	20002518 	.word	0x20002518
 8009354:	20002510 	.word	0x20002510
 8009358:	20002504 	.word	0x20002504
 800935c:	20002514 	.word	0x20002514

08009360 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b086      	sub	sp, #24
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d048      	beq.n	8009404 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009372:	2308      	movs	r3, #8
 8009374:	425b      	negs	r3, r3
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	4413      	add	r3, r2
 800937a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	4b21      	ldr	r3, [pc, #132]	; (800940c <vPortFree+0xac>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4013      	ands	r3, r2
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10a      	bne.n	80093a4 <vPortFree+0x44>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	60fb      	str	r3, [r7, #12]
}
 80093a0:	bf00      	nop
 80093a2:	e7fe      	b.n	80093a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00a      	beq.n	80093c2 <vPortFree+0x62>
	__asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	60bb      	str	r3, [r7, #8]
}
 80093be:	bf00      	nop
 80093c0:	e7fe      	b.n	80093c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	685a      	ldr	r2, [r3, #4]
 80093c6:	4b11      	ldr	r3, [pc, #68]	; (800940c <vPortFree+0xac>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4013      	ands	r3, r2
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d019      	beq.n	8009404 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d115      	bne.n	8009404 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	4b0b      	ldr	r3, [pc, #44]	; (800940c <vPortFree+0xac>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	43db      	mvns	r3, r3
 80093e2:	401a      	ands	r2, r3
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80093e8:	f7fe fcca 	bl	8007d80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	4b07      	ldr	r3, [pc, #28]	; (8009410 <vPortFree+0xb0>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4413      	add	r3, r2
 80093f6:	4a06      	ldr	r2, [pc, #24]	; (8009410 <vPortFree+0xb0>)
 80093f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80093fa:	6938      	ldr	r0, [r7, #16]
 80093fc:	f000 f86c 	bl	80094d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009400:	f7fe fccc 	bl	8007d9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009404:	bf00      	nop
 8009406:	3718      	adds	r7, #24
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	20002518 	.word	0x20002518
 8009410:	20002510 	.word	0x20002510

08009414 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800941a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800941e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009420:	4b27      	ldr	r3, [pc, #156]	; (80094c0 <prvHeapInit+0xac>)
 8009422:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f003 0307 	and.w	r3, r3, #7
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00c      	beq.n	8009448 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3307      	adds	r3, #7
 8009432:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f023 0307 	bic.w	r3, r3, #7
 800943a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	4a1f      	ldr	r2, [pc, #124]	; (80094c0 <prvHeapInit+0xac>)
 8009444:	4413      	add	r3, r2
 8009446:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800944c:	4a1d      	ldr	r2, [pc, #116]	; (80094c4 <prvHeapInit+0xb0>)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009452:	4b1c      	ldr	r3, [pc, #112]	; (80094c4 <prvHeapInit+0xb0>)
 8009454:	2200      	movs	r2, #0
 8009456:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	4413      	add	r3, r2
 800945e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009460:	2208      	movs	r2, #8
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	1a9b      	subs	r3, r3, r2
 8009466:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f023 0307 	bic.w	r3, r3, #7
 800946e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4a15      	ldr	r2, [pc, #84]	; (80094c8 <prvHeapInit+0xb4>)
 8009474:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009476:	4b14      	ldr	r3, [pc, #80]	; (80094c8 <prvHeapInit+0xb4>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2200      	movs	r2, #0
 800947c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800947e:	4b12      	ldr	r3, [pc, #72]	; (80094c8 <prvHeapInit+0xb4>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2200      	movs	r2, #0
 8009484:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	1ad2      	subs	r2, r2, r3
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009494:	4b0c      	ldr	r3, [pc, #48]	; (80094c8 <prvHeapInit+0xb4>)
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	4a0a      	ldr	r2, [pc, #40]	; (80094cc <prvHeapInit+0xb8>)
 80094a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	4a09      	ldr	r2, [pc, #36]	; (80094d0 <prvHeapInit+0xbc>)
 80094aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094ac:	4b09      	ldr	r3, [pc, #36]	; (80094d4 <prvHeapInit+0xc0>)
 80094ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80094b2:	601a      	str	r2, [r3, #0]
}
 80094b4:	bf00      	nop
 80094b6:	3714      	adds	r7, #20
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr
 80094c0:	20001904 	.word	0x20001904
 80094c4:	20002504 	.word	0x20002504
 80094c8:	2000250c 	.word	0x2000250c
 80094cc:	20002514 	.word	0x20002514
 80094d0:	20002510 	.word	0x20002510
 80094d4:	20002518 	.word	0x20002518

080094d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80094e0:	4b28      	ldr	r3, [pc, #160]	; (8009584 <prvInsertBlockIntoFreeList+0xac>)
 80094e2:	60fb      	str	r3, [r7, #12]
 80094e4:	e002      	b.n	80094ec <prvInsertBlockIntoFreeList+0x14>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d8f7      	bhi.n	80094e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	4413      	add	r3, r2
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	429a      	cmp	r2, r3
 8009506:	d108      	bne.n	800951a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	441a      	add	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	441a      	add	r2, r3
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	429a      	cmp	r2, r3
 800952c:	d118      	bne.n	8009560 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	4b15      	ldr	r3, [pc, #84]	; (8009588 <prvInsertBlockIntoFreeList+0xb0>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	429a      	cmp	r2, r3
 8009538:	d00d      	beq.n	8009556 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	441a      	add	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	e008      	b.n	8009568 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009556:	4b0c      	ldr	r3, [pc, #48]	; (8009588 <prvInsertBlockIntoFreeList+0xb0>)
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	e003      	b.n	8009568 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	429a      	cmp	r2, r3
 800956e:	d002      	beq.n	8009576 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009576:	bf00      	nop
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	20002504 	.word	0x20002504
 8009588:	2000250c 	.word	0x2000250c

0800958c <__cxa_pure_virtual>:
 800958c:	b508      	push	{r3, lr}
 800958e:	f000 f80d 	bl	80095ac <_ZSt9terminatev>

08009592 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009592:	b508      	push	{r3, lr}
 8009594:	4780      	blx	r0
 8009596:	f000 f80e 	bl	80095b6 <abort>
	...

0800959c <_ZSt13get_terminatev>:
 800959c:	4b02      	ldr	r3, [pc, #8]	; (80095a8 <_ZSt13get_terminatev+0xc>)
 800959e:	6818      	ldr	r0, [r3, #0]
 80095a0:	f3bf 8f5b 	dmb	ish
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	20000010 	.word	0x20000010

080095ac <_ZSt9terminatev>:
 80095ac:	b508      	push	{r3, lr}
 80095ae:	f7ff fff5 	bl	800959c <_ZSt13get_terminatev>
 80095b2:	f7ff ffee 	bl	8009592 <_ZN10__cxxabiv111__terminateEPFvvE>

080095b6 <abort>:
 80095b6:	b508      	push	{r3, lr}
 80095b8:	2006      	movs	r0, #6
 80095ba:	f000 f873 	bl	80096a4 <raise>
 80095be:	2001      	movs	r0, #1
 80095c0:	f7f9 f908 	bl	80027d4 <_exit>

080095c4 <__errno>:
 80095c4:	4b01      	ldr	r3, [pc, #4]	; (80095cc <__errno+0x8>)
 80095c6:	6818      	ldr	r0, [r3, #0]
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	20000014 	.word	0x20000014

080095d0 <__libc_init_array>:
 80095d0:	b570      	push	{r4, r5, r6, lr}
 80095d2:	4d0d      	ldr	r5, [pc, #52]	; (8009608 <__libc_init_array+0x38>)
 80095d4:	4c0d      	ldr	r4, [pc, #52]	; (800960c <__libc_init_array+0x3c>)
 80095d6:	1b64      	subs	r4, r4, r5
 80095d8:	10a4      	asrs	r4, r4, #2
 80095da:	2600      	movs	r6, #0
 80095dc:	42a6      	cmp	r6, r4
 80095de:	d109      	bne.n	80095f4 <__libc_init_array+0x24>
 80095e0:	4d0b      	ldr	r5, [pc, #44]	; (8009610 <__libc_init_array+0x40>)
 80095e2:	4c0c      	ldr	r4, [pc, #48]	; (8009614 <__libc_init_array+0x44>)
 80095e4:	f000 f9b0 	bl	8009948 <_init>
 80095e8:	1b64      	subs	r4, r4, r5
 80095ea:	10a4      	asrs	r4, r4, #2
 80095ec:	2600      	movs	r6, #0
 80095ee:	42a6      	cmp	r6, r4
 80095f0:	d105      	bne.n	80095fe <__libc_init_array+0x2e>
 80095f2:	bd70      	pop	{r4, r5, r6, pc}
 80095f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80095f8:	4798      	blx	r3
 80095fa:	3601      	adds	r6, #1
 80095fc:	e7ee      	b.n	80095dc <__libc_init_array+0xc>
 80095fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009602:	4798      	blx	r3
 8009604:	3601      	adds	r6, #1
 8009606:	e7f2      	b.n	80095ee <__libc_init_array+0x1e>
 8009608:	08009ca4 	.word	0x08009ca4
 800960c:	08009ca4 	.word	0x08009ca4
 8009610:	08009ca4 	.word	0x08009ca4
 8009614:	08009cac 	.word	0x08009cac

08009618 <memcpy>:
 8009618:	440a      	add	r2, r1
 800961a:	4291      	cmp	r1, r2
 800961c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009620:	d100      	bne.n	8009624 <memcpy+0xc>
 8009622:	4770      	bx	lr
 8009624:	b510      	push	{r4, lr}
 8009626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800962a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800962e:	4291      	cmp	r1, r2
 8009630:	d1f9      	bne.n	8009626 <memcpy+0xe>
 8009632:	bd10      	pop	{r4, pc}

08009634 <memset>:
 8009634:	4402      	add	r2, r0
 8009636:	4603      	mov	r3, r0
 8009638:	4293      	cmp	r3, r2
 800963a:	d100      	bne.n	800963e <memset+0xa>
 800963c:	4770      	bx	lr
 800963e:	f803 1b01 	strb.w	r1, [r3], #1
 8009642:	e7f9      	b.n	8009638 <memset+0x4>

08009644 <realloc>:
 8009644:	4b02      	ldr	r3, [pc, #8]	; (8009650 <realloc+0xc>)
 8009646:	460a      	mov	r2, r1
 8009648:	4601      	mov	r1, r0
 800964a:	6818      	ldr	r0, [r3, #0]
 800964c:	f000 b8da 	b.w	8009804 <_realloc_r>
 8009650:	20000014 	.word	0x20000014

08009654 <_raise_r>:
 8009654:	291f      	cmp	r1, #31
 8009656:	b538      	push	{r3, r4, r5, lr}
 8009658:	4604      	mov	r4, r0
 800965a:	460d      	mov	r5, r1
 800965c:	d904      	bls.n	8009668 <_raise_r+0x14>
 800965e:	2316      	movs	r3, #22
 8009660:	6003      	str	r3, [r0, #0]
 8009662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009666:	bd38      	pop	{r3, r4, r5, pc}
 8009668:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800966a:	b112      	cbz	r2, 8009672 <_raise_r+0x1e>
 800966c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009670:	b94b      	cbnz	r3, 8009686 <_raise_r+0x32>
 8009672:	4620      	mov	r0, r4
 8009674:	f000 f830 	bl	80096d8 <_getpid_r>
 8009678:	462a      	mov	r2, r5
 800967a:	4601      	mov	r1, r0
 800967c:	4620      	mov	r0, r4
 800967e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009682:	f000 b817 	b.w	80096b4 <_kill_r>
 8009686:	2b01      	cmp	r3, #1
 8009688:	d00a      	beq.n	80096a0 <_raise_r+0x4c>
 800968a:	1c59      	adds	r1, r3, #1
 800968c:	d103      	bne.n	8009696 <_raise_r+0x42>
 800968e:	2316      	movs	r3, #22
 8009690:	6003      	str	r3, [r0, #0]
 8009692:	2001      	movs	r0, #1
 8009694:	e7e7      	b.n	8009666 <_raise_r+0x12>
 8009696:	2400      	movs	r4, #0
 8009698:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800969c:	4628      	mov	r0, r5
 800969e:	4798      	blx	r3
 80096a0:	2000      	movs	r0, #0
 80096a2:	e7e0      	b.n	8009666 <_raise_r+0x12>

080096a4 <raise>:
 80096a4:	4b02      	ldr	r3, [pc, #8]	; (80096b0 <raise+0xc>)
 80096a6:	4601      	mov	r1, r0
 80096a8:	6818      	ldr	r0, [r3, #0]
 80096aa:	f7ff bfd3 	b.w	8009654 <_raise_r>
 80096ae:	bf00      	nop
 80096b0:	20000014 	.word	0x20000014

080096b4 <_kill_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	4d07      	ldr	r5, [pc, #28]	; (80096d4 <_kill_r+0x20>)
 80096b8:	2300      	movs	r3, #0
 80096ba:	4604      	mov	r4, r0
 80096bc:	4608      	mov	r0, r1
 80096be:	4611      	mov	r1, r2
 80096c0:	602b      	str	r3, [r5, #0]
 80096c2:	f7f9 f877 	bl	80027b4 <_kill>
 80096c6:	1c43      	adds	r3, r0, #1
 80096c8:	d102      	bne.n	80096d0 <_kill_r+0x1c>
 80096ca:	682b      	ldr	r3, [r5, #0]
 80096cc:	b103      	cbz	r3, 80096d0 <_kill_r+0x1c>
 80096ce:	6023      	str	r3, [r4, #0]
 80096d0:	bd38      	pop	{r3, r4, r5, pc}
 80096d2:	bf00      	nop
 80096d4:	20002524 	.word	0x20002524

080096d8 <_getpid_r>:
 80096d8:	f7f9 b864 	b.w	80027a4 <_getpid>

080096dc <sbrk_aligned>:
 80096dc:	b570      	push	{r4, r5, r6, lr}
 80096de:	4e0e      	ldr	r6, [pc, #56]	; (8009718 <sbrk_aligned+0x3c>)
 80096e0:	460c      	mov	r4, r1
 80096e2:	6831      	ldr	r1, [r6, #0]
 80096e4:	4605      	mov	r5, r0
 80096e6:	b911      	cbnz	r1, 80096ee <sbrk_aligned+0x12>
 80096e8:	f000 f8bc 	bl	8009864 <_sbrk_r>
 80096ec:	6030      	str	r0, [r6, #0]
 80096ee:	4621      	mov	r1, r4
 80096f0:	4628      	mov	r0, r5
 80096f2:	f000 f8b7 	bl	8009864 <_sbrk_r>
 80096f6:	1c43      	adds	r3, r0, #1
 80096f8:	d00a      	beq.n	8009710 <sbrk_aligned+0x34>
 80096fa:	1cc4      	adds	r4, r0, #3
 80096fc:	f024 0403 	bic.w	r4, r4, #3
 8009700:	42a0      	cmp	r0, r4
 8009702:	d007      	beq.n	8009714 <sbrk_aligned+0x38>
 8009704:	1a21      	subs	r1, r4, r0
 8009706:	4628      	mov	r0, r5
 8009708:	f000 f8ac 	bl	8009864 <_sbrk_r>
 800970c:	3001      	adds	r0, #1
 800970e:	d101      	bne.n	8009714 <sbrk_aligned+0x38>
 8009710:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009714:	4620      	mov	r0, r4
 8009716:	bd70      	pop	{r4, r5, r6, pc}
 8009718:	20002520 	.word	0x20002520

0800971c <_malloc_r>:
 800971c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009720:	1ccd      	adds	r5, r1, #3
 8009722:	f025 0503 	bic.w	r5, r5, #3
 8009726:	3508      	adds	r5, #8
 8009728:	2d0c      	cmp	r5, #12
 800972a:	bf38      	it	cc
 800972c:	250c      	movcc	r5, #12
 800972e:	2d00      	cmp	r5, #0
 8009730:	4607      	mov	r7, r0
 8009732:	db01      	blt.n	8009738 <_malloc_r+0x1c>
 8009734:	42a9      	cmp	r1, r5
 8009736:	d905      	bls.n	8009744 <_malloc_r+0x28>
 8009738:	230c      	movs	r3, #12
 800973a:	603b      	str	r3, [r7, #0]
 800973c:	2600      	movs	r6, #0
 800973e:	4630      	mov	r0, r6
 8009740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009744:	4e2e      	ldr	r6, [pc, #184]	; (8009800 <_malloc_r+0xe4>)
 8009746:	f000 f89d 	bl	8009884 <__malloc_lock>
 800974a:	6833      	ldr	r3, [r6, #0]
 800974c:	461c      	mov	r4, r3
 800974e:	bb34      	cbnz	r4, 800979e <_malloc_r+0x82>
 8009750:	4629      	mov	r1, r5
 8009752:	4638      	mov	r0, r7
 8009754:	f7ff ffc2 	bl	80096dc <sbrk_aligned>
 8009758:	1c43      	adds	r3, r0, #1
 800975a:	4604      	mov	r4, r0
 800975c:	d14d      	bne.n	80097fa <_malloc_r+0xde>
 800975e:	6834      	ldr	r4, [r6, #0]
 8009760:	4626      	mov	r6, r4
 8009762:	2e00      	cmp	r6, #0
 8009764:	d140      	bne.n	80097e8 <_malloc_r+0xcc>
 8009766:	6823      	ldr	r3, [r4, #0]
 8009768:	4631      	mov	r1, r6
 800976a:	4638      	mov	r0, r7
 800976c:	eb04 0803 	add.w	r8, r4, r3
 8009770:	f000 f878 	bl	8009864 <_sbrk_r>
 8009774:	4580      	cmp	r8, r0
 8009776:	d13a      	bne.n	80097ee <_malloc_r+0xd2>
 8009778:	6821      	ldr	r1, [r4, #0]
 800977a:	3503      	adds	r5, #3
 800977c:	1a6d      	subs	r5, r5, r1
 800977e:	f025 0503 	bic.w	r5, r5, #3
 8009782:	3508      	adds	r5, #8
 8009784:	2d0c      	cmp	r5, #12
 8009786:	bf38      	it	cc
 8009788:	250c      	movcc	r5, #12
 800978a:	4629      	mov	r1, r5
 800978c:	4638      	mov	r0, r7
 800978e:	f7ff ffa5 	bl	80096dc <sbrk_aligned>
 8009792:	3001      	adds	r0, #1
 8009794:	d02b      	beq.n	80097ee <_malloc_r+0xd2>
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	442b      	add	r3, r5
 800979a:	6023      	str	r3, [r4, #0]
 800979c:	e00e      	b.n	80097bc <_malloc_r+0xa0>
 800979e:	6822      	ldr	r2, [r4, #0]
 80097a0:	1b52      	subs	r2, r2, r5
 80097a2:	d41e      	bmi.n	80097e2 <_malloc_r+0xc6>
 80097a4:	2a0b      	cmp	r2, #11
 80097a6:	d916      	bls.n	80097d6 <_malloc_r+0xba>
 80097a8:	1961      	adds	r1, r4, r5
 80097aa:	42a3      	cmp	r3, r4
 80097ac:	6025      	str	r5, [r4, #0]
 80097ae:	bf18      	it	ne
 80097b0:	6059      	strne	r1, [r3, #4]
 80097b2:	6863      	ldr	r3, [r4, #4]
 80097b4:	bf08      	it	eq
 80097b6:	6031      	streq	r1, [r6, #0]
 80097b8:	5162      	str	r2, [r4, r5]
 80097ba:	604b      	str	r3, [r1, #4]
 80097bc:	4638      	mov	r0, r7
 80097be:	f104 060b 	add.w	r6, r4, #11
 80097c2:	f000 f865 	bl	8009890 <__malloc_unlock>
 80097c6:	f026 0607 	bic.w	r6, r6, #7
 80097ca:	1d23      	adds	r3, r4, #4
 80097cc:	1af2      	subs	r2, r6, r3
 80097ce:	d0b6      	beq.n	800973e <_malloc_r+0x22>
 80097d0:	1b9b      	subs	r3, r3, r6
 80097d2:	50a3      	str	r3, [r4, r2]
 80097d4:	e7b3      	b.n	800973e <_malloc_r+0x22>
 80097d6:	6862      	ldr	r2, [r4, #4]
 80097d8:	42a3      	cmp	r3, r4
 80097da:	bf0c      	ite	eq
 80097dc:	6032      	streq	r2, [r6, #0]
 80097de:	605a      	strne	r2, [r3, #4]
 80097e0:	e7ec      	b.n	80097bc <_malloc_r+0xa0>
 80097e2:	4623      	mov	r3, r4
 80097e4:	6864      	ldr	r4, [r4, #4]
 80097e6:	e7b2      	b.n	800974e <_malloc_r+0x32>
 80097e8:	4634      	mov	r4, r6
 80097ea:	6876      	ldr	r6, [r6, #4]
 80097ec:	e7b9      	b.n	8009762 <_malloc_r+0x46>
 80097ee:	230c      	movs	r3, #12
 80097f0:	603b      	str	r3, [r7, #0]
 80097f2:	4638      	mov	r0, r7
 80097f4:	f000 f84c 	bl	8009890 <__malloc_unlock>
 80097f8:	e7a1      	b.n	800973e <_malloc_r+0x22>
 80097fa:	6025      	str	r5, [r4, #0]
 80097fc:	e7de      	b.n	80097bc <_malloc_r+0xa0>
 80097fe:	bf00      	nop
 8009800:	2000251c 	.word	0x2000251c

08009804 <_realloc_r>:
 8009804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009808:	4680      	mov	r8, r0
 800980a:	4614      	mov	r4, r2
 800980c:	460e      	mov	r6, r1
 800980e:	b921      	cbnz	r1, 800981a <_realloc_r+0x16>
 8009810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009814:	4611      	mov	r1, r2
 8009816:	f7ff bf81 	b.w	800971c <_malloc_r>
 800981a:	b92a      	cbnz	r2, 8009828 <_realloc_r+0x24>
 800981c:	f000 f83e 	bl	800989c <_free_r>
 8009820:	4625      	mov	r5, r4
 8009822:	4628      	mov	r0, r5
 8009824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009828:	f000 f884 	bl	8009934 <_malloc_usable_size_r>
 800982c:	4284      	cmp	r4, r0
 800982e:	4607      	mov	r7, r0
 8009830:	d802      	bhi.n	8009838 <_realloc_r+0x34>
 8009832:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009836:	d812      	bhi.n	800985e <_realloc_r+0x5a>
 8009838:	4621      	mov	r1, r4
 800983a:	4640      	mov	r0, r8
 800983c:	f7ff ff6e 	bl	800971c <_malloc_r>
 8009840:	4605      	mov	r5, r0
 8009842:	2800      	cmp	r0, #0
 8009844:	d0ed      	beq.n	8009822 <_realloc_r+0x1e>
 8009846:	42bc      	cmp	r4, r7
 8009848:	4622      	mov	r2, r4
 800984a:	4631      	mov	r1, r6
 800984c:	bf28      	it	cs
 800984e:	463a      	movcs	r2, r7
 8009850:	f7ff fee2 	bl	8009618 <memcpy>
 8009854:	4631      	mov	r1, r6
 8009856:	4640      	mov	r0, r8
 8009858:	f000 f820 	bl	800989c <_free_r>
 800985c:	e7e1      	b.n	8009822 <_realloc_r+0x1e>
 800985e:	4635      	mov	r5, r6
 8009860:	e7df      	b.n	8009822 <_realloc_r+0x1e>
	...

08009864 <_sbrk_r>:
 8009864:	b538      	push	{r3, r4, r5, lr}
 8009866:	4d06      	ldr	r5, [pc, #24]	; (8009880 <_sbrk_r+0x1c>)
 8009868:	2300      	movs	r3, #0
 800986a:	4604      	mov	r4, r0
 800986c:	4608      	mov	r0, r1
 800986e:	602b      	str	r3, [r5, #0]
 8009870:	f7f8 ffba 	bl	80027e8 <_sbrk>
 8009874:	1c43      	adds	r3, r0, #1
 8009876:	d102      	bne.n	800987e <_sbrk_r+0x1a>
 8009878:	682b      	ldr	r3, [r5, #0]
 800987a:	b103      	cbz	r3, 800987e <_sbrk_r+0x1a>
 800987c:	6023      	str	r3, [r4, #0]
 800987e:	bd38      	pop	{r3, r4, r5, pc}
 8009880:	20002524 	.word	0x20002524

08009884 <__malloc_lock>:
 8009884:	4801      	ldr	r0, [pc, #4]	; (800988c <__malloc_lock+0x8>)
 8009886:	f000 b85d 	b.w	8009944 <__retarget_lock_acquire_recursive>
 800988a:	bf00      	nop
 800988c:	20002528 	.word	0x20002528

08009890 <__malloc_unlock>:
 8009890:	4801      	ldr	r0, [pc, #4]	; (8009898 <__malloc_unlock+0x8>)
 8009892:	f000 b858 	b.w	8009946 <__retarget_lock_release_recursive>
 8009896:	bf00      	nop
 8009898:	20002528 	.word	0x20002528

0800989c <_free_r>:
 800989c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800989e:	2900      	cmp	r1, #0
 80098a0:	d044      	beq.n	800992c <_free_r+0x90>
 80098a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098a6:	9001      	str	r0, [sp, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f1a1 0404 	sub.w	r4, r1, #4
 80098ae:	bfb8      	it	lt
 80098b0:	18e4      	addlt	r4, r4, r3
 80098b2:	f7ff ffe7 	bl	8009884 <__malloc_lock>
 80098b6:	4a1e      	ldr	r2, [pc, #120]	; (8009930 <_free_r+0x94>)
 80098b8:	9801      	ldr	r0, [sp, #4]
 80098ba:	6813      	ldr	r3, [r2, #0]
 80098bc:	b933      	cbnz	r3, 80098cc <_free_r+0x30>
 80098be:	6063      	str	r3, [r4, #4]
 80098c0:	6014      	str	r4, [r2, #0]
 80098c2:	b003      	add	sp, #12
 80098c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098c8:	f7ff bfe2 	b.w	8009890 <__malloc_unlock>
 80098cc:	42a3      	cmp	r3, r4
 80098ce:	d908      	bls.n	80098e2 <_free_r+0x46>
 80098d0:	6825      	ldr	r5, [r4, #0]
 80098d2:	1961      	adds	r1, r4, r5
 80098d4:	428b      	cmp	r3, r1
 80098d6:	bf01      	itttt	eq
 80098d8:	6819      	ldreq	r1, [r3, #0]
 80098da:	685b      	ldreq	r3, [r3, #4]
 80098dc:	1949      	addeq	r1, r1, r5
 80098de:	6021      	streq	r1, [r4, #0]
 80098e0:	e7ed      	b.n	80098be <_free_r+0x22>
 80098e2:	461a      	mov	r2, r3
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	b10b      	cbz	r3, 80098ec <_free_r+0x50>
 80098e8:	42a3      	cmp	r3, r4
 80098ea:	d9fa      	bls.n	80098e2 <_free_r+0x46>
 80098ec:	6811      	ldr	r1, [r2, #0]
 80098ee:	1855      	adds	r5, r2, r1
 80098f0:	42a5      	cmp	r5, r4
 80098f2:	d10b      	bne.n	800990c <_free_r+0x70>
 80098f4:	6824      	ldr	r4, [r4, #0]
 80098f6:	4421      	add	r1, r4
 80098f8:	1854      	adds	r4, r2, r1
 80098fa:	42a3      	cmp	r3, r4
 80098fc:	6011      	str	r1, [r2, #0]
 80098fe:	d1e0      	bne.n	80098c2 <_free_r+0x26>
 8009900:	681c      	ldr	r4, [r3, #0]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	6053      	str	r3, [r2, #4]
 8009906:	4421      	add	r1, r4
 8009908:	6011      	str	r1, [r2, #0]
 800990a:	e7da      	b.n	80098c2 <_free_r+0x26>
 800990c:	d902      	bls.n	8009914 <_free_r+0x78>
 800990e:	230c      	movs	r3, #12
 8009910:	6003      	str	r3, [r0, #0]
 8009912:	e7d6      	b.n	80098c2 <_free_r+0x26>
 8009914:	6825      	ldr	r5, [r4, #0]
 8009916:	1961      	adds	r1, r4, r5
 8009918:	428b      	cmp	r3, r1
 800991a:	bf04      	itt	eq
 800991c:	6819      	ldreq	r1, [r3, #0]
 800991e:	685b      	ldreq	r3, [r3, #4]
 8009920:	6063      	str	r3, [r4, #4]
 8009922:	bf04      	itt	eq
 8009924:	1949      	addeq	r1, r1, r5
 8009926:	6021      	streq	r1, [r4, #0]
 8009928:	6054      	str	r4, [r2, #4]
 800992a:	e7ca      	b.n	80098c2 <_free_r+0x26>
 800992c:	b003      	add	sp, #12
 800992e:	bd30      	pop	{r4, r5, pc}
 8009930:	2000251c 	.word	0x2000251c

08009934 <_malloc_usable_size_r>:
 8009934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009938:	1f18      	subs	r0, r3, #4
 800993a:	2b00      	cmp	r3, #0
 800993c:	bfbc      	itt	lt
 800993e:	580b      	ldrlt	r3, [r1, r0]
 8009940:	18c0      	addlt	r0, r0, r3
 8009942:	4770      	bx	lr

08009944 <__retarget_lock_acquire_recursive>:
 8009944:	4770      	bx	lr

08009946 <__retarget_lock_release_recursive>:
 8009946:	4770      	bx	lr

08009948 <_init>:
 8009948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994a:	bf00      	nop
 800994c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800994e:	bc08      	pop	{r3}
 8009950:	469e      	mov	lr, r3
 8009952:	4770      	bx	lr

08009954 <_fini>:
 8009954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009956:	bf00      	nop
 8009958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800995a:	bc08      	pop	{r3}
 800995c:	469e      	mov	lr, r3
 800995e:	4770      	bx	lr
